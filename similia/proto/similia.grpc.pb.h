// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: similia/proto/similia.proto
// Original file comments:
//
// This file defines similia protocol buffers that are used to:
// -Define the grpc request/response objects and service definitions such that we can make
// RPC requests between various binaries.
//
#ifndef GRPC_similia_2fproto_2fsimilia_2eproto__INCLUDED
#define GRPC_similia_2fproto_2fsimilia_2eproto__INCLUDED

#include "similia/proto/similia.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace similia {
namespace proto {

// The service definition for Similia (the search service).
class Similia final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Search for images similar to the image in the request.
    virtual ::grpc::Status SimiliaSearch(::grpc::ClientContext* context, const ::similia::proto::SimiliaSearchRequest& request, ::similia::proto::SimiliaSearchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::similia::proto::SimiliaSearchResponse>> AsyncSimiliaSearch(::grpc::ClientContext* context, const ::similia::proto::SimiliaSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::similia::proto::SimiliaSearchResponse>>(AsyncSimiliaSearchRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::similia::proto::SimiliaSearchResponse>* AsyncSimiliaSearchRaw(::grpc::ClientContext* context, const ::similia::proto::SimiliaSearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SimiliaSearch(::grpc::ClientContext* context, const ::similia::proto::SimiliaSearchRequest& request, ::similia::proto::SimiliaSearchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::similia::proto::SimiliaSearchResponse>> AsyncSimiliaSearch(::grpc::ClientContext* context, const ::similia::proto::SimiliaSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::similia::proto::SimiliaSearchResponse>>(AsyncSimiliaSearchRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::similia::proto::SimiliaSearchResponse>* AsyncSimiliaSearchRaw(::grpc::ClientContext* context, const ::similia::proto::SimiliaSearchRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_SimiliaSearch_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Search for images similar to the image in the request.
    virtual ::grpc::Status SimiliaSearch(::grpc::ServerContext* context, const ::similia::proto::SimiliaSearchRequest* request, ::similia::proto::SimiliaSearchResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SimiliaSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SimiliaSearch() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SimiliaSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimiliaSearch(::grpc::ServerContext* context, const ::similia::proto::SimiliaSearchRequest* request, ::similia::proto::SimiliaSearchResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSimiliaSearch(::grpc::ServerContext* context, ::similia::proto::SimiliaSearchRequest* request, ::grpc::ServerAsyncResponseWriter< ::similia::proto::SimiliaSearchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SimiliaSearch<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_SimiliaSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SimiliaSearch() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SimiliaSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimiliaSearch(::grpc::ServerContext* context, const ::similia::proto::SimiliaSearchRequest* request, ::similia::proto::SimiliaSearchResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SimiliaSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SimiliaSearch() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::similia::proto::SimiliaSearchRequest, ::similia::proto::SimiliaSearchResponse>(std::bind(&WithStreamedUnaryMethod_SimiliaSearch<BaseClass>::StreamedSimiliaSearch, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SimiliaSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SimiliaSearch(::grpc::ServerContext* context, const ::similia::proto::SimiliaSearchRequest* request, ::similia::proto::SimiliaSearchResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSimiliaSearch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::similia::proto::SimiliaSearchRequest,::similia::proto::SimiliaSearchResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SimiliaSearch<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SimiliaSearch<Service > StreamedService;
};

// The service definition of the inverted multi index (read by similia and written by index processor)
class InvertedMultiIndex final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Add element to a cell.
    virtual ::grpc::Status Add(::grpc::ClientContext* context, const ::similia::proto::MultiIndexAddRequest& request, ::similia::proto::MultiIndexAddResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::similia::proto::MultiIndexAddResponse>> AsyncAdd(::grpc::ClientContext* context, const ::similia::proto::MultiIndexAddRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::similia::proto::MultiIndexAddResponse>>(AsyncAddRaw(context, request, cq));
    }
    // Get all elements from a cell.
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::similia::proto::MultiIndexGetRequest& request, ::similia::proto::MultiIndexGetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::similia::proto::MultiIndexGetResponse>> AsyncGet(::grpc::ClientContext* context, const ::similia::proto::MultiIndexGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::similia::proto::MultiIndexGetResponse>>(AsyncGetRaw(context, request, cq));
    }
    // Delete an element
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::similia::proto::MultiIndexDeleteRequest& request, ::similia::proto::MultiIndexDeleteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::similia::proto::MultiIndexDeleteResponse>> AsyncDelete(::grpc::ClientContext* context, const ::similia::proto::MultiIndexDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::similia::proto::MultiIndexDeleteResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    // Get all elements from multiple cells.
    virtual ::grpc::Status MultiGet(::grpc::ClientContext* context, const ::similia::proto::MultiIndexMultiGetRequest& request, ::similia::proto::MultiIndexMultiGetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::similia::proto::MultiIndexMultiGetResponse>> AsyncMultiGet(::grpc::ClientContext* context, const ::similia::proto::MultiIndexMultiGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::similia::proto::MultiIndexMultiGetResponse>>(AsyncMultiGetRaw(context, request, cq));
    }
    // Get images counts from multiple cells.
    virtual ::grpc::Status MultiCount(::grpc::ClientContext* context, const ::similia::proto::MultiIndexMultiCountRequest& request, ::similia::proto::MultiIndexMultiCountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::similia::proto::MultiIndexMultiCountResponse>> AsyncMultiCount(::grpc::ClientContext* context, const ::similia::proto::MultiIndexMultiCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::similia::proto::MultiIndexMultiCountResponse>>(AsyncMultiCountRaw(context, request, cq));
    }
    // Add multiple elements to cells.
    virtual ::grpc::Status MultiAdd(::grpc::ClientContext* context, const ::similia::proto::MultiIndexMultiAddRequest& request, ::similia::proto::MultiIndexMultiAddResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::similia::proto::MultiIndexMultiAddResponse>> AsyncMultiAdd(::grpc::ClientContext* context, const ::similia::proto::MultiIndexMultiAddRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::similia::proto::MultiIndexMultiAddResponse>>(AsyncMultiAddRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::similia::proto::MultiIndexAddResponse>* AsyncAddRaw(::grpc::ClientContext* context, const ::similia::proto::MultiIndexAddRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::similia::proto::MultiIndexGetResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::similia::proto::MultiIndexGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::similia::proto::MultiIndexDeleteResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::similia::proto::MultiIndexDeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::similia::proto::MultiIndexMultiGetResponse>* AsyncMultiGetRaw(::grpc::ClientContext* context, const ::similia::proto::MultiIndexMultiGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::similia::proto::MultiIndexMultiCountResponse>* AsyncMultiCountRaw(::grpc::ClientContext* context, const ::similia::proto::MultiIndexMultiCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::similia::proto::MultiIndexMultiAddResponse>* AsyncMultiAddRaw(::grpc::ClientContext* context, const ::similia::proto::MultiIndexMultiAddRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Add(::grpc::ClientContext* context, const ::similia::proto::MultiIndexAddRequest& request, ::similia::proto::MultiIndexAddResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::similia::proto::MultiIndexAddResponse>> AsyncAdd(::grpc::ClientContext* context, const ::similia::proto::MultiIndexAddRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::similia::proto::MultiIndexAddResponse>>(AsyncAddRaw(context, request, cq));
    }
    ::grpc::Status Get(::grpc::ClientContext* context, const ::similia::proto::MultiIndexGetRequest& request, ::similia::proto::MultiIndexGetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::similia::proto::MultiIndexGetResponse>> AsyncGet(::grpc::ClientContext* context, const ::similia::proto::MultiIndexGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::similia::proto::MultiIndexGetResponse>>(AsyncGetRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::similia::proto::MultiIndexDeleteRequest& request, ::similia::proto::MultiIndexDeleteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::similia::proto::MultiIndexDeleteResponse>> AsyncDelete(::grpc::ClientContext* context, const ::similia::proto::MultiIndexDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::similia::proto::MultiIndexDeleteResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    ::grpc::Status MultiGet(::grpc::ClientContext* context, const ::similia::proto::MultiIndexMultiGetRequest& request, ::similia::proto::MultiIndexMultiGetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::similia::proto::MultiIndexMultiGetResponse>> AsyncMultiGet(::grpc::ClientContext* context, const ::similia::proto::MultiIndexMultiGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::similia::proto::MultiIndexMultiGetResponse>>(AsyncMultiGetRaw(context, request, cq));
    }
    ::grpc::Status MultiCount(::grpc::ClientContext* context, const ::similia::proto::MultiIndexMultiCountRequest& request, ::similia::proto::MultiIndexMultiCountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::similia::proto::MultiIndexMultiCountResponse>> AsyncMultiCount(::grpc::ClientContext* context, const ::similia::proto::MultiIndexMultiCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::similia::proto::MultiIndexMultiCountResponse>>(AsyncMultiCountRaw(context, request, cq));
    }
    ::grpc::Status MultiAdd(::grpc::ClientContext* context, const ::similia::proto::MultiIndexMultiAddRequest& request, ::similia::proto::MultiIndexMultiAddResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::similia::proto::MultiIndexMultiAddResponse>> AsyncMultiAdd(::grpc::ClientContext* context, const ::similia::proto::MultiIndexMultiAddRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::similia::proto::MultiIndexMultiAddResponse>>(AsyncMultiAddRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::similia::proto::MultiIndexAddResponse>* AsyncAddRaw(::grpc::ClientContext* context, const ::similia::proto::MultiIndexAddRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::similia::proto::MultiIndexGetResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::similia::proto::MultiIndexGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::similia::proto::MultiIndexDeleteResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::similia::proto::MultiIndexDeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::similia::proto::MultiIndexMultiGetResponse>* AsyncMultiGetRaw(::grpc::ClientContext* context, const ::similia::proto::MultiIndexMultiGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::similia::proto::MultiIndexMultiCountResponse>* AsyncMultiCountRaw(::grpc::ClientContext* context, const ::similia::proto::MultiIndexMultiCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::similia::proto::MultiIndexMultiAddResponse>* AsyncMultiAddRaw(::grpc::ClientContext* context, const ::similia::proto::MultiIndexMultiAddRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_Add_;
    const ::grpc::RpcMethod rpcmethod_Get_;
    const ::grpc::RpcMethod rpcmethod_Delete_;
    const ::grpc::RpcMethod rpcmethod_MultiGet_;
    const ::grpc::RpcMethod rpcmethod_MultiCount_;
    const ::grpc::RpcMethod rpcmethod_MultiAdd_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Add element to a cell.
    virtual ::grpc::Status Add(::grpc::ServerContext* context, const ::similia::proto::MultiIndexAddRequest* request, ::similia::proto::MultiIndexAddResponse* response);
    // Get all elements from a cell.
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::similia::proto::MultiIndexGetRequest* request, ::similia::proto::MultiIndexGetResponse* response);
    // Delete an element
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::similia::proto::MultiIndexDeleteRequest* request, ::similia::proto::MultiIndexDeleteResponse* response);
    // Get all elements from multiple cells.
    virtual ::grpc::Status MultiGet(::grpc::ServerContext* context, const ::similia::proto::MultiIndexMultiGetRequest* request, ::similia::proto::MultiIndexMultiGetResponse* response);
    // Get images counts from multiple cells.
    virtual ::grpc::Status MultiCount(::grpc::ServerContext* context, const ::similia::proto::MultiIndexMultiCountRequest* request, ::similia::proto::MultiIndexMultiCountResponse* response);
    // Add multiple elements to cells.
    virtual ::grpc::Status MultiAdd(::grpc::ServerContext* context, const ::similia::proto::MultiIndexMultiAddRequest* request, ::similia::proto::MultiIndexMultiAddResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Add() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* context, const ::similia::proto::MultiIndexAddRequest* request, ::similia::proto::MultiIndexAddResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAdd(::grpc::ServerContext* context, ::similia::proto::MultiIndexAddRequest* request, ::grpc::ServerAsyncResponseWriter< ::similia::proto::MultiIndexAddResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::similia::proto::MultiIndexGetRequest* request, ::similia::proto::MultiIndexGetResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::similia::proto::MultiIndexGetRequest* request, ::grpc::ServerAsyncResponseWriter< ::similia::proto::MultiIndexGetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::similia::proto::MultiIndexDeleteRequest* request, ::similia::proto::MultiIndexDeleteResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::similia::proto::MultiIndexDeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::similia::proto::MultiIndexDeleteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MultiGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_MultiGet() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_MultiGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MultiGet(::grpc::ServerContext* context, const ::similia::proto::MultiIndexMultiGetRequest* request, ::similia::proto::MultiIndexMultiGetResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMultiGet(::grpc::ServerContext* context, ::similia::proto::MultiIndexMultiGetRequest* request, ::grpc::ServerAsyncResponseWriter< ::similia::proto::MultiIndexMultiGetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MultiCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_MultiCount() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_MultiCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MultiCount(::grpc::ServerContext* context, const ::similia::proto::MultiIndexMultiCountRequest* request, ::similia::proto::MultiIndexMultiCountResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMultiCount(::grpc::ServerContext* context, ::similia::proto::MultiIndexMultiCountRequest* request, ::grpc::ServerAsyncResponseWriter< ::similia::proto::MultiIndexMultiCountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MultiAdd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_MultiAdd() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_MultiAdd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MultiAdd(::grpc::ServerContext* context, const ::similia::proto::MultiIndexMultiAddRequest* request, ::similia::proto::MultiIndexMultiAddResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMultiAdd(::grpc::ServerContext* context, ::similia::proto::MultiIndexMultiAddRequest* request, ::grpc::ServerAsyncResponseWriter< ::similia::proto::MultiIndexMultiAddResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Add<WithAsyncMethod_Get<WithAsyncMethod_Delete<WithAsyncMethod_MultiGet<WithAsyncMethod_MultiCount<WithAsyncMethod_MultiAdd<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Add() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* context, const ::similia::proto::MultiIndexAddRequest* request, ::similia::proto::MultiIndexAddResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::similia::proto::MultiIndexGetRequest* request, ::similia::proto::MultiIndexGetResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::similia::proto::MultiIndexDeleteRequest* request, ::similia::proto::MultiIndexDeleteResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MultiGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_MultiGet() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_MultiGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MultiGet(::grpc::ServerContext* context, const ::similia::proto::MultiIndexMultiGetRequest* request, ::similia::proto::MultiIndexMultiGetResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MultiCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_MultiCount() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_MultiCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MultiCount(::grpc::ServerContext* context, const ::similia::proto::MultiIndexMultiCountRequest* request, ::similia::proto::MultiIndexMultiCountResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MultiAdd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_MultiAdd() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_MultiAdd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MultiAdd(::grpc::ServerContext* context, const ::similia::proto::MultiIndexMultiAddRequest* request, ::similia::proto::MultiIndexMultiAddResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Add() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::similia::proto::MultiIndexAddRequest, ::similia::proto::MultiIndexAddResponse>(std::bind(&WithStreamedUnaryMethod_Add<BaseClass>::StreamedAdd, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Add(::grpc::ServerContext* context, const ::similia::proto::MultiIndexAddRequest* request, ::similia::proto::MultiIndexAddResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAdd(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::similia::proto::MultiIndexAddRequest,::similia::proto::MultiIndexAddResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::similia::proto::MultiIndexGetRequest, ::similia::proto::MultiIndexGetResponse>(std::bind(&WithStreamedUnaryMethod_Get<BaseClass>::StreamedGet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::similia::proto::MultiIndexGetRequest* request, ::similia::proto::MultiIndexGetResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::similia::proto::MultiIndexGetRequest,::similia::proto::MultiIndexGetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::similia::proto::MultiIndexDeleteRequest, ::similia::proto::MultiIndexDeleteResponse>(std::bind(&WithStreamedUnaryMethod_Delete<BaseClass>::StreamedDelete, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::similia::proto::MultiIndexDeleteRequest* request, ::similia::proto::MultiIndexDeleteResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::similia::proto::MultiIndexDeleteRequest,::similia::proto::MultiIndexDeleteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MultiGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_MultiGet() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::similia::proto::MultiIndexMultiGetRequest, ::similia::proto::MultiIndexMultiGetResponse>(std::bind(&WithStreamedUnaryMethod_MultiGet<BaseClass>::StreamedMultiGet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_MultiGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MultiGet(::grpc::ServerContext* context, const ::similia::proto::MultiIndexMultiGetRequest* request, ::similia::proto::MultiIndexMultiGetResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMultiGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::similia::proto::MultiIndexMultiGetRequest,::similia::proto::MultiIndexMultiGetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MultiCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_MultiCount() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::StreamedUnaryHandler< ::similia::proto::MultiIndexMultiCountRequest, ::similia::proto::MultiIndexMultiCountResponse>(std::bind(&WithStreamedUnaryMethod_MultiCount<BaseClass>::StreamedMultiCount, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_MultiCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MultiCount(::grpc::ServerContext* context, const ::similia::proto::MultiIndexMultiCountRequest* request, ::similia::proto::MultiIndexMultiCountResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMultiCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::similia::proto::MultiIndexMultiCountRequest,::similia::proto::MultiIndexMultiCountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MultiAdd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_MultiAdd() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::StreamedUnaryHandler< ::similia::proto::MultiIndexMultiAddRequest, ::similia::proto::MultiIndexMultiAddResponse>(std::bind(&WithStreamedUnaryMethod_MultiAdd<BaseClass>::StreamedMultiAdd, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_MultiAdd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MultiAdd(::grpc::ServerContext* context, const ::similia::proto::MultiIndexMultiAddRequest* request, ::similia::proto::MultiIndexMultiAddResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMultiAdd(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::similia::proto::MultiIndexMultiAddRequest,::similia::proto::MultiIndexMultiAddResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Add<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_MultiGet<WithStreamedUnaryMethod_MultiCount<WithStreamedUnaryMethod_MultiAdd<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Add<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_MultiGet<WithStreamedUnaryMethod_MultiCount<WithStreamedUnaryMethod_MultiAdd<Service > > > > > > StreamedService;
};

// The service definition of the multi product quantizer (used by index processor)
class MultiProductQuantizer final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Quantize a vector of features
    virtual ::grpc::Status Quantize(::grpc::ClientContext* context, const ::similia::proto::QuantizationRequest& request, ::similia::proto::QuantizationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::similia::proto::QuantizationResponse>> AsyncQuantize(::grpc::ClientContext* context, const ::similia::proto::QuantizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::similia::proto::QuantizationResponse>>(AsyncQuantizeRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::similia::proto::QuantizationResponse>* AsyncQuantizeRaw(::grpc::ClientContext* context, const ::similia::proto::QuantizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Quantize(::grpc::ClientContext* context, const ::similia::proto::QuantizationRequest& request, ::similia::proto::QuantizationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::similia::proto::QuantizationResponse>> AsyncQuantize(::grpc::ClientContext* context, const ::similia::proto::QuantizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::similia::proto::QuantizationResponse>>(AsyncQuantizeRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::similia::proto::QuantizationResponse>* AsyncQuantizeRaw(::grpc::ClientContext* context, const ::similia::proto::QuantizationRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_Quantize_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Quantize a vector of features
    virtual ::grpc::Status Quantize(::grpc::ServerContext* context, const ::similia::proto::QuantizationRequest* request, ::similia::proto::QuantizationResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Quantize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Quantize() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Quantize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Quantize(::grpc::ServerContext* context, const ::similia::proto::QuantizationRequest* request, ::similia::proto::QuantizationResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuantize(::grpc::ServerContext* context, ::similia::proto::QuantizationRequest* request, ::grpc::ServerAsyncResponseWriter< ::similia::proto::QuantizationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Quantize<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Quantize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Quantize() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Quantize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Quantize(::grpc::ServerContext* context, const ::similia::proto::QuantizationRequest* request, ::similia::proto::QuantizationResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Quantize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Quantize() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::similia::proto::QuantizationRequest, ::similia::proto::QuantizationResponse>(std::bind(&WithStreamedUnaryMethod_Quantize<BaseClass>::StreamedQuantize, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Quantize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Quantize(::grpc::ServerContext* context, const ::similia::proto::QuantizationRequest* request, ::similia::proto::QuantizationResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQuantize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::similia::proto::QuantizationRequest,::similia::proto::QuantizationResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Quantize<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Quantize<Service > StreamedService;
};

}  // namespace proto
}  // namespace similia


#endif  // GRPC_similia_2fproto_2fsimilia_2eproto__INCLUDED
