// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: similia/proto/similia.proto

#ifndef PROTOBUF_similia_2fproto_2fsimilia_2eproto__INCLUDED
#define PROTOBUF_similia_2fproto_2fsimilia_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace similia {
namespace proto {
class CompressedElement;
class CompressedElementDefaultTypeInternal;
extern CompressedElementDefaultTypeInternal _CompressedElement_default_instance_;
class CompressedElements;
class CompressedElementsDefaultTypeInternal;
extern CompressedElementsDefaultTypeInternal _CompressedElements_default_instance_;
class CompressedElementsCombined;
class CompressedElementsCombinedDefaultTypeInternal;
extern CompressedElementsCombinedDefaultTypeInternal _CompressedElementsCombined_default_instance_;
class CompressedElementsMap;
class CompressedElementsMapDefaultTypeInternal;
extern CompressedElementsMapDefaultTypeInternal _CompressedElementsMap_default_instance_;
class CompressingClustersIds;
class CompressingClustersIdsDefaultTypeInternal;
extern CompressingClustersIdsDefaultTypeInternal _CompressingClustersIds_default_instance_;
class Features;
class FeaturesDefaultTypeInternal;
extern FeaturesDefaultTypeInternal _Features_default_instance_;
class FloatMatrix;
class FloatMatrixDefaultTypeInternal;
extern FloatMatrixDefaultTypeInternal _FloatMatrix_default_instance_;
class IndexingClustersIds;
class IndexingClustersIdsDefaultTypeInternal;
extern IndexingClustersIdsDefaultTypeInternal _IndexingClustersIds_default_instance_;
class MultiIndexAddRequest;
class MultiIndexAddRequestDefaultTypeInternal;
extern MultiIndexAddRequestDefaultTypeInternal _MultiIndexAddRequest_default_instance_;
class MultiIndexAddResponse;
class MultiIndexAddResponseDefaultTypeInternal;
extern MultiIndexAddResponseDefaultTypeInternal _MultiIndexAddResponse_default_instance_;
class MultiIndexDeleteRequest;
class MultiIndexDeleteRequestDefaultTypeInternal;
extern MultiIndexDeleteRequestDefaultTypeInternal _MultiIndexDeleteRequest_default_instance_;
class MultiIndexDeleteResponse;
class MultiIndexDeleteResponseDefaultTypeInternal;
extern MultiIndexDeleteResponseDefaultTypeInternal _MultiIndexDeleteResponse_default_instance_;
class MultiIndexGetRequest;
class MultiIndexGetRequestDefaultTypeInternal;
extern MultiIndexGetRequestDefaultTypeInternal _MultiIndexGetRequest_default_instance_;
class MultiIndexGetResponse;
class MultiIndexGetResponseDefaultTypeInternal;
extern MultiIndexGetResponseDefaultTypeInternal _MultiIndexGetResponse_default_instance_;
class MultiIndexMultiAddRequest;
class MultiIndexMultiAddRequestDefaultTypeInternal;
extern MultiIndexMultiAddRequestDefaultTypeInternal _MultiIndexMultiAddRequest_default_instance_;
class MultiIndexMultiAddResponse;
class MultiIndexMultiAddResponseDefaultTypeInternal;
extern MultiIndexMultiAddResponseDefaultTypeInternal _MultiIndexMultiAddResponse_default_instance_;
class MultiIndexMultiCountRequest;
class MultiIndexMultiCountRequestDefaultTypeInternal;
extern MultiIndexMultiCountRequestDefaultTypeInternal _MultiIndexMultiCountRequest_default_instance_;
class MultiIndexMultiCountResponse;
class MultiIndexMultiCountResponseDefaultTypeInternal;
extern MultiIndexMultiCountResponseDefaultTypeInternal _MultiIndexMultiCountResponse_default_instance_;
class MultiIndexMultiGetRequest;
class MultiIndexMultiGetRequestDefaultTypeInternal;
extern MultiIndexMultiGetRequestDefaultTypeInternal _MultiIndexMultiGetRequest_default_instance_;
class MultiIndexMultiGetResponse;
class MultiIndexMultiGetResponseDefaultTypeInternal;
extern MultiIndexMultiGetResponseDefaultTypeInternal _MultiIndexMultiGetResponse_default_instance_;
class QuantizationRequest;
class QuantizationRequestDefaultTypeInternal;
extern QuantizationRequestDefaultTypeInternal _QuantizationRequest_default_instance_;
class QuantizationResponse;
class QuantizationResponseDefaultTypeInternal;
extern QuantizationResponseDefaultTypeInternal _QuantizationResponse_default_instance_;
class SerializedCompressedElement;
class SerializedCompressedElementDefaultTypeInternal;
extern SerializedCompressedElementDefaultTypeInternal _SerializedCompressedElement_default_instance_;
class SerializedCompressedElements;
class SerializedCompressedElementsDefaultTypeInternal;
extern SerializedCompressedElementsDefaultTypeInternal _SerializedCompressedElements_default_instance_;
class SerializedCompressedElementsCombined;
class SerializedCompressedElementsCombinedDefaultTypeInternal;
extern SerializedCompressedElementsCombinedDefaultTypeInternal _SerializedCompressedElementsCombined_default_instance_;
class SimiliaSearchRequest;
class SimiliaSearchRequestDefaultTypeInternal;
extern SimiliaSearchRequestDefaultTypeInternal _SimiliaSearchRequest_default_instance_;
class SimiliaSearchResponse;
class SimiliaSearchResponseDefaultTypeInternal;
extern SimiliaSearchResponseDefaultTypeInternal _SimiliaSearchResponse_default_instance_;
}  // namespace proto
}  // namespace similia

namespace similia {
namespace proto {

namespace protobuf_similia_2fproto_2fsimilia_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_similia_2fproto_2fsimilia_2eproto

// ===================================================================

class FloatMatrix : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:similia.proto.FloatMatrix) */ {
 public:
  FloatMatrix();
  virtual ~FloatMatrix();

  FloatMatrix(const FloatMatrix& from);

  inline FloatMatrix& operator=(const FloatMatrix& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FloatMatrix& default_instance();

  static inline const FloatMatrix* internal_default_instance() {
    return reinterpret_cast<const FloatMatrix*>(
               &_FloatMatrix_default_instance_);
  }

  void Swap(FloatMatrix* other);

  // implements Message ----------------------------------------------

  inline FloatMatrix* New() const PROTOBUF_FINAL { return New(NULL); }

  FloatMatrix* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FloatMatrix& from);
  void MergeFrom(const FloatMatrix& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FloatMatrix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float element = 3;
  int element_size() const;
  void clear_element();
  static const int kElementFieldNumber = 3;
  float element(int index) const;
  void set_element(int index, float value);
  void add_element(float value);
  const ::google::protobuf::RepeatedField< float >&
      element() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_element();

  // int32 num_rows = 1;
  void clear_num_rows();
  static const int kNumRowsFieldNumber = 1;
  ::google::protobuf::int32 num_rows() const;
  void set_num_rows(::google::protobuf::int32 value);

  // int32 num_cols = 2;
  void clear_num_cols();
  static const int kNumColsFieldNumber = 2;
  ::google::protobuf::int32 num_cols() const;
  void set_num_cols(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:similia.proto.FloatMatrix)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > element_;
  mutable int _element_cached_byte_size_;
  ::google::protobuf::int32 num_rows_;
  ::google::protobuf::int32 num_cols_;
  mutable int _cached_size_;
  friend struct  protobuf_similia_2fproto_2fsimilia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Features : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:similia.proto.Features) */ {
 public:
  Features();
  virtual ~Features();

  Features(const Features& from);

  inline Features& operator=(const Features& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Features& default_instance();

  static inline const Features* internal_default_instance() {
    return reinterpret_cast<const Features*>(
               &_Features_default_instance_);
  }

  void Swap(Features* other);

  // implements Message ----------------------------------------------

  inline Features* New() const PROTOBUF_FINAL { return New(NULL); }

  Features* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Features& from);
  void MergeFrom(const Features& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Features* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float element = 1;
  int element_size() const;
  void clear_element();
  static const int kElementFieldNumber = 1;
  float element(int index) const;
  void set_element(int index, float value);
  void add_element(float value);
  const ::google::protobuf::RepeatedField< float >&
      element() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_element();

  // @@protoc_insertion_point(class_scope:similia.proto.Features)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > element_;
  mutable int _element_cached_byte_size_;
  mutable int _cached_size_;
  friend struct  protobuf_similia_2fproto_2fsimilia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CompressingClustersIds : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:similia.proto.CompressingClustersIds) */ {
 public:
  CompressingClustersIds();
  virtual ~CompressingClustersIds();

  CompressingClustersIds(const CompressingClustersIds& from);

  inline CompressingClustersIds& operator=(const CompressingClustersIds& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompressingClustersIds& default_instance();

  static inline const CompressingClustersIds* internal_default_instance() {
    return reinterpret_cast<const CompressingClustersIds*>(
               &_CompressingClustersIds_default_instance_);
  }

  void Swap(CompressingClustersIds* other);

  // implements Message ----------------------------------------------

  inline CompressingClustersIds* New() const PROTOBUF_FINAL { return New(NULL); }

  CompressingClustersIds* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CompressingClustersIds& from);
  void MergeFrom(const CompressingClustersIds& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CompressingClustersIds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 id = 1;
  int id_size() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id(int index) const;
  void set_id(int index, ::google::protobuf::int32 value);
  void add_id(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_id();

  // @@protoc_insertion_point(class_scope:similia.proto.CompressingClustersIds)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > id_;
  mutable int _id_cached_byte_size_;
  mutable int _cached_size_;
  friend struct  protobuf_similia_2fproto_2fsimilia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IndexingClustersIds : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:similia.proto.IndexingClustersIds) */ {
 public:
  IndexingClustersIds();
  virtual ~IndexingClustersIds();

  IndexingClustersIds(const IndexingClustersIds& from);

  inline IndexingClustersIds& operator=(const IndexingClustersIds& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexingClustersIds& default_instance();

  static inline const IndexingClustersIds* internal_default_instance() {
    return reinterpret_cast<const IndexingClustersIds*>(
               &_IndexingClustersIds_default_instance_);
  }

  void Swap(IndexingClustersIds* other);

  // implements Message ----------------------------------------------

  inline IndexingClustersIds* New() const PROTOBUF_FINAL { return New(NULL); }

  IndexingClustersIds* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IndexingClustersIds& from);
  void MergeFrom(const IndexingClustersIds& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IndexingClustersIds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 id = 1;
  int id_size() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id(int index) const;
  void set_id(int index, ::google::protobuf::int32 value);
  void add_id(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_id();

  // @@protoc_insertion_point(class_scope:similia.proto.IndexingClustersIds)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > id_;
  mutable int _id_cached_byte_size_;
  mutable int _cached_size_;
  friend struct  protobuf_similia_2fproto_2fsimilia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CompressedElement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:similia.proto.CompressedElement) */ {
 public:
  CompressedElement();
  virtual ~CompressedElement();

  CompressedElement(const CompressedElement& from);

  inline CompressedElement& operator=(const CompressedElement& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompressedElement& default_instance();

  static inline const CompressedElement* internal_default_instance() {
    return reinterpret_cast<const CompressedElement*>(
               &_CompressedElement_default_instance_);
  }

  void Swap(CompressedElement* other);

  // implements Message ----------------------------------------------

  inline CompressedElement* New() const PROTOBUF_FINAL { return New(NULL); }

  CompressedElement* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CompressedElement& from);
  void MergeFrom(const CompressedElement& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CompressedElement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .similia.proto.CompressingClustersIds compressing_clusters_id = 2;
  bool has_compressing_clusters_id() const;
  void clear_compressing_clusters_id();
  static const int kCompressingClustersIdFieldNumber = 2;
  const ::similia::proto::CompressingClustersIds& compressing_clusters_id() const;
  ::similia::proto::CompressingClustersIds* mutable_compressing_clusters_id();
  ::similia::proto::CompressingClustersIds* release_compressing_clusters_id();
  void set_allocated_compressing_clusters_id(::similia::proto::CompressingClustersIds* compressing_clusters_id);

  // @@protoc_insertion_point(class_scope:similia.proto.CompressedElement)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::similia::proto::CompressingClustersIds* compressing_clusters_id_;
  mutable int _cached_size_;
  friend struct  protobuf_similia_2fproto_2fsimilia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SerializedCompressedElement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:similia.proto.SerializedCompressedElement) */ {
 public:
  SerializedCompressedElement();
  virtual ~SerializedCompressedElement();

  SerializedCompressedElement(const SerializedCompressedElement& from);

  inline SerializedCompressedElement& operator=(const SerializedCompressedElement& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SerializedCompressedElement& default_instance();

  static inline const SerializedCompressedElement* internal_default_instance() {
    return reinterpret_cast<const SerializedCompressedElement*>(
               &_SerializedCompressedElement_default_instance_);
  }

  void Swap(SerializedCompressedElement* other);

  // implements Message ----------------------------------------------

  inline SerializedCompressedElement* New() const PROTOBUF_FINAL { return New(NULL); }

  SerializedCompressedElement* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SerializedCompressedElement& from);
  void MergeFrom(const SerializedCompressedElement& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SerializedCompressedElement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // bytes compressing_clusters_id = 2;
  void clear_compressing_clusters_id();
  static const int kCompressingClustersIdFieldNumber = 2;
  const ::std::string& compressing_clusters_id() const;
  void set_compressing_clusters_id(const ::std::string& value);
  #if LANG_CXX11
  void set_compressing_clusters_id(::std::string&& value);
  #endif
  void set_compressing_clusters_id(const char* value);
  void set_compressing_clusters_id(const void* value, size_t size);
  ::std::string* mutable_compressing_clusters_id();
  ::std::string* release_compressing_clusters_id();
  void set_allocated_compressing_clusters_id(::std::string* compressing_clusters_id);

  // @@protoc_insertion_point(class_scope:similia.proto.SerializedCompressedElement)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr compressing_clusters_id_;
  mutable int _cached_size_;
  friend struct  protobuf_similia_2fproto_2fsimilia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CompressedElementsCombined : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:similia.proto.CompressedElementsCombined) */ {
 public:
  CompressedElementsCombined();
  virtual ~CompressedElementsCombined();

  CompressedElementsCombined(const CompressedElementsCombined& from);

  inline CompressedElementsCombined& operator=(const CompressedElementsCombined& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompressedElementsCombined& default_instance();

  static inline const CompressedElementsCombined* internal_default_instance() {
    return reinterpret_cast<const CompressedElementsCombined*>(
               &_CompressedElementsCombined_default_instance_);
  }

  void Swap(CompressedElementsCombined* other);

  // implements Message ----------------------------------------------

  inline CompressedElementsCombined* New() const PROTOBUF_FINAL { return New(NULL); }

  CompressedElementsCombined* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CompressedElementsCombined& from);
  void MergeFrom(const CompressedElementsCombined& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CompressedElementsCombined* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .similia.proto.CompressedElement compressed_element = 1;
  int compressed_element_size() const;
  void clear_compressed_element();
  static const int kCompressedElementFieldNumber = 1;
  const ::similia::proto::CompressedElement& compressed_element(int index) const;
  ::similia::proto::CompressedElement* mutable_compressed_element(int index);
  ::similia::proto::CompressedElement* add_compressed_element();
  ::google::protobuf::RepeatedPtrField< ::similia::proto::CompressedElement >*
      mutable_compressed_element();
  const ::google::protobuf::RepeatedPtrField< ::similia::proto::CompressedElement >&
      compressed_element() const;

  // @@protoc_insertion_point(class_scope:similia.proto.CompressedElementsCombined)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::similia::proto::CompressedElement > compressed_element_;
  mutable int _cached_size_;
  friend struct  protobuf_similia_2fproto_2fsimilia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SerializedCompressedElementsCombined : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:similia.proto.SerializedCompressedElementsCombined) */ {
 public:
  SerializedCompressedElementsCombined();
  virtual ~SerializedCompressedElementsCombined();

  SerializedCompressedElementsCombined(const SerializedCompressedElementsCombined& from);

  inline SerializedCompressedElementsCombined& operator=(const SerializedCompressedElementsCombined& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SerializedCompressedElementsCombined& default_instance();

  static inline const SerializedCompressedElementsCombined* internal_default_instance() {
    return reinterpret_cast<const SerializedCompressedElementsCombined*>(
               &_SerializedCompressedElementsCombined_default_instance_);
  }

  void Swap(SerializedCompressedElementsCombined* other);

  // implements Message ----------------------------------------------

  inline SerializedCompressedElementsCombined* New() const PROTOBUF_FINAL { return New(NULL); }

  SerializedCompressedElementsCombined* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SerializedCompressedElementsCombined& from);
  void MergeFrom(const SerializedCompressedElementsCombined& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SerializedCompressedElementsCombined* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .similia.proto.SerializedCompressedElement compressed_element = 1;
  int compressed_element_size() const;
  void clear_compressed_element();
  static const int kCompressedElementFieldNumber = 1;
  const ::similia::proto::SerializedCompressedElement& compressed_element(int index) const;
  ::similia::proto::SerializedCompressedElement* mutable_compressed_element(int index);
  ::similia::proto::SerializedCompressedElement* add_compressed_element();
  ::google::protobuf::RepeatedPtrField< ::similia::proto::SerializedCompressedElement >*
      mutable_compressed_element();
  const ::google::protobuf::RepeatedPtrField< ::similia::proto::SerializedCompressedElement >&
      compressed_element() const;

  // @@protoc_insertion_point(class_scope:similia.proto.SerializedCompressedElementsCombined)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::similia::proto::SerializedCompressedElement > compressed_element_;
  mutable int _cached_size_;
  friend struct  protobuf_similia_2fproto_2fsimilia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CompressedElements : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:similia.proto.CompressedElements) */ {
 public:
  CompressedElements();
  virtual ~CompressedElements();

  CompressedElements(const CompressedElements& from);

  inline CompressedElements& operator=(const CompressedElements& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompressedElements& default_instance();

  static inline const CompressedElements* internal_default_instance() {
    return reinterpret_cast<const CompressedElements*>(
               &_CompressedElements_default_instance_);
  }

  void Swap(CompressedElements* other);

  // implements Message ----------------------------------------------

  inline CompressedElements* New() const PROTOBUF_FINAL { return New(NULL); }

  CompressedElements* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CompressedElements& from);
  void MergeFrom(const CompressedElements& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CompressedElements* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string id = 1;
  int id_size() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id(int index) const;
  ::std::string* mutable_id(int index);
  void set_id(int index, const ::std::string& value);
  void set_id(int index, const char* value);
  void set_id(int index, const char* value, size_t size);
  ::std::string* add_id();
  void add_id(const ::std::string& value);
  void add_id(const char* value);
  void add_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_id();

  // repeated .similia.proto.CompressingClustersIds compressing_clusters_id = 2;
  int compressing_clusters_id_size() const;
  void clear_compressing_clusters_id();
  static const int kCompressingClustersIdFieldNumber = 2;
  const ::similia::proto::CompressingClustersIds& compressing_clusters_id(int index) const;
  ::similia::proto::CompressingClustersIds* mutable_compressing_clusters_id(int index);
  ::similia::proto::CompressingClustersIds* add_compressing_clusters_id();
  ::google::protobuf::RepeatedPtrField< ::similia::proto::CompressingClustersIds >*
      mutable_compressing_clusters_id();
  const ::google::protobuf::RepeatedPtrField< ::similia::proto::CompressingClustersIds >&
      compressing_clusters_id() const;

  // @@protoc_insertion_point(class_scope:similia.proto.CompressedElements)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> id_;
  ::google::protobuf::RepeatedPtrField< ::similia::proto::CompressingClustersIds > compressing_clusters_id_;
  mutable int _cached_size_;
  friend struct  protobuf_similia_2fproto_2fsimilia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SerializedCompressedElements : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:similia.proto.SerializedCompressedElements) */ {
 public:
  SerializedCompressedElements();
  virtual ~SerializedCompressedElements();

  SerializedCompressedElements(const SerializedCompressedElements& from);

  inline SerializedCompressedElements& operator=(const SerializedCompressedElements& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SerializedCompressedElements& default_instance();

  static inline const SerializedCompressedElements* internal_default_instance() {
    return reinterpret_cast<const SerializedCompressedElements*>(
               &_SerializedCompressedElements_default_instance_);
  }

  void Swap(SerializedCompressedElements* other);

  // implements Message ----------------------------------------------

  inline SerializedCompressedElements* New() const PROTOBUF_FINAL { return New(NULL); }

  SerializedCompressedElements* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SerializedCompressedElements& from);
  void MergeFrom(const SerializedCompressedElements& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SerializedCompressedElements* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string id = 1;
  int id_size() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id(int index) const;
  ::std::string* mutable_id(int index);
  void set_id(int index, const ::std::string& value);
  void set_id(int index, const char* value);
  void set_id(int index, const char* value, size_t size);
  ::std::string* add_id();
  void add_id(const ::std::string& value);
  void add_id(const char* value);
  void add_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_id();

  // repeated bytes compressing_clusters_id = 2;
  int compressing_clusters_id_size() const;
  void clear_compressing_clusters_id();
  static const int kCompressingClustersIdFieldNumber = 2;
  const ::std::string& compressing_clusters_id(int index) const;
  ::std::string* mutable_compressing_clusters_id(int index);
  void set_compressing_clusters_id(int index, const ::std::string& value);
  void set_compressing_clusters_id(int index, const char* value);
  void set_compressing_clusters_id(int index, const void* value, size_t size);
  ::std::string* add_compressing_clusters_id();
  void add_compressing_clusters_id(const ::std::string& value);
  void add_compressing_clusters_id(const char* value);
  void add_compressing_clusters_id(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& compressing_clusters_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_compressing_clusters_id();

  // @@protoc_insertion_point(class_scope:similia.proto.SerializedCompressedElements)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> compressing_clusters_id_;
  mutable int _cached_size_;
  friend struct  protobuf_similia_2fproto_2fsimilia_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class CompressedElementsMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:similia.proto.CompressedElementsMap) */ {
 public:
  CompressedElementsMap();
  virtual ~CompressedElementsMap();

  CompressedElementsMap(const CompressedElementsMap& from);

  inline CompressedElementsMap& operator=(const CompressedElementsMap& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompressedElementsMap& default_instance();

  static inline const CompressedElementsMap* internal_default_instance() {
    return reinterpret_cast<const CompressedElementsMap*>(
               &_CompressedElementsMap_default_instance_);
  }

  void Swap(CompressedElementsMap* other);

  // implements Message ----------------------------------------------

  inline CompressedElementsMap* New() const PROTOBUF_FINAL { return New(NULL); }

  CompressedElementsMap* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CompressedElementsMap& from);
  void MergeFrom(const CompressedElementsMap& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CompressedElementsMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .similia.proto.CompressingClustersIds> compressed_element = 1;
  int compressed_element_size() const;
  void clear_compressed_element();
  static const int kCompressedElementFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::similia::proto::CompressingClustersIds >&
      compressed_element() const;
  ::google::protobuf::Map< ::std::string, ::similia::proto::CompressingClustersIds >*
      mutable_compressed_element();

  // @@protoc_insertion_point(class_scope:similia.proto.CompressedElementsMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::similia::proto::CompressingClustersIds,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      CompressedElementsMap_CompressedElementEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::similia::proto::CompressingClustersIds,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > compressed_element_;
  mutable int _cached_size_;
  friend struct  protobuf_similia_2fproto_2fsimilia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimiliaSearchRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:similia.proto.SimiliaSearchRequest) */ {
 public:
  SimiliaSearchRequest();
  virtual ~SimiliaSearchRequest();

  SimiliaSearchRequest(const SimiliaSearchRequest& from);

  inline SimiliaSearchRequest& operator=(const SimiliaSearchRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimiliaSearchRequest& default_instance();

  static inline const SimiliaSearchRequest* internal_default_instance() {
    return reinterpret_cast<const SimiliaSearchRequest*>(
               &_SimiliaSearchRequest_default_instance_);
  }

  void Swap(SimiliaSearchRequest* other);

  // implements Message ----------------------------------------------

  inline SimiliaSearchRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SimiliaSearchRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SimiliaSearchRequest& from);
  void MergeFrom(const SimiliaSearchRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SimiliaSearchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string image_id = 1;
  void clear_image_id();
  static const int kImageIdFieldNumber = 1;
  const ::std::string& image_id() const;
  void set_image_id(const ::std::string& value);
  #if LANG_CXX11
  void set_image_id(::std::string&& value);
  #endif
  void set_image_id(const char* value);
  void set_image_id(const char* value, size_t size);
  ::std::string* mutable_image_id();
  ::std::string* release_image_id();
  void set_allocated_image_id(::std::string* image_id);

  // .similia.proto.Features features = 3;
  bool has_features() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 3;
  const ::similia::proto::Features& features() const;
  ::similia::proto::Features* mutable_features();
  ::similia::proto::Features* release_features();
  void set_allocated_features(::similia::proto::Features* features);

  // int32 num_nearest = 2;
  void clear_num_nearest();
  static const int kNumNearestFieldNumber = 2;
  ::google::protobuf::int32 num_nearest() const;
  void set_num_nearest(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:similia.proto.SimiliaSearchRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr image_id_;
  ::similia::proto::Features* features_;
  ::google::protobuf::int32 num_nearest_;
  mutable int _cached_size_;
  friend struct  protobuf_similia_2fproto_2fsimilia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimiliaSearchResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:similia.proto.SimiliaSearchResponse) */ {
 public:
  SimiliaSearchResponse();
  virtual ~SimiliaSearchResponse();

  SimiliaSearchResponse(const SimiliaSearchResponse& from);

  inline SimiliaSearchResponse& operator=(const SimiliaSearchResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimiliaSearchResponse& default_instance();

  static inline const SimiliaSearchResponse* internal_default_instance() {
    return reinterpret_cast<const SimiliaSearchResponse*>(
               &_SimiliaSearchResponse_default_instance_);
  }

  void Swap(SimiliaSearchResponse* other);

  // implements Message ----------------------------------------------

  inline SimiliaSearchResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SimiliaSearchResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SimiliaSearchResponse& from);
  void MergeFrom(const SimiliaSearchResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SimiliaSearchResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string image_id = 1;
  int image_id_size() const;
  void clear_image_id();
  static const int kImageIdFieldNumber = 1;
  const ::std::string& image_id(int index) const;
  ::std::string* mutable_image_id(int index);
  void set_image_id(int index, const ::std::string& value);
  void set_image_id(int index, const char* value);
  void set_image_id(int index, const char* value, size_t size);
  ::std::string* add_image_id();
  void add_image_id(const ::std::string& value);
  void add_image_id(const char* value);
  void add_image_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& image_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_image_id();

  // repeated double squared_distance = 3;
  int squared_distance_size() const;
  void clear_squared_distance();
  static const int kSquaredDistanceFieldNumber = 3;
  double squared_distance(int index) const;
  void set_squared_distance(int index, double value);
  void add_squared_distance(double value);
  const ::google::protobuf::RepeatedField< double >&
      squared_distance() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_squared_distance();

  // int64 processing_time_ms = 2;
  void clear_processing_time_ms();
  static const int kProcessingTimeMsFieldNumber = 2;
  ::google::protobuf::int64 processing_time_ms() const;
  void set_processing_time_ms(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:similia.proto.SimiliaSearchResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> image_id_;
  ::google::protobuf::RepeatedField< double > squared_distance_;
  mutable int _squared_distance_cached_byte_size_;
  ::google::protobuf::int64 processing_time_ms_;
  mutable int _cached_size_;
  friend struct  protobuf_similia_2fproto_2fsimilia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MultiIndexAddRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:similia.proto.MultiIndexAddRequest) */ {
 public:
  MultiIndexAddRequest();
  virtual ~MultiIndexAddRequest();

  MultiIndexAddRequest(const MultiIndexAddRequest& from);

  inline MultiIndexAddRequest& operator=(const MultiIndexAddRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiIndexAddRequest& default_instance();

  static inline const MultiIndexAddRequest* internal_default_instance() {
    return reinterpret_cast<const MultiIndexAddRequest*>(
               &_MultiIndexAddRequest_default_instance_);
  }

  void Swap(MultiIndexAddRequest* other);

  // implements Message ----------------------------------------------

  inline MultiIndexAddRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  MultiIndexAddRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MultiIndexAddRequest& from);
  void MergeFrom(const MultiIndexAddRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MultiIndexAddRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string image_id = 1;
  void clear_image_id();
  static const int kImageIdFieldNumber = 1;
  const ::std::string& image_id() const;
  void set_image_id(const ::std::string& value);
  #if LANG_CXX11
  void set_image_id(::std::string&& value);
  #endif
  void set_image_id(const char* value);
  void set_image_id(const char* value, size_t size);
  ::std::string* mutable_image_id();
  ::std::string* release_image_id();
  void set_allocated_image_id(::std::string* image_id);

  // .similia.proto.IndexingClustersIds indexing_ids = 2;
  bool has_indexing_ids() const;
  void clear_indexing_ids();
  static const int kIndexingIdsFieldNumber = 2;
  const ::similia::proto::IndexingClustersIds& indexing_ids() const;
  ::similia::proto::IndexingClustersIds* mutable_indexing_ids();
  ::similia::proto::IndexingClustersIds* release_indexing_ids();
  void set_allocated_indexing_ids(::similia::proto::IndexingClustersIds* indexing_ids);

  // .similia.proto.CompressingClustersIds compressing_ids = 3;
  bool has_compressing_ids() const;
  void clear_compressing_ids();
  static const int kCompressingIdsFieldNumber = 3;
  const ::similia::proto::CompressingClustersIds& compressing_ids() const;
  ::similia::proto::CompressingClustersIds* mutable_compressing_ids();
  ::similia::proto::CompressingClustersIds* release_compressing_ids();
  void set_allocated_compressing_ids(::similia::proto::CompressingClustersIds* compressing_ids);

  // @@protoc_insertion_point(class_scope:similia.proto.MultiIndexAddRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr image_id_;
  ::similia::proto::IndexingClustersIds* indexing_ids_;
  ::similia::proto::CompressingClustersIds* compressing_ids_;
  mutable int _cached_size_;
  friend struct  protobuf_similia_2fproto_2fsimilia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MultiIndexAddResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:similia.proto.MultiIndexAddResponse) */ {
 public:
  MultiIndexAddResponse();
  virtual ~MultiIndexAddResponse();

  MultiIndexAddResponse(const MultiIndexAddResponse& from);

  inline MultiIndexAddResponse& operator=(const MultiIndexAddResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiIndexAddResponse& default_instance();

  static inline const MultiIndexAddResponse* internal_default_instance() {
    return reinterpret_cast<const MultiIndexAddResponse*>(
               &_MultiIndexAddResponse_default_instance_);
  }

  void Swap(MultiIndexAddResponse* other);

  // implements Message ----------------------------------------------

  inline MultiIndexAddResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  MultiIndexAddResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MultiIndexAddResponse& from);
  void MergeFrom(const MultiIndexAddResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MultiIndexAddResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 processing_time_ms = 2;
  void clear_processing_time_ms();
  static const int kProcessingTimeMsFieldNumber = 2;
  ::google::protobuf::int64 processing_time_ms() const;
  void set_processing_time_ms(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:similia.proto.MultiIndexAddResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 processing_time_ms_;
  mutable int _cached_size_;
  friend struct  protobuf_similia_2fproto_2fsimilia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MultiIndexGetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:similia.proto.MultiIndexGetRequest) */ {
 public:
  MultiIndexGetRequest();
  virtual ~MultiIndexGetRequest();

  MultiIndexGetRequest(const MultiIndexGetRequest& from);

  inline MultiIndexGetRequest& operator=(const MultiIndexGetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiIndexGetRequest& default_instance();

  static inline const MultiIndexGetRequest* internal_default_instance() {
    return reinterpret_cast<const MultiIndexGetRequest*>(
               &_MultiIndexGetRequest_default_instance_);
  }

  void Swap(MultiIndexGetRequest* other);

  // implements Message ----------------------------------------------

  inline MultiIndexGetRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  MultiIndexGetRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MultiIndexGetRequest& from);
  void MergeFrom(const MultiIndexGetRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MultiIndexGetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .similia.proto.IndexingClustersIds indexing_ids = 1;
  bool has_indexing_ids() const;
  void clear_indexing_ids();
  static const int kIndexingIdsFieldNumber = 1;
  const ::similia::proto::IndexingClustersIds& indexing_ids() const;
  ::similia::proto::IndexingClustersIds* mutable_indexing_ids();
  ::similia::proto::IndexingClustersIds* release_indexing_ids();
  void set_allocated_indexing_ids(::similia::proto::IndexingClustersIds* indexing_ids);

  // @@protoc_insertion_point(class_scope:similia.proto.MultiIndexGetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::similia::proto::IndexingClustersIds* indexing_ids_;
  mutable int _cached_size_;
  friend struct  protobuf_similia_2fproto_2fsimilia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MultiIndexGetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:similia.proto.MultiIndexGetResponse) */ {
 public:
  MultiIndexGetResponse();
  virtual ~MultiIndexGetResponse();

  MultiIndexGetResponse(const MultiIndexGetResponse& from);

  inline MultiIndexGetResponse& operator=(const MultiIndexGetResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiIndexGetResponse& default_instance();

  static inline const MultiIndexGetResponse* internal_default_instance() {
    return reinterpret_cast<const MultiIndexGetResponse*>(
               &_MultiIndexGetResponse_default_instance_);
  }

  void Swap(MultiIndexGetResponse* other);

  // implements Message ----------------------------------------------

  inline MultiIndexGetResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  MultiIndexGetResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MultiIndexGetResponse& from);
  void MergeFrom(const MultiIndexGetResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MultiIndexGetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes compressed_elements = 3;
  void clear_compressed_elements();
  static const int kCompressedElementsFieldNumber = 3;
  const ::std::string& compressed_elements() const;
  void set_compressed_elements(const ::std::string& value);
  #if LANG_CXX11
  void set_compressed_elements(::std::string&& value);
  #endif
  void set_compressed_elements(const char* value);
  void set_compressed_elements(const void* value, size_t size);
  ::std::string* mutable_compressed_elements();
  ::std::string* release_compressed_elements();
  void set_allocated_compressed_elements(::std::string* compressed_elements);

  // int64 processing_time_ms = 2;
  void clear_processing_time_ms();
  static const int kProcessingTimeMsFieldNumber = 2;
  ::google::protobuf::int64 processing_time_ms() const;
  void set_processing_time_ms(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:similia.proto.MultiIndexGetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr compressed_elements_;
  ::google::protobuf::int64 processing_time_ms_;
  mutable int _cached_size_;
  friend struct  protobuf_similia_2fproto_2fsimilia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MultiIndexMultiGetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:similia.proto.MultiIndexMultiGetRequest) */ {
 public:
  MultiIndexMultiGetRequest();
  virtual ~MultiIndexMultiGetRequest();

  MultiIndexMultiGetRequest(const MultiIndexMultiGetRequest& from);

  inline MultiIndexMultiGetRequest& operator=(const MultiIndexMultiGetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiIndexMultiGetRequest& default_instance();

  static inline const MultiIndexMultiGetRequest* internal_default_instance() {
    return reinterpret_cast<const MultiIndexMultiGetRequest*>(
               &_MultiIndexMultiGetRequest_default_instance_);
  }

  void Swap(MultiIndexMultiGetRequest* other);

  // implements Message ----------------------------------------------

  inline MultiIndexMultiGetRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  MultiIndexMultiGetRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MultiIndexMultiGetRequest& from);
  void MergeFrom(const MultiIndexMultiGetRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MultiIndexMultiGetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .similia.proto.IndexingClustersIds indexing_ids = 1;
  int indexing_ids_size() const;
  void clear_indexing_ids();
  static const int kIndexingIdsFieldNumber = 1;
  const ::similia::proto::IndexingClustersIds& indexing_ids(int index) const;
  ::similia::proto::IndexingClustersIds* mutable_indexing_ids(int index);
  ::similia::proto::IndexingClustersIds* add_indexing_ids();
  ::google::protobuf::RepeatedPtrField< ::similia::proto::IndexingClustersIds >*
      mutable_indexing_ids();
  const ::google::protobuf::RepeatedPtrField< ::similia::proto::IndexingClustersIds >&
      indexing_ids() const;

  // int32 count_limit = 2;
  void clear_count_limit();
  static const int kCountLimitFieldNumber = 2;
  ::google::protobuf::int32 count_limit() const;
  void set_count_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:similia.proto.MultiIndexMultiGetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::similia::proto::IndexingClustersIds > indexing_ids_;
  ::google::protobuf::int32 count_limit_;
  mutable int _cached_size_;
  friend struct  protobuf_similia_2fproto_2fsimilia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MultiIndexMultiGetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:similia.proto.MultiIndexMultiGetResponse) */ {
 public:
  MultiIndexMultiGetResponse();
  virtual ~MultiIndexMultiGetResponse();

  MultiIndexMultiGetResponse(const MultiIndexMultiGetResponse& from);

  inline MultiIndexMultiGetResponse& operator=(const MultiIndexMultiGetResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiIndexMultiGetResponse& default_instance();

  static inline const MultiIndexMultiGetResponse* internal_default_instance() {
    return reinterpret_cast<const MultiIndexMultiGetResponse*>(
               &_MultiIndexMultiGetResponse_default_instance_);
  }

  void Swap(MultiIndexMultiGetResponse* other);

  // implements Message ----------------------------------------------

  inline MultiIndexMultiGetResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  MultiIndexMultiGetResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MultiIndexMultiGetResponse& from);
  void MergeFrom(const MultiIndexMultiGetResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MultiIndexMultiGetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes compressed_elements = 3;
  int compressed_elements_size() const;
  void clear_compressed_elements();
  static const int kCompressedElementsFieldNumber = 3;
  const ::std::string& compressed_elements(int index) const;
  ::std::string* mutable_compressed_elements(int index);
  void set_compressed_elements(int index, const ::std::string& value);
  void set_compressed_elements(int index, const char* value);
  void set_compressed_elements(int index, const void* value, size_t size);
  ::std::string* add_compressed_elements();
  void add_compressed_elements(const ::std::string& value);
  void add_compressed_elements(const char* value);
  void add_compressed_elements(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& compressed_elements() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_compressed_elements();

  // int64 processing_time_ms = 2;
  void clear_processing_time_ms();
  static const int kProcessingTimeMsFieldNumber = 2;
  ::google::protobuf::int64 processing_time_ms() const;
  void set_processing_time_ms(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:similia.proto.MultiIndexMultiGetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> compressed_elements_;
  ::google::protobuf::int64 processing_time_ms_;
  mutable int _cached_size_;
  friend struct  protobuf_similia_2fproto_2fsimilia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MultiIndexMultiCountRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:similia.proto.MultiIndexMultiCountRequest) */ {
 public:
  MultiIndexMultiCountRequest();
  virtual ~MultiIndexMultiCountRequest();

  MultiIndexMultiCountRequest(const MultiIndexMultiCountRequest& from);

  inline MultiIndexMultiCountRequest& operator=(const MultiIndexMultiCountRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiIndexMultiCountRequest& default_instance();

  static inline const MultiIndexMultiCountRequest* internal_default_instance() {
    return reinterpret_cast<const MultiIndexMultiCountRequest*>(
               &_MultiIndexMultiCountRequest_default_instance_);
  }

  void Swap(MultiIndexMultiCountRequest* other);

  // implements Message ----------------------------------------------

  inline MultiIndexMultiCountRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  MultiIndexMultiCountRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MultiIndexMultiCountRequest& from);
  void MergeFrom(const MultiIndexMultiCountRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MultiIndexMultiCountRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .similia.proto.IndexingClustersIds indexing_ids = 1;
  int indexing_ids_size() const;
  void clear_indexing_ids();
  static const int kIndexingIdsFieldNumber = 1;
  const ::similia::proto::IndexingClustersIds& indexing_ids(int index) const;
  ::similia::proto::IndexingClustersIds* mutable_indexing_ids(int index);
  ::similia::proto::IndexingClustersIds* add_indexing_ids();
  ::google::protobuf::RepeatedPtrField< ::similia::proto::IndexingClustersIds >*
      mutable_indexing_ids();
  const ::google::protobuf::RepeatedPtrField< ::similia::proto::IndexingClustersIds >&
      indexing_ids() const;

  // @@protoc_insertion_point(class_scope:similia.proto.MultiIndexMultiCountRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::similia::proto::IndexingClustersIds > indexing_ids_;
  mutable int _cached_size_;
  friend struct  protobuf_similia_2fproto_2fsimilia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MultiIndexMultiCountResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:similia.proto.MultiIndexMultiCountResponse) */ {
 public:
  MultiIndexMultiCountResponse();
  virtual ~MultiIndexMultiCountResponse();

  MultiIndexMultiCountResponse(const MultiIndexMultiCountResponse& from);

  inline MultiIndexMultiCountResponse& operator=(const MultiIndexMultiCountResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiIndexMultiCountResponse& default_instance();

  static inline const MultiIndexMultiCountResponse* internal_default_instance() {
    return reinterpret_cast<const MultiIndexMultiCountResponse*>(
               &_MultiIndexMultiCountResponse_default_instance_);
  }

  void Swap(MultiIndexMultiCountResponse* other);

  // implements Message ----------------------------------------------

  inline MultiIndexMultiCountResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  MultiIndexMultiCountResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MultiIndexMultiCountResponse& from);
  void MergeFrom(const MultiIndexMultiCountResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MultiIndexMultiCountResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 count = 3;
  int count_size() const;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::google::protobuf::int32 count(int index) const;
  void set_count(int index, ::google::protobuf::int32 value);
  void add_count(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      count() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_count();

  // int64 processing_time_ms = 2;
  void clear_processing_time_ms();
  static const int kProcessingTimeMsFieldNumber = 2;
  ::google::protobuf::int64 processing_time_ms() const;
  void set_processing_time_ms(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:similia.proto.MultiIndexMultiCountResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > count_;
  mutable int _count_cached_byte_size_;
  ::google::protobuf::int64 processing_time_ms_;
  mutable int _cached_size_;
  friend struct  protobuf_similia_2fproto_2fsimilia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MultiIndexMultiAddRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:similia.proto.MultiIndexMultiAddRequest) */ {
 public:
  MultiIndexMultiAddRequest();
  virtual ~MultiIndexMultiAddRequest();

  MultiIndexMultiAddRequest(const MultiIndexMultiAddRequest& from);

  inline MultiIndexMultiAddRequest& operator=(const MultiIndexMultiAddRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiIndexMultiAddRequest& default_instance();

  static inline const MultiIndexMultiAddRequest* internal_default_instance() {
    return reinterpret_cast<const MultiIndexMultiAddRequest*>(
               &_MultiIndexMultiAddRequest_default_instance_);
  }

  void Swap(MultiIndexMultiAddRequest* other);

  // implements Message ----------------------------------------------

  inline MultiIndexMultiAddRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  MultiIndexMultiAddRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MultiIndexMultiAddRequest& from);
  void MergeFrom(const MultiIndexMultiAddRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MultiIndexMultiAddRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .similia.proto.MultiIndexAddRequest multi_index_add_request = 1;
  int multi_index_add_request_size() const;
  void clear_multi_index_add_request();
  static const int kMultiIndexAddRequestFieldNumber = 1;
  const ::similia::proto::MultiIndexAddRequest& multi_index_add_request(int index) const;
  ::similia::proto::MultiIndexAddRequest* mutable_multi_index_add_request(int index);
  ::similia::proto::MultiIndexAddRequest* add_multi_index_add_request();
  ::google::protobuf::RepeatedPtrField< ::similia::proto::MultiIndexAddRequest >*
      mutable_multi_index_add_request();
  const ::google::protobuf::RepeatedPtrField< ::similia::proto::MultiIndexAddRequest >&
      multi_index_add_request() const;

  // @@protoc_insertion_point(class_scope:similia.proto.MultiIndexMultiAddRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::similia::proto::MultiIndexAddRequest > multi_index_add_request_;
  mutable int _cached_size_;
  friend struct  protobuf_similia_2fproto_2fsimilia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MultiIndexMultiAddResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:similia.proto.MultiIndexMultiAddResponse) */ {
 public:
  MultiIndexMultiAddResponse();
  virtual ~MultiIndexMultiAddResponse();

  MultiIndexMultiAddResponse(const MultiIndexMultiAddResponse& from);

  inline MultiIndexMultiAddResponse& operator=(const MultiIndexMultiAddResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiIndexMultiAddResponse& default_instance();

  static inline const MultiIndexMultiAddResponse* internal_default_instance() {
    return reinterpret_cast<const MultiIndexMultiAddResponse*>(
               &_MultiIndexMultiAddResponse_default_instance_);
  }

  void Swap(MultiIndexMultiAddResponse* other);

  // implements Message ----------------------------------------------

  inline MultiIndexMultiAddResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  MultiIndexMultiAddResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MultiIndexMultiAddResponse& from);
  void MergeFrom(const MultiIndexMultiAddResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MultiIndexMultiAddResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 processing_time_ms = 2;
  void clear_processing_time_ms();
  static const int kProcessingTimeMsFieldNumber = 2;
  ::google::protobuf::int64 processing_time_ms() const;
  void set_processing_time_ms(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:similia.proto.MultiIndexMultiAddResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 processing_time_ms_;
  mutable int _cached_size_;
  friend struct  protobuf_similia_2fproto_2fsimilia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MultiIndexDeleteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:similia.proto.MultiIndexDeleteRequest) */ {
 public:
  MultiIndexDeleteRequest();
  virtual ~MultiIndexDeleteRequest();

  MultiIndexDeleteRequest(const MultiIndexDeleteRequest& from);

  inline MultiIndexDeleteRequest& operator=(const MultiIndexDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiIndexDeleteRequest& default_instance();

  static inline const MultiIndexDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const MultiIndexDeleteRequest*>(
               &_MultiIndexDeleteRequest_default_instance_);
  }

  void Swap(MultiIndexDeleteRequest* other);

  // implements Message ----------------------------------------------

  inline MultiIndexDeleteRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  MultiIndexDeleteRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MultiIndexDeleteRequest& from);
  void MergeFrom(const MultiIndexDeleteRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MultiIndexDeleteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .similia.proto.IndexingClustersIds indexing_ids = 2;
  bool has_indexing_ids() const;
  void clear_indexing_ids();
  static const int kIndexingIdsFieldNumber = 2;
  const ::similia::proto::IndexingClustersIds& indexing_ids() const;
  ::similia::proto::IndexingClustersIds* mutable_indexing_ids();
  ::similia::proto::IndexingClustersIds* release_indexing_ids();
  void set_allocated_indexing_ids(::similia::proto::IndexingClustersIds* indexing_ids);

  // @@protoc_insertion_point(class_scope:similia.proto.MultiIndexDeleteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::similia::proto::IndexingClustersIds* indexing_ids_;
  mutable int _cached_size_;
  friend struct  protobuf_similia_2fproto_2fsimilia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MultiIndexDeleteResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:similia.proto.MultiIndexDeleteResponse) */ {
 public:
  MultiIndexDeleteResponse();
  virtual ~MultiIndexDeleteResponse();

  MultiIndexDeleteResponse(const MultiIndexDeleteResponse& from);

  inline MultiIndexDeleteResponse& operator=(const MultiIndexDeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiIndexDeleteResponse& default_instance();

  static inline const MultiIndexDeleteResponse* internal_default_instance() {
    return reinterpret_cast<const MultiIndexDeleteResponse*>(
               &_MultiIndexDeleteResponse_default_instance_);
  }

  void Swap(MultiIndexDeleteResponse* other);

  // implements Message ----------------------------------------------

  inline MultiIndexDeleteResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  MultiIndexDeleteResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MultiIndexDeleteResponse& from);
  void MergeFrom(const MultiIndexDeleteResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MultiIndexDeleteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 processing_time_ms = 2;
  void clear_processing_time_ms();
  static const int kProcessingTimeMsFieldNumber = 2;
  ::google::protobuf::int64 processing_time_ms() const;
  void set_processing_time_ms(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:similia.proto.MultiIndexDeleteResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 processing_time_ms_;
  mutable int _cached_size_;
  friend struct  protobuf_similia_2fproto_2fsimilia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuantizationRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:similia.proto.QuantizationRequest) */ {
 public:
  QuantizationRequest();
  virtual ~QuantizationRequest();

  QuantizationRequest(const QuantizationRequest& from);

  inline QuantizationRequest& operator=(const QuantizationRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuantizationRequest& default_instance();

  static inline const QuantizationRequest* internal_default_instance() {
    return reinterpret_cast<const QuantizationRequest*>(
               &_QuantizationRequest_default_instance_);
  }

  void Swap(QuantizationRequest* other);

  // implements Message ----------------------------------------------

  inline QuantizationRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  QuantizationRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QuantizationRequest& from);
  void MergeFrom(const QuantizationRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QuantizationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string image_id = 2;
  void clear_image_id();
  static const int kImageIdFieldNumber = 2;
  const ::std::string& image_id() const;
  void set_image_id(const ::std::string& value);
  #if LANG_CXX11
  void set_image_id(::std::string&& value);
  #endif
  void set_image_id(const char* value);
  void set_image_id(const char* value, size_t size);
  ::std::string* mutable_image_id();
  ::std::string* release_image_id();
  void set_allocated_image_id(::std::string* image_id);

  // .similia.proto.Features features = 1;
  bool has_features() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 1;
  const ::similia::proto::Features& features() const;
  ::similia::proto::Features* mutable_features();
  ::similia::proto::Features* release_features();
  void set_allocated_features(::similia::proto::Features* features);

  // @@protoc_insertion_point(class_scope:similia.proto.QuantizationRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr image_id_;
  ::similia::proto::Features* features_;
  mutable int _cached_size_;
  friend struct  protobuf_similia_2fproto_2fsimilia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuantizationResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:similia.proto.QuantizationResponse) */ {
 public:
  QuantizationResponse();
  virtual ~QuantizationResponse();

  QuantizationResponse(const QuantizationResponse& from);

  inline QuantizationResponse& operator=(const QuantizationResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuantizationResponse& default_instance();

  static inline const QuantizationResponse* internal_default_instance() {
    return reinterpret_cast<const QuantizationResponse*>(
               &_QuantizationResponse_default_instance_);
  }

  void Swap(QuantizationResponse* other);

  // implements Message ----------------------------------------------

  inline QuantizationResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  QuantizationResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QuantizationResponse& from);
  void MergeFrom(const QuantizationResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QuantizationResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .similia.proto.CompressingClustersIds compressing_ids = 3;
  bool has_compressing_ids() const;
  void clear_compressing_ids();
  static const int kCompressingIdsFieldNumber = 3;
  const ::similia::proto::CompressingClustersIds& compressing_ids() const;
  ::similia::proto::CompressingClustersIds* mutable_compressing_ids();
  ::similia::proto::CompressingClustersIds* release_compressing_ids();
  void set_allocated_compressing_ids(::similia::proto::CompressingClustersIds* compressing_ids);

  // .similia.proto.IndexingClustersIds indexing_ids = 4;
  bool has_indexing_ids() const;
  void clear_indexing_ids();
  static const int kIndexingIdsFieldNumber = 4;
  const ::similia::proto::IndexingClustersIds& indexing_ids() const;
  ::similia::proto::IndexingClustersIds* mutable_indexing_ids();
  ::similia::proto::IndexingClustersIds* release_indexing_ids();
  void set_allocated_indexing_ids(::similia::proto::IndexingClustersIds* indexing_ids);

  // int64 processing_time_ms = 2;
  void clear_processing_time_ms();
  static const int kProcessingTimeMsFieldNumber = 2;
  ::google::protobuf::int64 processing_time_ms() const;
  void set_processing_time_ms(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:similia.proto.QuantizationResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::similia::proto::CompressingClustersIds* compressing_ids_;
  ::similia::proto::IndexingClustersIds* indexing_ids_;
  ::google::protobuf::int64 processing_time_ms_;
  mutable int _cached_size_;
  friend struct  protobuf_similia_2fproto_2fsimilia_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FloatMatrix

// int32 num_rows = 1;
inline void FloatMatrix::clear_num_rows() {
  num_rows_ = 0;
}
inline ::google::protobuf::int32 FloatMatrix::num_rows() const {
  // @@protoc_insertion_point(field_get:similia.proto.FloatMatrix.num_rows)
  return num_rows_;
}
inline void FloatMatrix::set_num_rows(::google::protobuf::int32 value) {
  
  num_rows_ = value;
  // @@protoc_insertion_point(field_set:similia.proto.FloatMatrix.num_rows)
}

// int32 num_cols = 2;
inline void FloatMatrix::clear_num_cols() {
  num_cols_ = 0;
}
inline ::google::protobuf::int32 FloatMatrix::num_cols() const {
  // @@protoc_insertion_point(field_get:similia.proto.FloatMatrix.num_cols)
  return num_cols_;
}
inline void FloatMatrix::set_num_cols(::google::protobuf::int32 value) {
  
  num_cols_ = value;
  // @@protoc_insertion_point(field_set:similia.proto.FloatMatrix.num_cols)
}

// repeated float element = 3;
inline int FloatMatrix::element_size() const {
  return element_.size();
}
inline void FloatMatrix::clear_element() {
  element_.Clear();
}
inline float FloatMatrix::element(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.FloatMatrix.element)
  return element_.Get(index);
}
inline void FloatMatrix::set_element(int index, float value) {
  element_.Set(index, value);
  // @@protoc_insertion_point(field_set:similia.proto.FloatMatrix.element)
}
inline void FloatMatrix::add_element(float value) {
  element_.Add(value);
  // @@protoc_insertion_point(field_add:similia.proto.FloatMatrix.element)
}
inline const ::google::protobuf::RepeatedField< float >&
FloatMatrix::element() const {
  // @@protoc_insertion_point(field_list:similia.proto.FloatMatrix.element)
  return element_;
}
inline ::google::protobuf::RepeatedField< float >*
FloatMatrix::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.FloatMatrix.element)
  return &element_;
}

// -------------------------------------------------------------------

// Features

// repeated float element = 1;
inline int Features::element_size() const {
  return element_.size();
}
inline void Features::clear_element() {
  element_.Clear();
}
inline float Features::element(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.Features.element)
  return element_.Get(index);
}
inline void Features::set_element(int index, float value) {
  element_.Set(index, value);
  // @@protoc_insertion_point(field_set:similia.proto.Features.element)
}
inline void Features::add_element(float value) {
  element_.Add(value);
  // @@protoc_insertion_point(field_add:similia.proto.Features.element)
}
inline const ::google::protobuf::RepeatedField< float >&
Features::element() const {
  // @@protoc_insertion_point(field_list:similia.proto.Features.element)
  return element_;
}
inline ::google::protobuf::RepeatedField< float >*
Features::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.Features.element)
  return &element_;
}

// -------------------------------------------------------------------

// CompressingClustersIds

// repeated int32 id = 1;
inline int CompressingClustersIds::id_size() const {
  return id_.size();
}
inline void CompressingClustersIds::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::int32 CompressingClustersIds::id(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.CompressingClustersIds.id)
  return id_.Get(index);
}
inline void CompressingClustersIds::set_id(int index, ::google::protobuf::int32 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:similia.proto.CompressingClustersIds.id)
}
inline void CompressingClustersIds::add_id(::google::protobuf::int32 value) {
  id_.Add(value);
  // @@protoc_insertion_point(field_add:similia.proto.CompressingClustersIds.id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CompressingClustersIds::id() const {
  // @@protoc_insertion_point(field_list:similia.proto.CompressingClustersIds.id)
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CompressingClustersIds::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.CompressingClustersIds.id)
  return &id_;
}

// -------------------------------------------------------------------

// IndexingClustersIds

// repeated int32 id = 1;
inline int IndexingClustersIds::id_size() const {
  return id_.size();
}
inline void IndexingClustersIds::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::int32 IndexingClustersIds::id(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.IndexingClustersIds.id)
  return id_.Get(index);
}
inline void IndexingClustersIds::set_id(int index, ::google::protobuf::int32 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:similia.proto.IndexingClustersIds.id)
}
inline void IndexingClustersIds::add_id(::google::protobuf::int32 value) {
  id_.Add(value);
  // @@protoc_insertion_point(field_add:similia.proto.IndexingClustersIds.id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
IndexingClustersIds::id() const {
  // @@protoc_insertion_point(field_list:similia.proto.IndexingClustersIds.id)
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
IndexingClustersIds::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.IndexingClustersIds.id)
  return &id_;
}

// -------------------------------------------------------------------

// CompressedElement

// string id = 1;
inline void CompressedElement::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CompressedElement::id() const {
  // @@protoc_insertion_point(field_get:similia.proto.CompressedElement.id)
  return id_.GetNoArena();
}
inline void CompressedElement::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:similia.proto.CompressedElement.id)
}
#if LANG_CXX11
inline void CompressedElement::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:similia.proto.CompressedElement.id)
}
#endif
inline void CompressedElement::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:similia.proto.CompressedElement.id)
}
inline void CompressedElement::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:similia.proto.CompressedElement.id)
}
inline ::std::string* CompressedElement::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:similia.proto.CompressedElement.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CompressedElement::release_id() {
  // @@protoc_insertion_point(field_release:similia.proto.CompressedElement.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompressedElement::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:similia.proto.CompressedElement.id)
}

// .similia.proto.CompressingClustersIds compressing_clusters_id = 2;
inline bool CompressedElement::has_compressing_clusters_id() const {
  return this != internal_default_instance() && compressing_clusters_id_ != NULL;
}
inline void CompressedElement::clear_compressing_clusters_id() {
  if (GetArenaNoVirtual() == NULL && compressing_clusters_id_ != NULL) delete compressing_clusters_id_;
  compressing_clusters_id_ = NULL;
}
inline const ::similia::proto::CompressingClustersIds& CompressedElement::compressing_clusters_id() const {
  // @@protoc_insertion_point(field_get:similia.proto.CompressedElement.compressing_clusters_id)
  return compressing_clusters_id_ != NULL ? *compressing_clusters_id_
                         : *::similia::proto::CompressingClustersIds::internal_default_instance();
}
inline ::similia::proto::CompressingClustersIds* CompressedElement::mutable_compressing_clusters_id() {
  
  if (compressing_clusters_id_ == NULL) {
    compressing_clusters_id_ = new ::similia::proto::CompressingClustersIds;
  }
  // @@protoc_insertion_point(field_mutable:similia.proto.CompressedElement.compressing_clusters_id)
  return compressing_clusters_id_;
}
inline ::similia::proto::CompressingClustersIds* CompressedElement::release_compressing_clusters_id() {
  // @@protoc_insertion_point(field_release:similia.proto.CompressedElement.compressing_clusters_id)
  
  ::similia::proto::CompressingClustersIds* temp = compressing_clusters_id_;
  compressing_clusters_id_ = NULL;
  return temp;
}
inline void CompressedElement::set_allocated_compressing_clusters_id(::similia::proto::CompressingClustersIds* compressing_clusters_id) {
  delete compressing_clusters_id_;
  compressing_clusters_id_ = compressing_clusters_id;
  if (compressing_clusters_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:similia.proto.CompressedElement.compressing_clusters_id)
}

// -------------------------------------------------------------------

// SerializedCompressedElement

// string id = 1;
inline void SerializedCompressedElement::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SerializedCompressedElement::id() const {
  // @@protoc_insertion_point(field_get:similia.proto.SerializedCompressedElement.id)
  return id_.GetNoArena();
}
inline void SerializedCompressedElement::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:similia.proto.SerializedCompressedElement.id)
}
#if LANG_CXX11
inline void SerializedCompressedElement::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:similia.proto.SerializedCompressedElement.id)
}
#endif
inline void SerializedCompressedElement::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:similia.proto.SerializedCompressedElement.id)
}
inline void SerializedCompressedElement::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:similia.proto.SerializedCompressedElement.id)
}
inline ::std::string* SerializedCompressedElement::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:similia.proto.SerializedCompressedElement.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SerializedCompressedElement::release_id() {
  // @@protoc_insertion_point(field_release:similia.proto.SerializedCompressedElement.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SerializedCompressedElement::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:similia.proto.SerializedCompressedElement.id)
}

// bytes compressing_clusters_id = 2;
inline void SerializedCompressedElement::clear_compressing_clusters_id() {
  compressing_clusters_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SerializedCompressedElement::compressing_clusters_id() const {
  // @@protoc_insertion_point(field_get:similia.proto.SerializedCompressedElement.compressing_clusters_id)
  return compressing_clusters_id_.GetNoArena();
}
inline void SerializedCompressedElement::set_compressing_clusters_id(const ::std::string& value) {
  
  compressing_clusters_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:similia.proto.SerializedCompressedElement.compressing_clusters_id)
}
#if LANG_CXX11
inline void SerializedCompressedElement::set_compressing_clusters_id(::std::string&& value) {
  
  compressing_clusters_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:similia.proto.SerializedCompressedElement.compressing_clusters_id)
}
#endif
inline void SerializedCompressedElement::set_compressing_clusters_id(const char* value) {
  
  compressing_clusters_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:similia.proto.SerializedCompressedElement.compressing_clusters_id)
}
inline void SerializedCompressedElement::set_compressing_clusters_id(const void* value, size_t size) {
  
  compressing_clusters_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:similia.proto.SerializedCompressedElement.compressing_clusters_id)
}
inline ::std::string* SerializedCompressedElement::mutable_compressing_clusters_id() {
  
  // @@protoc_insertion_point(field_mutable:similia.proto.SerializedCompressedElement.compressing_clusters_id)
  return compressing_clusters_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SerializedCompressedElement::release_compressing_clusters_id() {
  // @@protoc_insertion_point(field_release:similia.proto.SerializedCompressedElement.compressing_clusters_id)
  
  return compressing_clusters_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SerializedCompressedElement::set_allocated_compressing_clusters_id(::std::string* compressing_clusters_id) {
  if (compressing_clusters_id != NULL) {
    
  } else {
    
  }
  compressing_clusters_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), compressing_clusters_id);
  // @@protoc_insertion_point(field_set_allocated:similia.proto.SerializedCompressedElement.compressing_clusters_id)
}

// -------------------------------------------------------------------

// CompressedElementsCombined

// repeated .similia.proto.CompressedElement compressed_element = 1;
inline int CompressedElementsCombined::compressed_element_size() const {
  return compressed_element_.size();
}
inline void CompressedElementsCombined::clear_compressed_element() {
  compressed_element_.Clear();
}
inline const ::similia::proto::CompressedElement& CompressedElementsCombined::compressed_element(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.CompressedElementsCombined.compressed_element)
  return compressed_element_.Get(index);
}
inline ::similia::proto::CompressedElement* CompressedElementsCombined::mutable_compressed_element(int index) {
  // @@protoc_insertion_point(field_mutable:similia.proto.CompressedElementsCombined.compressed_element)
  return compressed_element_.Mutable(index);
}
inline ::similia::proto::CompressedElement* CompressedElementsCombined::add_compressed_element() {
  // @@protoc_insertion_point(field_add:similia.proto.CompressedElementsCombined.compressed_element)
  return compressed_element_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::similia::proto::CompressedElement >*
CompressedElementsCombined::mutable_compressed_element() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.CompressedElementsCombined.compressed_element)
  return &compressed_element_;
}
inline const ::google::protobuf::RepeatedPtrField< ::similia::proto::CompressedElement >&
CompressedElementsCombined::compressed_element() const {
  // @@protoc_insertion_point(field_list:similia.proto.CompressedElementsCombined.compressed_element)
  return compressed_element_;
}

// -------------------------------------------------------------------

// SerializedCompressedElementsCombined

// repeated .similia.proto.SerializedCompressedElement compressed_element = 1;
inline int SerializedCompressedElementsCombined::compressed_element_size() const {
  return compressed_element_.size();
}
inline void SerializedCompressedElementsCombined::clear_compressed_element() {
  compressed_element_.Clear();
}
inline const ::similia::proto::SerializedCompressedElement& SerializedCompressedElementsCombined::compressed_element(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.SerializedCompressedElementsCombined.compressed_element)
  return compressed_element_.Get(index);
}
inline ::similia::proto::SerializedCompressedElement* SerializedCompressedElementsCombined::mutable_compressed_element(int index) {
  // @@protoc_insertion_point(field_mutable:similia.proto.SerializedCompressedElementsCombined.compressed_element)
  return compressed_element_.Mutable(index);
}
inline ::similia::proto::SerializedCompressedElement* SerializedCompressedElementsCombined::add_compressed_element() {
  // @@protoc_insertion_point(field_add:similia.proto.SerializedCompressedElementsCombined.compressed_element)
  return compressed_element_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::similia::proto::SerializedCompressedElement >*
SerializedCompressedElementsCombined::mutable_compressed_element() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.SerializedCompressedElementsCombined.compressed_element)
  return &compressed_element_;
}
inline const ::google::protobuf::RepeatedPtrField< ::similia::proto::SerializedCompressedElement >&
SerializedCompressedElementsCombined::compressed_element() const {
  // @@protoc_insertion_point(field_list:similia.proto.SerializedCompressedElementsCombined.compressed_element)
  return compressed_element_;
}

// -------------------------------------------------------------------

// CompressedElements

// repeated string id = 1;
inline int CompressedElements::id_size() const {
  return id_.size();
}
inline void CompressedElements::clear_id() {
  id_.Clear();
}
inline const ::std::string& CompressedElements::id(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.CompressedElements.id)
  return id_.Get(index);
}
inline ::std::string* CompressedElements::mutable_id(int index) {
  // @@protoc_insertion_point(field_mutable:similia.proto.CompressedElements.id)
  return id_.Mutable(index);
}
inline void CompressedElements::set_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:similia.proto.CompressedElements.id)
  id_.Mutable(index)->assign(value);
}
inline void CompressedElements::set_id(int index, const char* value) {
  id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:similia.proto.CompressedElements.id)
}
inline void CompressedElements::set_id(int index, const char* value, size_t size) {
  id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:similia.proto.CompressedElements.id)
}
inline ::std::string* CompressedElements::add_id() {
  // @@protoc_insertion_point(field_add_mutable:similia.proto.CompressedElements.id)
  return id_.Add();
}
inline void CompressedElements::add_id(const ::std::string& value) {
  id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:similia.proto.CompressedElements.id)
}
inline void CompressedElements::add_id(const char* value) {
  id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:similia.proto.CompressedElements.id)
}
inline void CompressedElements::add_id(const char* value, size_t size) {
  id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:similia.proto.CompressedElements.id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CompressedElements::id() const {
  // @@protoc_insertion_point(field_list:similia.proto.CompressedElements.id)
  return id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CompressedElements::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.CompressedElements.id)
  return &id_;
}

// repeated .similia.proto.CompressingClustersIds compressing_clusters_id = 2;
inline int CompressedElements::compressing_clusters_id_size() const {
  return compressing_clusters_id_.size();
}
inline void CompressedElements::clear_compressing_clusters_id() {
  compressing_clusters_id_.Clear();
}
inline const ::similia::proto::CompressingClustersIds& CompressedElements::compressing_clusters_id(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.CompressedElements.compressing_clusters_id)
  return compressing_clusters_id_.Get(index);
}
inline ::similia::proto::CompressingClustersIds* CompressedElements::mutable_compressing_clusters_id(int index) {
  // @@protoc_insertion_point(field_mutable:similia.proto.CompressedElements.compressing_clusters_id)
  return compressing_clusters_id_.Mutable(index);
}
inline ::similia::proto::CompressingClustersIds* CompressedElements::add_compressing_clusters_id() {
  // @@protoc_insertion_point(field_add:similia.proto.CompressedElements.compressing_clusters_id)
  return compressing_clusters_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::similia::proto::CompressingClustersIds >*
CompressedElements::mutable_compressing_clusters_id() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.CompressedElements.compressing_clusters_id)
  return &compressing_clusters_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::similia::proto::CompressingClustersIds >&
CompressedElements::compressing_clusters_id() const {
  // @@protoc_insertion_point(field_list:similia.proto.CompressedElements.compressing_clusters_id)
  return compressing_clusters_id_;
}

// -------------------------------------------------------------------

// SerializedCompressedElements

// repeated string id = 1;
inline int SerializedCompressedElements::id_size() const {
  return id_.size();
}
inline void SerializedCompressedElements::clear_id() {
  id_.Clear();
}
inline const ::std::string& SerializedCompressedElements::id(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.SerializedCompressedElements.id)
  return id_.Get(index);
}
inline ::std::string* SerializedCompressedElements::mutable_id(int index) {
  // @@protoc_insertion_point(field_mutable:similia.proto.SerializedCompressedElements.id)
  return id_.Mutable(index);
}
inline void SerializedCompressedElements::set_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:similia.proto.SerializedCompressedElements.id)
  id_.Mutable(index)->assign(value);
}
inline void SerializedCompressedElements::set_id(int index, const char* value) {
  id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:similia.proto.SerializedCompressedElements.id)
}
inline void SerializedCompressedElements::set_id(int index, const char* value, size_t size) {
  id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:similia.proto.SerializedCompressedElements.id)
}
inline ::std::string* SerializedCompressedElements::add_id() {
  // @@protoc_insertion_point(field_add_mutable:similia.proto.SerializedCompressedElements.id)
  return id_.Add();
}
inline void SerializedCompressedElements::add_id(const ::std::string& value) {
  id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:similia.proto.SerializedCompressedElements.id)
}
inline void SerializedCompressedElements::add_id(const char* value) {
  id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:similia.proto.SerializedCompressedElements.id)
}
inline void SerializedCompressedElements::add_id(const char* value, size_t size) {
  id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:similia.proto.SerializedCompressedElements.id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SerializedCompressedElements::id() const {
  // @@protoc_insertion_point(field_list:similia.proto.SerializedCompressedElements.id)
  return id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SerializedCompressedElements::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.SerializedCompressedElements.id)
  return &id_;
}

// repeated bytes compressing_clusters_id = 2;
inline int SerializedCompressedElements::compressing_clusters_id_size() const {
  return compressing_clusters_id_.size();
}
inline void SerializedCompressedElements::clear_compressing_clusters_id() {
  compressing_clusters_id_.Clear();
}
inline const ::std::string& SerializedCompressedElements::compressing_clusters_id(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.SerializedCompressedElements.compressing_clusters_id)
  return compressing_clusters_id_.Get(index);
}
inline ::std::string* SerializedCompressedElements::mutable_compressing_clusters_id(int index) {
  // @@protoc_insertion_point(field_mutable:similia.proto.SerializedCompressedElements.compressing_clusters_id)
  return compressing_clusters_id_.Mutable(index);
}
inline void SerializedCompressedElements::set_compressing_clusters_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:similia.proto.SerializedCompressedElements.compressing_clusters_id)
  compressing_clusters_id_.Mutable(index)->assign(value);
}
inline void SerializedCompressedElements::set_compressing_clusters_id(int index, const char* value) {
  compressing_clusters_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:similia.proto.SerializedCompressedElements.compressing_clusters_id)
}
inline void SerializedCompressedElements::set_compressing_clusters_id(int index, const void* value, size_t size) {
  compressing_clusters_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:similia.proto.SerializedCompressedElements.compressing_clusters_id)
}
inline ::std::string* SerializedCompressedElements::add_compressing_clusters_id() {
  // @@protoc_insertion_point(field_add_mutable:similia.proto.SerializedCompressedElements.compressing_clusters_id)
  return compressing_clusters_id_.Add();
}
inline void SerializedCompressedElements::add_compressing_clusters_id(const ::std::string& value) {
  compressing_clusters_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:similia.proto.SerializedCompressedElements.compressing_clusters_id)
}
inline void SerializedCompressedElements::add_compressing_clusters_id(const char* value) {
  compressing_clusters_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:similia.proto.SerializedCompressedElements.compressing_clusters_id)
}
inline void SerializedCompressedElements::add_compressing_clusters_id(const void* value, size_t size) {
  compressing_clusters_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:similia.proto.SerializedCompressedElements.compressing_clusters_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SerializedCompressedElements::compressing_clusters_id() const {
  // @@protoc_insertion_point(field_list:similia.proto.SerializedCompressedElements.compressing_clusters_id)
  return compressing_clusters_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SerializedCompressedElements::mutable_compressing_clusters_id() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.SerializedCompressedElements.compressing_clusters_id)
  return &compressing_clusters_id_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CompressedElementsMap

// map<string, .similia.proto.CompressingClustersIds> compressed_element = 1;
inline int CompressedElementsMap::compressed_element_size() const {
  return compressed_element_.size();
}
inline void CompressedElementsMap::clear_compressed_element() {
  compressed_element_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::similia::proto::CompressingClustersIds >&
CompressedElementsMap::compressed_element() const {
  // @@protoc_insertion_point(field_map:similia.proto.CompressedElementsMap.compressed_element)
  return compressed_element_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::similia::proto::CompressingClustersIds >*
CompressedElementsMap::mutable_compressed_element() {
  // @@protoc_insertion_point(field_mutable_map:similia.proto.CompressedElementsMap.compressed_element)
  return compressed_element_.MutableMap();
}

// -------------------------------------------------------------------

// SimiliaSearchRequest

// string image_id = 1;
inline void SimiliaSearchRequest::clear_image_id() {
  image_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SimiliaSearchRequest::image_id() const {
  // @@protoc_insertion_point(field_get:similia.proto.SimiliaSearchRequest.image_id)
  return image_id_.GetNoArena();
}
inline void SimiliaSearchRequest::set_image_id(const ::std::string& value) {
  
  image_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:similia.proto.SimiliaSearchRequest.image_id)
}
#if LANG_CXX11
inline void SimiliaSearchRequest::set_image_id(::std::string&& value) {
  
  image_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:similia.proto.SimiliaSearchRequest.image_id)
}
#endif
inline void SimiliaSearchRequest::set_image_id(const char* value) {
  
  image_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:similia.proto.SimiliaSearchRequest.image_id)
}
inline void SimiliaSearchRequest::set_image_id(const char* value, size_t size) {
  
  image_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:similia.proto.SimiliaSearchRequest.image_id)
}
inline ::std::string* SimiliaSearchRequest::mutable_image_id() {
  
  // @@protoc_insertion_point(field_mutable:similia.proto.SimiliaSearchRequest.image_id)
  return image_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SimiliaSearchRequest::release_image_id() {
  // @@protoc_insertion_point(field_release:similia.proto.SimiliaSearchRequest.image_id)
  
  return image_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SimiliaSearchRequest::set_allocated_image_id(::std::string* image_id) {
  if (image_id != NULL) {
    
  } else {
    
  }
  image_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_id);
  // @@protoc_insertion_point(field_set_allocated:similia.proto.SimiliaSearchRequest.image_id)
}

// int32 num_nearest = 2;
inline void SimiliaSearchRequest::clear_num_nearest() {
  num_nearest_ = 0;
}
inline ::google::protobuf::int32 SimiliaSearchRequest::num_nearest() const {
  // @@protoc_insertion_point(field_get:similia.proto.SimiliaSearchRequest.num_nearest)
  return num_nearest_;
}
inline void SimiliaSearchRequest::set_num_nearest(::google::protobuf::int32 value) {
  
  num_nearest_ = value;
  // @@protoc_insertion_point(field_set:similia.proto.SimiliaSearchRequest.num_nearest)
}

// .similia.proto.Features features = 3;
inline bool SimiliaSearchRequest::has_features() const {
  return this != internal_default_instance() && features_ != NULL;
}
inline void SimiliaSearchRequest::clear_features() {
  if (GetArenaNoVirtual() == NULL && features_ != NULL) delete features_;
  features_ = NULL;
}
inline const ::similia::proto::Features& SimiliaSearchRequest::features() const {
  // @@protoc_insertion_point(field_get:similia.proto.SimiliaSearchRequest.features)
  return features_ != NULL ? *features_
                         : *::similia::proto::Features::internal_default_instance();
}
inline ::similia::proto::Features* SimiliaSearchRequest::mutable_features() {
  
  if (features_ == NULL) {
    features_ = new ::similia::proto::Features;
  }
  // @@protoc_insertion_point(field_mutable:similia.proto.SimiliaSearchRequest.features)
  return features_;
}
inline ::similia::proto::Features* SimiliaSearchRequest::release_features() {
  // @@protoc_insertion_point(field_release:similia.proto.SimiliaSearchRequest.features)
  
  ::similia::proto::Features* temp = features_;
  features_ = NULL;
  return temp;
}
inline void SimiliaSearchRequest::set_allocated_features(::similia::proto::Features* features) {
  delete features_;
  features_ = features;
  if (features) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:similia.proto.SimiliaSearchRequest.features)
}

// -------------------------------------------------------------------

// SimiliaSearchResponse

// repeated string image_id = 1;
inline int SimiliaSearchResponse::image_id_size() const {
  return image_id_.size();
}
inline void SimiliaSearchResponse::clear_image_id() {
  image_id_.Clear();
}
inline const ::std::string& SimiliaSearchResponse::image_id(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.SimiliaSearchResponse.image_id)
  return image_id_.Get(index);
}
inline ::std::string* SimiliaSearchResponse::mutable_image_id(int index) {
  // @@protoc_insertion_point(field_mutable:similia.proto.SimiliaSearchResponse.image_id)
  return image_id_.Mutable(index);
}
inline void SimiliaSearchResponse::set_image_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:similia.proto.SimiliaSearchResponse.image_id)
  image_id_.Mutable(index)->assign(value);
}
inline void SimiliaSearchResponse::set_image_id(int index, const char* value) {
  image_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:similia.proto.SimiliaSearchResponse.image_id)
}
inline void SimiliaSearchResponse::set_image_id(int index, const char* value, size_t size) {
  image_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:similia.proto.SimiliaSearchResponse.image_id)
}
inline ::std::string* SimiliaSearchResponse::add_image_id() {
  // @@protoc_insertion_point(field_add_mutable:similia.proto.SimiliaSearchResponse.image_id)
  return image_id_.Add();
}
inline void SimiliaSearchResponse::add_image_id(const ::std::string& value) {
  image_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:similia.proto.SimiliaSearchResponse.image_id)
}
inline void SimiliaSearchResponse::add_image_id(const char* value) {
  image_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:similia.proto.SimiliaSearchResponse.image_id)
}
inline void SimiliaSearchResponse::add_image_id(const char* value, size_t size) {
  image_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:similia.proto.SimiliaSearchResponse.image_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SimiliaSearchResponse::image_id() const {
  // @@protoc_insertion_point(field_list:similia.proto.SimiliaSearchResponse.image_id)
  return image_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SimiliaSearchResponse::mutable_image_id() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.SimiliaSearchResponse.image_id)
  return &image_id_;
}

// int64 processing_time_ms = 2;
inline void SimiliaSearchResponse::clear_processing_time_ms() {
  processing_time_ms_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SimiliaSearchResponse::processing_time_ms() const {
  // @@protoc_insertion_point(field_get:similia.proto.SimiliaSearchResponse.processing_time_ms)
  return processing_time_ms_;
}
inline void SimiliaSearchResponse::set_processing_time_ms(::google::protobuf::int64 value) {
  
  processing_time_ms_ = value;
  // @@protoc_insertion_point(field_set:similia.proto.SimiliaSearchResponse.processing_time_ms)
}

// repeated double squared_distance = 3;
inline int SimiliaSearchResponse::squared_distance_size() const {
  return squared_distance_.size();
}
inline void SimiliaSearchResponse::clear_squared_distance() {
  squared_distance_.Clear();
}
inline double SimiliaSearchResponse::squared_distance(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.SimiliaSearchResponse.squared_distance)
  return squared_distance_.Get(index);
}
inline void SimiliaSearchResponse::set_squared_distance(int index, double value) {
  squared_distance_.Set(index, value);
  // @@protoc_insertion_point(field_set:similia.proto.SimiliaSearchResponse.squared_distance)
}
inline void SimiliaSearchResponse::add_squared_distance(double value) {
  squared_distance_.Add(value);
  // @@protoc_insertion_point(field_add:similia.proto.SimiliaSearchResponse.squared_distance)
}
inline const ::google::protobuf::RepeatedField< double >&
SimiliaSearchResponse::squared_distance() const {
  // @@protoc_insertion_point(field_list:similia.proto.SimiliaSearchResponse.squared_distance)
  return squared_distance_;
}
inline ::google::protobuf::RepeatedField< double >*
SimiliaSearchResponse::mutable_squared_distance() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.SimiliaSearchResponse.squared_distance)
  return &squared_distance_;
}

// -------------------------------------------------------------------

// MultiIndexAddRequest

// string image_id = 1;
inline void MultiIndexAddRequest::clear_image_id() {
  image_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MultiIndexAddRequest::image_id() const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexAddRequest.image_id)
  return image_id_.GetNoArena();
}
inline void MultiIndexAddRequest::set_image_id(const ::std::string& value) {
  
  image_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:similia.proto.MultiIndexAddRequest.image_id)
}
#if LANG_CXX11
inline void MultiIndexAddRequest::set_image_id(::std::string&& value) {
  
  image_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:similia.proto.MultiIndexAddRequest.image_id)
}
#endif
inline void MultiIndexAddRequest::set_image_id(const char* value) {
  
  image_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:similia.proto.MultiIndexAddRequest.image_id)
}
inline void MultiIndexAddRequest::set_image_id(const char* value, size_t size) {
  
  image_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:similia.proto.MultiIndexAddRequest.image_id)
}
inline ::std::string* MultiIndexAddRequest::mutable_image_id() {
  
  // @@protoc_insertion_point(field_mutable:similia.proto.MultiIndexAddRequest.image_id)
  return image_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MultiIndexAddRequest::release_image_id() {
  // @@protoc_insertion_point(field_release:similia.proto.MultiIndexAddRequest.image_id)
  
  return image_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MultiIndexAddRequest::set_allocated_image_id(::std::string* image_id) {
  if (image_id != NULL) {
    
  } else {
    
  }
  image_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_id);
  // @@protoc_insertion_point(field_set_allocated:similia.proto.MultiIndexAddRequest.image_id)
}

// .similia.proto.IndexingClustersIds indexing_ids = 2;
inline bool MultiIndexAddRequest::has_indexing_ids() const {
  return this != internal_default_instance() && indexing_ids_ != NULL;
}
inline void MultiIndexAddRequest::clear_indexing_ids() {
  if (GetArenaNoVirtual() == NULL && indexing_ids_ != NULL) delete indexing_ids_;
  indexing_ids_ = NULL;
}
inline const ::similia::proto::IndexingClustersIds& MultiIndexAddRequest::indexing_ids() const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexAddRequest.indexing_ids)
  return indexing_ids_ != NULL ? *indexing_ids_
                         : *::similia::proto::IndexingClustersIds::internal_default_instance();
}
inline ::similia::proto::IndexingClustersIds* MultiIndexAddRequest::mutable_indexing_ids() {
  
  if (indexing_ids_ == NULL) {
    indexing_ids_ = new ::similia::proto::IndexingClustersIds;
  }
  // @@protoc_insertion_point(field_mutable:similia.proto.MultiIndexAddRequest.indexing_ids)
  return indexing_ids_;
}
inline ::similia::proto::IndexingClustersIds* MultiIndexAddRequest::release_indexing_ids() {
  // @@protoc_insertion_point(field_release:similia.proto.MultiIndexAddRequest.indexing_ids)
  
  ::similia::proto::IndexingClustersIds* temp = indexing_ids_;
  indexing_ids_ = NULL;
  return temp;
}
inline void MultiIndexAddRequest::set_allocated_indexing_ids(::similia::proto::IndexingClustersIds* indexing_ids) {
  delete indexing_ids_;
  indexing_ids_ = indexing_ids;
  if (indexing_ids) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:similia.proto.MultiIndexAddRequest.indexing_ids)
}

// .similia.proto.CompressingClustersIds compressing_ids = 3;
inline bool MultiIndexAddRequest::has_compressing_ids() const {
  return this != internal_default_instance() && compressing_ids_ != NULL;
}
inline void MultiIndexAddRequest::clear_compressing_ids() {
  if (GetArenaNoVirtual() == NULL && compressing_ids_ != NULL) delete compressing_ids_;
  compressing_ids_ = NULL;
}
inline const ::similia::proto::CompressingClustersIds& MultiIndexAddRequest::compressing_ids() const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexAddRequest.compressing_ids)
  return compressing_ids_ != NULL ? *compressing_ids_
                         : *::similia::proto::CompressingClustersIds::internal_default_instance();
}
inline ::similia::proto::CompressingClustersIds* MultiIndexAddRequest::mutable_compressing_ids() {
  
  if (compressing_ids_ == NULL) {
    compressing_ids_ = new ::similia::proto::CompressingClustersIds;
  }
  // @@protoc_insertion_point(field_mutable:similia.proto.MultiIndexAddRequest.compressing_ids)
  return compressing_ids_;
}
inline ::similia::proto::CompressingClustersIds* MultiIndexAddRequest::release_compressing_ids() {
  // @@protoc_insertion_point(field_release:similia.proto.MultiIndexAddRequest.compressing_ids)
  
  ::similia::proto::CompressingClustersIds* temp = compressing_ids_;
  compressing_ids_ = NULL;
  return temp;
}
inline void MultiIndexAddRequest::set_allocated_compressing_ids(::similia::proto::CompressingClustersIds* compressing_ids) {
  delete compressing_ids_;
  compressing_ids_ = compressing_ids;
  if (compressing_ids) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:similia.proto.MultiIndexAddRequest.compressing_ids)
}

// -------------------------------------------------------------------

// MultiIndexAddResponse

// int64 processing_time_ms = 2;
inline void MultiIndexAddResponse::clear_processing_time_ms() {
  processing_time_ms_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MultiIndexAddResponse::processing_time_ms() const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexAddResponse.processing_time_ms)
  return processing_time_ms_;
}
inline void MultiIndexAddResponse::set_processing_time_ms(::google::protobuf::int64 value) {
  
  processing_time_ms_ = value;
  // @@protoc_insertion_point(field_set:similia.proto.MultiIndexAddResponse.processing_time_ms)
}

// -------------------------------------------------------------------

// MultiIndexGetRequest

// .similia.proto.IndexingClustersIds indexing_ids = 1;
inline bool MultiIndexGetRequest::has_indexing_ids() const {
  return this != internal_default_instance() && indexing_ids_ != NULL;
}
inline void MultiIndexGetRequest::clear_indexing_ids() {
  if (GetArenaNoVirtual() == NULL && indexing_ids_ != NULL) delete indexing_ids_;
  indexing_ids_ = NULL;
}
inline const ::similia::proto::IndexingClustersIds& MultiIndexGetRequest::indexing_ids() const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexGetRequest.indexing_ids)
  return indexing_ids_ != NULL ? *indexing_ids_
                         : *::similia::proto::IndexingClustersIds::internal_default_instance();
}
inline ::similia::proto::IndexingClustersIds* MultiIndexGetRequest::mutable_indexing_ids() {
  
  if (indexing_ids_ == NULL) {
    indexing_ids_ = new ::similia::proto::IndexingClustersIds;
  }
  // @@protoc_insertion_point(field_mutable:similia.proto.MultiIndexGetRequest.indexing_ids)
  return indexing_ids_;
}
inline ::similia::proto::IndexingClustersIds* MultiIndexGetRequest::release_indexing_ids() {
  // @@protoc_insertion_point(field_release:similia.proto.MultiIndexGetRequest.indexing_ids)
  
  ::similia::proto::IndexingClustersIds* temp = indexing_ids_;
  indexing_ids_ = NULL;
  return temp;
}
inline void MultiIndexGetRequest::set_allocated_indexing_ids(::similia::proto::IndexingClustersIds* indexing_ids) {
  delete indexing_ids_;
  indexing_ids_ = indexing_ids;
  if (indexing_ids) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:similia.proto.MultiIndexGetRequest.indexing_ids)
}

// -------------------------------------------------------------------

// MultiIndexGetResponse

// int64 processing_time_ms = 2;
inline void MultiIndexGetResponse::clear_processing_time_ms() {
  processing_time_ms_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MultiIndexGetResponse::processing_time_ms() const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexGetResponse.processing_time_ms)
  return processing_time_ms_;
}
inline void MultiIndexGetResponse::set_processing_time_ms(::google::protobuf::int64 value) {
  
  processing_time_ms_ = value;
  // @@protoc_insertion_point(field_set:similia.proto.MultiIndexGetResponse.processing_time_ms)
}

// bytes compressed_elements = 3;
inline void MultiIndexGetResponse::clear_compressed_elements() {
  compressed_elements_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MultiIndexGetResponse::compressed_elements() const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexGetResponse.compressed_elements)
  return compressed_elements_.GetNoArena();
}
inline void MultiIndexGetResponse::set_compressed_elements(const ::std::string& value) {
  
  compressed_elements_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:similia.proto.MultiIndexGetResponse.compressed_elements)
}
#if LANG_CXX11
inline void MultiIndexGetResponse::set_compressed_elements(::std::string&& value) {
  
  compressed_elements_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:similia.proto.MultiIndexGetResponse.compressed_elements)
}
#endif
inline void MultiIndexGetResponse::set_compressed_elements(const char* value) {
  
  compressed_elements_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:similia.proto.MultiIndexGetResponse.compressed_elements)
}
inline void MultiIndexGetResponse::set_compressed_elements(const void* value, size_t size) {
  
  compressed_elements_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:similia.proto.MultiIndexGetResponse.compressed_elements)
}
inline ::std::string* MultiIndexGetResponse::mutable_compressed_elements() {
  
  // @@protoc_insertion_point(field_mutable:similia.proto.MultiIndexGetResponse.compressed_elements)
  return compressed_elements_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MultiIndexGetResponse::release_compressed_elements() {
  // @@protoc_insertion_point(field_release:similia.proto.MultiIndexGetResponse.compressed_elements)
  
  return compressed_elements_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MultiIndexGetResponse::set_allocated_compressed_elements(::std::string* compressed_elements) {
  if (compressed_elements != NULL) {
    
  } else {
    
  }
  compressed_elements_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), compressed_elements);
  // @@protoc_insertion_point(field_set_allocated:similia.proto.MultiIndexGetResponse.compressed_elements)
}

// -------------------------------------------------------------------

// MultiIndexMultiGetRequest

// repeated .similia.proto.IndexingClustersIds indexing_ids = 1;
inline int MultiIndexMultiGetRequest::indexing_ids_size() const {
  return indexing_ids_.size();
}
inline void MultiIndexMultiGetRequest::clear_indexing_ids() {
  indexing_ids_.Clear();
}
inline const ::similia::proto::IndexingClustersIds& MultiIndexMultiGetRequest::indexing_ids(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexMultiGetRequest.indexing_ids)
  return indexing_ids_.Get(index);
}
inline ::similia::proto::IndexingClustersIds* MultiIndexMultiGetRequest::mutable_indexing_ids(int index) {
  // @@protoc_insertion_point(field_mutable:similia.proto.MultiIndexMultiGetRequest.indexing_ids)
  return indexing_ids_.Mutable(index);
}
inline ::similia::proto::IndexingClustersIds* MultiIndexMultiGetRequest::add_indexing_ids() {
  // @@protoc_insertion_point(field_add:similia.proto.MultiIndexMultiGetRequest.indexing_ids)
  return indexing_ids_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::similia::proto::IndexingClustersIds >*
MultiIndexMultiGetRequest::mutable_indexing_ids() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.MultiIndexMultiGetRequest.indexing_ids)
  return &indexing_ids_;
}
inline const ::google::protobuf::RepeatedPtrField< ::similia::proto::IndexingClustersIds >&
MultiIndexMultiGetRequest::indexing_ids() const {
  // @@protoc_insertion_point(field_list:similia.proto.MultiIndexMultiGetRequest.indexing_ids)
  return indexing_ids_;
}

// int32 count_limit = 2;
inline void MultiIndexMultiGetRequest::clear_count_limit() {
  count_limit_ = 0;
}
inline ::google::protobuf::int32 MultiIndexMultiGetRequest::count_limit() const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexMultiGetRequest.count_limit)
  return count_limit_;
}
inline void MultiIndexMultiGetRequest::set_count_limit(::google::protobuf::int32 value) {
  
  count_limit_ = value;
  // @@protoc_insertion_point(field_set:similia.proto.MultiIndexMultiGetRequest.count_limit)
}

// -------------------------------------------------------------------

// MultiIndexMultiGetResponse

// int64 processing_time_ms = 2;
inline void MultiIndexMultiGetResponse::clear_processing_time_ms() {
  processing_time_ms_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MultiIndexMultiGetResponse::processing_time_ms() const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexMultiGetResponse.processing_time_ms)
  return processing_time_ms_;
}
inline void MultiIndexMultiGetResponse::set_processing_time_ms(::google::protobuf::int64 value) {
  
  processing_time_ms_ = value;
  // @@protoc_insertion_point(field_set:similia.proto.MultiIndexMultiGetResponse.processing_time_ms)
}

// repeated bytes compressed_elements = 3;
inline int MultiIndexMultiGetResponse::compressed_elements_size() const {
  return compressed_elements_.size();
}
inline void MultiIndexMultiGetResponse::clear_compressed_elements() {
  compressed_elements_.Clear();
}
inline const ::std::string& MultiIndexMultiGetResponse::compressed_elements(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexMultiGetResponse.compressed_elements)
  return compressed_elements_.Get(index);
}
inline ::std::string* MultiIndexMultiGetResponse::mutable_compressed_elements(int index) {
  // @@protoc_insertion_point(field_mutable:similia.proto.MultiIndexMultiGetResponse.compressed_elements)
  return compressed_elements_.Mutable(index);
}
inline void MultiIndexMultiGetResponse::set_compressed_elements(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:similia.proto.MultiIndexMultiGetResponse.compressed_elements)
  compressed_elements_.Mutable(index)->assign(value);
}
inline void MultiIndexMultiGetResponse::set_compressed_elements(int index, const char* value) {
  compressed_elements_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:similia.proto.MultiIndexMultiGetResponse.compressed_elements)
}
inline void MultiIndexMultiGetResponse::set_compressed_elements(int index, const void* value, size_t size) {
  compressed_elements_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:similia.proto.MultiIndexMultiGetResponse.compressed_elements)
}
inline ::std::string* MultiIndexMultiGetResponse::add_compressed_elements() {
  // @@protoc_insertion_point(field_add_mutable:similia.proto.MultiIndexMultiGetResponse.compressed_elements)
  return compressed_elements_.Add();
}
inline void MultiIndexMultiGetResponse::add_compressed_elements(const ::std::string& value) {
  compressed_elements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:similia.proto.MultiIndexMultiGetResponse.compressed_elements)
}
inline void MultiIndexMultiGetResponse::add_compressed_elements(const char* value) {
  compressed_elements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:similia.proto.MultiIndexMultiGetResponse.compressed_elements)
}
inline void MultiIndexMultiGetResponse::add_compressed_elements(const void* value, size_t size) {
  compressed_elements_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:similia.proto.MultiIndexMultiGetResponse.compressed_elements)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MultiIndexMultiGetResponse::compressed_elements() const {
  // @@protoc_insertion_point(field_list:similia.proto.MultiIndexMultiGetResponse.compressed_elements)
  return compressed_elements_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MultiIndexMultiGetResponse::mutable_compressed_elements() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.MultiIndexMultiGetResponse.compressed_elements)
  return &compressed_elements_;
}

// -------------------------------------------------------------------

// MultiIndexMultiCountRequest

// repeated .similia.proto.IndexingClustersIds indexing_ids = 1;
inline int MultiIndexMultiCountRequest::indexing_ids_size() const {
  return indexing_ids_.size();
}
inline void MultiIndexMultiCountRequest::clear_indexing_ids() {
  indexing_ids_.Clear();
}
inline const ::similia::proto::IndexingClustersIds& MultiIndexMultiCountRequest::indexing_ids(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexMultiCountRequest.indexing_ids)
  return indexing_ids_.Get(index);
}
inline ::similia::proto::IndexingClustersIds* MultiIndexMultiCountRequest::mutable_indexing_ids(int index) {
  // @@protoc_insertion_point(field_mutable:similia.proto.MultiIndexMultiCountRequest.indexing_ids)
  return indexing_ids_.Mutable(index);
}
inline ::similia::proto::IndexingClustersIds* MultiIndexMultiCountRequest::add_indexing_ids() {
  // @@protoc_insertion_point(field_add:similia.proto.MultiIndexMultiCountRequest.indexing_ids)
  return indexing_ids_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::similia::proto::IndexingClustersIds >*
MultiIndexMultiCountRequest::mutable_indexing_ids() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.MultiIndexMultiCountRequest.indexing_ids)
  return &indexing_ids_;
}
inline const ::google::protobuf::RepeatedPtrField< ::similia::proto::IndexingClustersIds >&
MultiIndexMultiCountRequest::indexing_ids() const {
  // @@protoc_insertion_point(field_list:similia.proto.MultiIndexMultiCountRequest.indexing_ids)
  return indexing_ids_;
}

// -------------------------------------------------------------------

// MultiIndexMultiCountResponse

// int64 processing_time_ms = 2;
inline void MultiIndexMultiCountResponse::clear_processing_time_ms() {
  processing_time_ms_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MultiIndexMultiCountResponse::processing_time_ms() const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexMultiCountResponse.processing_time_ms)
  return processing_time_ms_;
}
inline void MultiIndexMultiCountResponse::set_processing_time_ms(::google::protobuf::int64 value) {
  
  processing_time_ms_ = value;
  // @@protoc_insertion_point(field_set:similia.proto.MultiIndexMultiCountResponse.processing_time_ms)
}

// repeated int32 count = 3;
inline int MultiIndexMultiCountResponse::count_size() const {
  return count_.size();
}
inline void MultiIndexMultiCountResponse::clear_count() {
  count_.Clear();
}
inline ::google::protobuf::int32 MultiIndexMultiCountResponse::count(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexMultiCountResponse.count)
  return count_.Get(index);
}
inline void MultiIndexMultiCountResponse::set_count(int index, ::google::protobuf::int32 value) {
  count_.Set(index, value);
  // @@protoc_insertion_point(field_set:similia.proto.MultiIndexMultiCountResponse.count)
}
inline void MultiIndexMultiCountResponse::add_count(::google::protobuf::int32 value) {
  count_.Add(value);
  // @@protoc_insertion_point(field_add:similia.proto.MultiIndexMultiCountResponse.count)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MultiIndexMultiCountResponse::count() const {
  // @@protoc_insertion_point(field_list:similia.proto.MultiIndexMultiCountResponse.count)
  return count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MultiIndexMultiCountResponse::mutable_count() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.MultiIndexMultiCountResponse.count)
  return &count_;
}

// -------------------------------------------------------------------

// MultiIndexMultiAddRequest

// repeated .similia.proto.MultiIndexAddRequest multi_index_add_request = 1;
inline int MultiIndexMultiAddRequest::multi_index_add_request_size() const {
  return multi_index_add_request_.size();
}
inline void MultiIndexMultiAddRequest::clear_multi_index_add_request() {
  multi_index_add_request_.Clear();
}
inline const ::similia::proto::MultiIndexAddRequest& MultiIndexMultiAddRequest::multi_index_add_request(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexMultiAddRequest.multi_index_add_request)
  return multi_index_add_request_.Get(index);
}
inline ::similia::proto::MultiIndexAddRequest* MultiIndexMultiAddRequest::mutable_multi_index_add_request(int index) {
  // @@protoc_insertion_point(field_mutable:similia.proto.MultiIndexMultiAddRequest.multi_index_add_request)
  return multi_index_add_request_.Mutable(index);
}
inline ::similia::proto::MultiIndexAddRequest* MultiIndexMultiAddRequest::add_multi_index_add_request() {
  // @@protoc_insertion_point(field_add:similia.proto.MultiIndexMultiAddRequest.multi_index_add_request)
  return multi_index_add_request_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::similia::proto::MultiIndexAddRequest >*
MultiIndexMultiAddRequest::mutable_multi_index_add_request() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.MultiIndexMultiAddRequest.multi_index_add_request)
  return &multi_index_add_request_;
}
inline const ::google::protobuf::RepeatedPtrField< ::similia::proto::MultiIndexAddRequest >&
MultiIndexMultiAddRequest::multi_index_add_request() const {
  // @@protoc_insertion_point(field_list:similia.proto.MultiIndexMultiAddRequest.multi_index_add_request)
  return multi_index_add_request_;
}

// -------------------------------------------------------------------

// MultiIndexMultiAddResponse

// int64 processing_time_ms = 2;
inline void MultiIndexMultiAddResponse::clear_processing_time_ms() {
  processing_time_ms_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MultiIndexMultiAddResponse::processing_time_ms() const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexMultiAddResponse.processing_time_ms)
  return processing_time_ms_;
}
inline void MultiIndexMultiAddResponse::set_processing_time_ms(::google::protobuf::int64 value) {
  
  processing_time_ms_ = value;
  // @@protoc_insertion_point(field_set:similia.proto.MultiIndexMultiAddResponse.processing_time_ms)
}

// -------------------------------------------------------------------

// MultiIndexDeleteRequest

// string id = 1;
inline void MultiIndexDeleteRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MultiIndexDeleteRequest::id() const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexDeleteRequest.id)
  return id_.GetNoArena();
}
inline void MultiIndexDeleteRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:similia.proto.MultiIndexDeleteRequest.id)
}
#if LANG_CXX11
inline void MultiIndexDeleteRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:similia.proto.MultiIndexDeleteRequest.id)
}
#endif
inline void MultiIndexDeleteRequest::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:similia.proto.MultiIndexDeleteRequest.id)
}
inline void MultiIndexDeleteRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:similia.proto.MultiIndexDeleteRequest.id)
}
inline ::std::string* MultiIndexDeleteRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:similia.proto.MultiIndexDeleteRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MultiIndexDeleteRequest::release_id() {
  // @@protoc_insertion_point(field_release:similia.proto.MultiIndexDeleteRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MultiIndexDeleteRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:similia.proto.MultiIndexDeleteRequest.id)
}

// .similia.proto.IndexingClustersIds indexing_ids = 2;
inline bool MultiIndexDeleteRequest::has_indexing_ids() const {
  return this != internal_default_instance() && indexing_ids_ != NULL;
}
inline void MultiIndexDeleteRequest::clear_indexing_ids() {
  if (GetArenaNoVirtual() == NULL && indexing_ids_ != NULL) delete indexing_ids_;
  indexing_ids_ = NULL;
}
inline const ::similia::proto::IndexingClustersIds& MultiIndexDeleteRequest::indexing_ids() const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexDeleteRequest.indexing_ids)
  return indexing_ids_ != NULL ? *indexing_ids_
                         : *::similia::proto::IndexingClustersIds::internal_default_instance();
}
inline ::similia::proto::IndexingClustersIds* MultiIndexDeleteRequest::mutable_indexing_ids() {
  
  if (indexing_ids_ == NULL) {
    indexing_ids_ = new ::similia::proto::IndexingClustersIds;
  }
  // @@protoc_insertion_point(field_mutable:similia.proto.MultiIndexDeleteRequest.indexing_ids)
  return indexing_ids_;
}
inline ::similia::proto::IndexingClustersIds* MultiIndexDeleteRequest::release_indexing_ids() {
  // @@protoc_insertion_point(field_release:similia.proto.MultiIndexDeleteRequest.indexing_ids)
  
  ::similia::proto::IndexingClustersIds* temp = indexing_ids_;
  indexing_ids_ = NULL;
  return temp;
}
inline void MultiIndexDeleteRequest::set_allocated_indexing_ids(::similia::proto::IndexingClustersIds* indexing_ids) {
  delete indexing_ids_;
  indexing_ids_ = indexing_ids;
  if (indexing_ids) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:similia.proto.MultiIndexDeleteRequest.indexing_ids)
}

// -------------------------------------------------------------------

// MultiIndexDeleteResponse

// int64 processing_time_ms = 2;
inline void MultiIndexDeleteResponse::clear_processing_time_ms() {
  processing_time_ms_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MultiIndexDeleteResponse::processing_time_ms() const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexDeleteResponse.processing_time_ms)
  return processing_time_ms_;
}
inline void MultiIndexDeleteResponse::set_processing_time_ms(::google::protobuf::int64 value) {
  
  processing_time_ms_ = value;
  // @@protoc_insertion_point(field_set:similia.proto.MultiIndexDeleteResponse.processing_time_ms)
}

// -------------------------------------------------------------------

// QuantizationRequest

// .similia.proto.Features features = 1;
inline bool QuantizationRequest::has_features() const {
  return this != internal_default_instance() && features_ != NULL;
}
inline void QuantizationRequest::clear_features() {
  if (GetArenaNoVirtual() == NULL && features_ != NULL) delete features_;
  features_ = NULL;
}
inline const ::similia::proto::Features& QuantizationRequest::features() const {
  // @@protoc_insertion_point(field_get:similia.proto.QuantizationRequest.features)
  return features_ != NULL ? *features_
                         : *::similia::proto::Features::internal_default_instance();
}
inline ::similia::proto::Features* QuantizationRequest::mutable_features() {
  
  if (features_ == NULL) {
    features_ = new ::similia::proto::Features;
  }
  // @@protoc_insertion_point(field_mutable:similia.proto.QuantizationRequest.features)
  return features_;
}
inline ::similia::proto::Features* QuantizationRequest::release_features() {
  // @@protoc_insertion_point(field_release:similia.proto.QuantizationRequest.features)
  
  ::similia::proto::Features* temp = features_;
  features_ = NULL;
  return temp;
}
inline void QuantizationRequest::set_allocated_features(::similia::proto::Features* features) {
  delete features_;
  features_ = features;
  if (features) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:similia.proto.QuantizationRequest.features)
}

// string image_id = 2;
inline void QuantizationRequest::clear_image_id() {
  image_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuantizationRequest::image_id() const {
  // @@protoc_insertion_point(field_get:similia.proto.QuantizationRequest.image_id)
  return image_id_.GetNoArena();
}
inline void QuantizationRequest::set_image_id(const ::std::string& value) {
  
  image_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:similia.proto.QuantizationRequest.image_id)
}
#if LANG_CXX11
inline void QuantizationRequest::set_image_id(::std::string&& value) {
  
  image_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:similia.proto.QuantizationRequest.image_id)
}
#endif
inline void QuantizationRequest::set_image_id(const char* value) {
  
  image_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:similia.proto.QuantizationRequest.image_id)
}
inline void QuantizationRequest::set_image_id(const char* value, size_t size) {
  
  image_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:similia.proto.QuantizationRequest.image_id)
}
inline ::std::string* QuantizationRequest::mutable_image_id() {
  
  // @@protoc_insertion_point(field_mutable:similia.proto.QuantizationRequest.image_id)
  return image_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuantizationRequest::release_image_id() {
  // @@protoc_insertion_point(field_release:similia.proto.QuantizationRequest.image_id)
  
  return image_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuantizationRequest::set_allocated_image_id(::std::string* image_id) {
  if (image_id != NULL) {
    
  } else {
    
  }
  image_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_id);
  // @@protoc_insertion_point(field_set_allocated:similia.proto.QuantizationRequest.image_id)
}

// -------------------------------------------------------------------

// QuantizationResponse

// int64 processing_time_ms = 2;
inline void QuantizationResponse::clear_processing_time_ms() {
  processing_time_ms_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QuantizationResponse::processing_time_ms() const {
  // @@protoc_insertion_point(field_get:similia.proto.QuantizationResponse.processing_time_ms)
  return processing_time_ms_;
}
inline void QuantizationResponse::set_processing_time_ms(::google::protobuf::int64 value) {
  
  processing_time_ms_ = value;
  // @@protoc_insertion_point(field_set:similia.proto.QuantizationResponse.processing_time_ms)
}

// .similia.proto.CompressingClustersIds compressing_ids = 3;
inline bool QuantizationResponse::has_compressing_ids() const {
  return this != internal_default_instance() && compressing_ids_ != NULL;
}
inline void QuantizationResponse::clear_compressing_ids() {
  if (GetArenaNoVirtual() == NULL && compressing_ids_ != NULL) delete compressing_ids_;
  compressing_ids_ = NULL;
}
inline const ::similia::proto::CompressingClustersIds& QuantizationResponse::compressing_ids() const {
  // @@protoc_insertion_point(field_get:similia.proto.QuantizationResponse.compressing_ids)
  return compressing_ids_ != NULL ? *compressing_ids_
                         : *::similia::proto::CompressingClustersIds::internal_default_instance();
}
inline ::similia::proto::CompressingClustersIds* QuantizationResponse::mutable_compressing_ids() {
  
  if (compressing_ids_ == NULL) {
    compressing_ids_ = new ::similia::proto::CompressingClustersIds;
  }
  // @@protoc_insertion_point(field_mutable:similia.proto.QuantizationResponse.compressing_ids)
  return compressing_ids_;
}
inline ::similia::proto::CompressingClustersIds* QuantizationResponse::release_compressing_ids() {
  // @@protoc_insertion_point(field_release:similia.proto.QuantizationResponse.compressing_ids)
  
  ::similia::proto::CompressingClustersIds* temp = compressing_ids_;
  compressing_ids_ = NULL;
  return temp;
}
inline void QuantizationResponse::set_allocated_compressing_ids(::similia::proto::CompressingClustersIds* compressing_ids) {
  delete compressing_ids_;
  compressing_ids_ = compressing_ids;
  if (compressing_ids) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:similia.proto.QuantizationResponse.compressing_ids)
}

// .similia.proto.IndexingClustersIds indexing_ids = 4;
inline bool QuantizationResponse::has_indexing_ids() const {
  return this != internal_default_instance() && indexing_ids_ != NULL;
}
inline void QuantizationResponse::clear_indexing_ids() {
  if (GetArenaNoVirtual() == NULL && indexing_ids_ != NULL) delete indexing_ids_;
  indexing_ids_ = NULL;
}
inline const ::similia::proto::IndexingClustersIds& QuantizationResponse::indexing_ids() const {
  // @@protoc_insertion_point(field_get:similia.proto.QuantizationResponse.indexing_ids)
  return indexing_ids_ != NULL ? *indexing_ids_
                         : *::similia::proto::IndexingClustersIds::internal_default_instance();
}
inline ::similia::proto::IndexingClustersIds* QuantizationResponse::mutable_indexing_ids() {
  
  if (indexing_ids_ == NULL) {
    indexing_ids_ = new ::similia::proto::IndexingClustersIds;
  }
  // @@protoc_insertion_point(field_mutable:similia.proto.QuantizationResponse.indexing_ids)
  return indexing_ids_;
}
inline ::similia::proto::IndexingClustersIds* QuantizationResponse::release_indexing_ids() {
  // @@protoc_insertion_point(field_release:similia.proto.QuantizationResponse.indexing_ids)
  
  ::similia::proto::IndexingClustersIds* temp = indexing_ids_;
  indexing_ids_ = NULL;
  return temp;
}
inline void QuantizationResponse::set_allocated_indexing_ids(::similia::proto::IndexingClustersIds* indexing_ids) {
  delete indexing_ids_;
  indexing_ids_ = indexing_ids;
  if (indexing_ids) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:similia.proto.QuantizationResponse.indexing_ids)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace similia

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_similia_2fproto_2fsimilia_2eproto__INCLUDED
