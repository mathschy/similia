// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: similia/proto/similia.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "similia/proto/similia.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace similia {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* FloatMatrix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloatMatrix_reflection_ = NULL;
const ::google::protobuf::Descriptor* Features_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Features_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompressingClustersIds_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompressingClustersIds_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndexingClustersIds_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexingClustersIds_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompressedElement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompressedElement_reflection_ = NULL;
const ::google::protobuf::Descriptor* SerializedCompressedElement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SerializedCompressedElement_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompressedElementsCombined_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompressedElementsCombined_reflection_ = NULL;
const ::google::protobuf::Descriptor* SerializedCompressedElementsCombined_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SerializedCompressedElementsCombined_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompressedElements_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompressedElements_reflection_ = NULL;
const ::google::protobuf::Descriptor* SerializedCompressedElements_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SerializedCompressedElements_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompressedElementsMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompressedElementsMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompressedElementsMap_CompressedElementEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SimiliaSearchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimiliaSearchRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimiliaSearchResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimiliaSearchResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiIndexAddRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiIndexAddRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiIndexAddResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiIndexAddResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiIndexGetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiIndexGetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiIndexGetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiIndexGetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiIndexMultiGetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiIndexMultiGetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiIndexMultiGetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiIndexMultiGetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiIndexMultiCountRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiIndexMultiCountRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiIndexMultiCountResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiIndexMultiCountResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiIndexMultiAddRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiIndexMultiAddRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiIndexMultiAddResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiIndexMultiAddResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiIndexDeleteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiIndexDeleteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiIndexDeleteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiIndexDeleteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuantizationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuantizationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuantizationResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuantizationResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_similia_2fproto_2fsimilia_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_similia_2fproto_2fsimilia_2eproto() {
  protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "similia/proto/similia.proto");
  GOOGLE_CHECK(file != NULL);
  FloatMatrix_descriptor_ = file->message_type(0);
  static const int FloatMatrix_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatMatrix, num_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatMatrix, num_cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatMatrix, element_),
  };
  FloatMatrix_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FloatMatrix_descriptor_,
      FloatMatrix::default_instance_,
      FloatMatrix_offsets_,
      -1,
      -1,
      -1,
      sizeof(FloatMatrix),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatMatrix, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatMatrix, _is_default_instance_));
  Features_descriptor_ = file->message_type(1);
  static const int Features_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, element_),
  };
  Features_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Features_descriptor_,
      Features::default_instance_,
      Features_offsets_,
      -1,
      -1,
      -1,
      sizeof(Features),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, _is_default_instance_));
  CompressingClustersIds_descriptor_ = file->message_type(2);
  static const int CompressingClustersIds_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressingClustersIds, id_),
  };
  CompressingClustersIds_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CompressingClustersIds_descriptor_,
      CompressingClustersIds::default_instance_,
      CompressingClustersIds_offsets_,
      -1,
      -1,
      -1,
      sizeof(CompressingClustersIds),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressingClustersIds, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressingClustersIds, _is_default_instance_));
  IndexingClustersIds_descriptor_ = file->message_type(3);
  static const int IndexingClustersIds_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexingClustersIds, id_),
  };
  IndexingClustersIds_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IndexingClustersIds_descriptor_,
      IndexingClustersIds::default_instance_,
      IndexingClustersIds_offsets_,
      -1,
      -1,
      -1,
      sizeof(IndexingClustersIds),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexingClustersIds, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexingClustersIds, _is_default_instance_));
  CompressedElement_descriptor_ = file->message_type(4);
  static const int CompressedElement_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedElement, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedElement, compressing_clusters_id_),
  };
  CompressedElement_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CompressedElement_descriptor_,
      CompressedElement::default_instance_,
      CompressedElement_offsets_,
      -1,
      -1,
      -1,
      sizeof(CompressedElement),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedElement, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedElement, _is_default_instance_));
  SerializedCompressedElement_descriptor_ = file->message_type(5);
  static const int SerializedCompressedElement_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedCompressedElement, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedCompressedElement, compressing_clusters_id_),
  };
  SerializedCompressedElement_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SerializedCompressedElement_descriptor_,
      SerializedCompressedElement::default_instance_,
      SerializedCompressedElement_offsets_,
      -1,
      -1,
      -1,
      sizeof(SerializedCompressedElement),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedCompressedElement, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedCompressedElement, _is_default_instance_));
  CompressedElementsCombined_descriptor_ = file->message_type(6);
  static const int CompressedElementsCombined_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedElementsCombined, compressed_element_),
  };
  CompressedElementsCombined_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CompressedElementsCombined_descriptor_,
      CompressedElementsCombined::default_instance_,
      CompressedElementsCombined_offsets_,
      -1,
      -1,
      -1,
      sizeof(CompressedElementsCombined),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedElementsCombined, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedElementsCombined, _is_default_instance_));
  SerializedCompressedElementsCombined_descriptor_ = file->message_type(7);
  static const int SerializedCompressedElementsCombined_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedCompressedElementsCombined, compressed_element_),
  };
  SerializedCompressedElementsCombined_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SerializedCompressedElementsCombined_descriptor_,
      SerializedCompressedElementsCombined::default_instance_,
      SerializedCompressedElementsCombined_offsets_,
      -1,
      -1,
      -1,
      sizeof(SerializedCompressedElementsCombined),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedCompressedElementsCombined, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedCompressedElementsCombined, _is_default_instance_));
  CompressedElements_descriptor_ = file->message_type(8);
  static const int CompressedElements_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedElements, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedElements, compressing_clusters_id_),
  };
  CompressedElements_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CompressedElements_descriptor_,
      CompressedElements::default_instance_,
      CompressedElements_offsets_,
      -1,
      -1,
      -1,
      sizeof(CompressedElements),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedElements, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedElements, _is_default_instance_));
  SerializedCompressedElements_descriptor_ = file->message_type(9);
  static const int SerializedCompressedElements_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedCompressedElements, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedCompressedElements, compressing_clusters_id_),
  };
  SerializedCompressedElements_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SerializedCompressedElements_descriptor_,
      SerializedCompressedElements::default_instance_,
      SerializedCompressedElements_offsets_,
      -1,
      -1,
      -1,
      sizeof(SerializedCompressedElements),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedCompressedElements, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedCompressedElements, _is_default_instance_));
  CompressedElementsMap_descriptor_ = file->message_type(10);
  static const int CompressedElementsMap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedElementsMap, compressed_element_),
  };
  CompressedElementsMap_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CompressedElementsMap_descriptor_,
      CompressedElementsMap::default_instance_,
      CompressedElementsMap_offsets_,
      -1,
      -1,
      -1,
      sizeof(CompressedElementsMap),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedElementsMap, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedElementsMap, _is_default_instance_));
  CompressedElementsMap_CompressedElementEntry_descriptor_ = CompressedElementsMap_descriptor_->nested_type(0);
  SimiliaSearchRequest_descriptor_ = file->message_type(11);
  static const int SimiliaSearchRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimiliaSearchRequest, image_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimiliaSearchRequest, num_nearest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimiliaSearchRequest, features_),
  };
  SimiliaSearchRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SimiliaSearchRequest_descriptor_,
      SimiliaSearchRequest::default_instance_,
      SimiliaSearchRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SimiliaSearchRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimiliaSearchRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimiliaSearchRequest, _is_default_instance_));
  SimiliaSearchResponse_descriptor_ = file->message_type(12);
  static const int SimiliaSearchResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimiliaSearchResponse, image_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimiliaSearchResponse, processing_time_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimiliaSearchResponse, squared_distance_),
  };
  SimiliaSearchResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SimiliaSearchResponse_descriptor_,
      SimiliaSearchResponse::default_instance_,
      SimiliaSearchResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SimiliaSearchResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimiliaSearchResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimiliaSearchResponse, _is_default_instance_));
  MultiIndexAddRequest_descriptor_ = file->message_type(13);
  static const int MultiIndexAddRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexAddRequest, image_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexAddRequest, indexing_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexAddRequest, compressing_ids_),
  };
  MultiIndexAddRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MultiIndexAddRequest_descriptor_,
      MultiIndexAddRequest::default_instance_,
      MultiIndexAddRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(MultiIndexAddRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexAddRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexAddRequest, _is_default_instance_));
  MultiIndexAddResponse_descriptor_ = file->message_type(14);
  static const int MultiIndexAddResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexAddResponse, processing_time_ms_),
  };
  MultiIndexAddResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MultiIndexAddResponse_descriptor_,
      MultiIndexAddResponse::default_instance_,
      MultiIndexAddResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(MultiIndexAddResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexAddResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexAddResponse, _is_default_instance_));
  MultiIndexGetRequest_descriptor_ = file->message_type(15);
  static const int MultiIndexGetRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexGetRequest, indexing_ids_),
  };
  MultiIndexGetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MultiIndexGetRequest_descriptor_,
      MultiIndexGetRequest::default_instance_,
      MultiIndexGetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(MultiIndexGetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexGetRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexGetRequest, _is_default_instance_));
  MultiIndexGetResponse_descriptor_ = file->message_type(16);
  static const int MultiIndexGetResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexGetResponse, processing_time_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexGetResponse, compressed_elements_),
  };
  MultiIndexGetResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MultiIndexGetResponse_descriptor_,
      MultiIndexGetResponse::default_instance_,
      MultiIndexGetResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(MultiIndexGetResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexGetResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexGetResponse, _is_default_instance_));
  MultiIndexMultiGetRequest_descriptor_ = file->message_type(17);
  static const int MultiIndexMultiGetRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexMultiGetRequest, indexing_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexMultiGetRequest, count_limit_),
  };
  MultiIndexMultiGetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MultiIndexMultiGetRequest_descriptor_,
      MultiIndexMultiGetRequest::default_instance_,
      MultiIndexMultiGetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(MultiIndexMultiGetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexMultiGetRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexMultiGetRequest, _is_default_instance_));
  MultiIndexMultiGetResponse_descriptor_ = file->message_type(18);
  static const int MultiIndexMultiGetResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexMultiGetResponse, processing_time_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexMultiGetResponse, compressed_elements_),
  };
  MultiIndexMultiGetResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MultiIndexMultiGetResponse_descriptor_,
      MultiIndexMultiGetResponse::default_instance_,
      MultiIndexMultiGetResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(MultiIndexMultiGetResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexMultiGetResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexMultiGetResponse, _is_default_instance_));
  MultiIndexMultiCountRequest_descriptor_ = file->message_type(19);
  static const int MultiIndexMultiCountRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexMultiCountRequest, indexing_ids_),
  };
  MultiIndexMultiCountRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MultiIndexMultiCountRequest_descriptor_,
      MultiIndexMultiCountRequest::default_instance_,
      MultiIndexMultiCountRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(MultiIndexMultiCountRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexMultiCountRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexMultiCountRequest, _is_default_instance_));
  MultiIndexMultiCountResponse_descriptor_ = file->message_type(20);
  static const int MultiIndexMultiCountResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexMultiCountResponse, processing_time_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexMultiCountResponse, count_),
  };
  MultiIndexMultiCountResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MultiIndexMultiCountResponse_descriptor_,
      MultiIndexMultiCountResponse::default_instance_,
      MultiIndexMultiCountResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(MultiIndexMultiCountResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexMultiCountResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexMultiCountResponse, _is_default_instance_));
  MultiIndexMultiAddRequest_descriptor_ = file->message_type(21);
  static const int MultiIndexMultiAddRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexMultiAddRequest, multi_index_add_request_),
  };
  MultiIndexMultiAddRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MultiIndexMultiAddRequest_descriptor_,
      MultiIndexMultiAddRequest::default_instance_,
      MultiIndexMultiAddRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(MultiIndexMultiAddRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexMultiAddRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexMultiAddRequest, _is_default_instance_));
  MultiIndexMultiAddResponse_descriptor_ = file->message_type(22);
  static const int MultiIndexMultiAddResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexMultiAddResponse, processing_time_ms_),
  };
  MultiIndexMultiAddResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MultiIndexMultiAddResponse_descriptor_,
      MultiIndexMultiAddResponse::default_instance_,
      MultiIndexMultiAddResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(MultiIndexMultiAddResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexMultiAddResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexMultiAddResponse, _is_default_instance_));
  MultiIndexDeleteRequest_descriptor_ = file->message_type(23);
  static const int MultiIndexDeleteRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexDeleteRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexDeleteRequest, indexing_ids_),
  };
  MultiIndexDeleteRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MultiIndexDeleteRequest_descriptor_,
      MultiIndexDeleteRequest::default_instance_,
      MultiIndexDeleteRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(MultiIndexDeleteRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexDeleteRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexDeleteRequest, _is_default_instance_));
  MultiIndexDeleteResponse_descriptor_ = file->message_type(24);
  static const int MultiIndexDeleteResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexDeleteResponse, processing_time_ms_),
  };
  MultiIndexDeleteResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MultiIndexDeleteResponse_descriptor_,
      MultiIndexDeleteResponse::default_instance_,
      MultiIndexDeleteResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(MultiIndexDeleteResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexDeleteResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiIndexDeleteResponse, _is_default_instance_));
  QuantizationRequest_descriptor_ = file->message_type(25);
  static const int QuantizationRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuantizationRequest, features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuantizationRequest, image_id_),
  };
  QuantizationRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QuantizationRequest_descriptor_,
      QuantizationRequest::default_instance_,
      QuantizationRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(QuantizationRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuantizationRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuantizationRequest, _is_default_instance_));
  QuantizationResponse_descriptor_ = file->message_type(26);
  static const int QuantizationResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuantizationResponse, processing_time_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuantizationResponse, compressing_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuantizationResponse, indexing_ids_),
  };
  QuantizationResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QuantizationResponse_descriptor_,
      QuantizationResponse::default_instance_,
      QuantizationResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(QuantizationResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuantizationResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuantizationResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_similia_2fproto_2fsimilia_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FloatMatrix_descriptor_, &FloatMatrix::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Features_descriptor_, &Features::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CompressingClustersIds_descriptor_, &CompressingClustersIds::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IndexingClustersIds_descriptor_, &IndexingClustersIds::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CompressedElement_descriptor_, &CompressedElement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SerializedCompressedElement_descriptor_, &SerializedCompressedElement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CompressedElementsCombined_descriptor_, &CompressedElementsCombined::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SerializedCompressedElementsCombined_descriptor_, &SerializedCompressedElementsCombined::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CompressedElements_descriptor_, &CompressedElements::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SerializedCompressedElements_descriptor_, &SerializedCompressedElements::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CompressedElementsMap_descriptor_, &CompressedElementsMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        CompressedElementsMap_CompressedElementEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::similia::proto::CompressingClustersIds,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                CompressedElementsMap_CompressedElementEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SimiliaSearchRequest_descriptor_, &SimiliaSearchRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SimiliaSearchResponse_descriptor_, &SimiliaSearchResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MultiIndexAddRequest_descriptor_, &MultiIndexAddRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MultiIndexAddResponse_descriptor_, &MultiIndexAddResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MultiIndexGetRequest_descriptor_, &MultiIndexGetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MultiIndexGetResponse_descriptor_, &MultiIndexGetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MultiIndexMultiGetRequest_descriptor_, &MultiIndexMultiGetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MultiIndexMultiGetResponse_descriptor_, &MultiIndexMultiGetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MultiIndexMultiCountRequest_descriptor_, &MultiIndexMultiCountRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MultiIndexMultiCountResponse_descriptor_, &MultiIndexMultiCountResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MultiIndexMultiAddRequest_descriptor_, &MultiIndexMultiAddRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MultiIndexMultiAddResponse_descriptor_, &MultiIndexMultiAddResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MultiIndexDeleteRequest_descriptor_, &MultiIndexDeleteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MultiIndexDeleteResponse_descriptor_, &MultiIndexDeleteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QuantizationRequest_descriptor_, &QuantizationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QuantizationResponse_descriptor_, &QuantizationResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_similia_2fproto_2fsimilia_2eproto() {
  delete FloatMatrix::default_instance_;
  delete FloatMatrix_reflection_;
  delete Features::default_instance_;
  delete Features_reflection_;
  delete CompressingClustersIds::default_instance_;
  delete CompressingClustersIds_reflection_;
  delete IndexingClustersIds::default_instance_;
  delete IndexingClustersIds_reflection_;
  delete CompressedElement::default_instance_;
  delete CompressedElement_reflection_;
  delete SerializedCompressedElement::default_instance_;
  delete SerializedCompressedElement_reflection_;
  delete CompressedElementsCombined::default_instance_;
  delete CompressedElementsCombined_reflection_;
  delete SerializedCompressedElementsCombined::default_instance_;
  delete SerializedCompressedElementsCombined_reflection_;
  delete CompressedElements::default_instance_;
  delete CompressedElements_reflection_;
  delete SerializedCompressedElements::default_instance_;
  delete SerializedCompressedElements_reflection_;
  delete CompressedElementsMap::default_instance_;
  delete CompressedElementsMap_reflection_;
  delete SimiliaSearchRequest::default_instance_;
  delete SimiliaSearchRequest_reflection_;
  delete SimiliaSearchResponse::default_instance_;
  delete SimiliaSearchResponse_reflection_;
  delete MultiIndexAddRequest::default_instance_;
  delete MultiIndexAddRequest_reflection_;
  delete MultiIndexAddResponse::default_instance_;
  delete MultiIndexAddResponse_reflection_;
  delete MultiIndexGetRequest::default_instance_;
  delete MultiIndexGetRequest_reflection_;
  delete MultiIndexGetResponse::default_instance_;
  delete MultiIndexGetResponse_reflection_;
  delete MultiIndexMultiGetRequest::default_instance_;
  delete MultiIndexMultiGetRequest_reflection_;
  delete MultiIndexMultiGetResponse::default_instance_;
  delete MultiIndexMultiGetResponse_reflection_;
  delete MultiIndexMultiCountRequest::default_instance_;
  delete MultiIndexMultiCountRequest_reflection_;
  delete MultiIndexMultiCountResponse::default_instance_;
  delete MultiIndexMultiCountResponse_reflection_;
  delete MultiIndexMultiAddRequest::default_instance_;
  delete MultiIndexMultiAddRequest_reflection_;
  delete MultiIndexMultiAddResponse::default_instance_;
  delete MultiIndexMultiAddResponse_reflection_;
  delete MultiIndexDeleteRequest::default_instance_;
  delete MultiIndexDeleteRequest_reflection_;
  delete MultiIndexDeleteResponse::default_instance_;
  delete MultiIndexDeleteResponse_reflection_;
  delete QuantizationRequest::default_instance_;
  delete QuantizationRequest_reflection_;
  delete QuantizationResponse::default_instance_;
  delete QuantizationResponse_reflection_;
}

void protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033similia/proto/similia.proto\022\rsimilia.p"
    "roto\"B\n\013FloatMatrix\022\020\n\010num_rows\030\001 \001(\005\022\020\n"
    "\010num_cols\030\002 \001(\005\022\017\n\007element\030\003 \003(\002\"\033\n\010Feat"
    "ures\022\017\n\007element\030\001 \003(\002\"$\n\026CompressingClus"
    "tersIds\022\n\n\002id\030\001 \003(\005\"!\n\023IndexingClustersI"
    "ds\022\n\n\002id\030\001 \003(\005\"g\n\021CompressedElement\022\n\n\002i"
    "d\030\001 \001(\t\022F\n\027compressing_clusters_id\030\002 \001(\013"
    "2%.similia.proto.CompressingClustersIds\""
    "J\n\033SerializedCompressedElement\022\n\n\002id\030\001 \001"
    "(\t\022\037\n\027compressing_clusters_id\030\002 \001(\014\"Z\n\032C"
    "ompressedElementsCombined\022<\n\022compressed_"
    "element\030\001 \003(\0132 .similia.proto.Compressed"
    "Element\"n\n$SerializedCompressedElementsC"
    "ombined\022F\n\022compressed_element\030\001 \003(\0132*.si"
    "milia.proto.SerializedCompressedElement\""
    "h\n\022CompressedElements\022\n\n\002id\030\001 \003(\t\022F\n\027com"
    "pressing_clusters_id\030\002 \003(\0132%.similia.pro"
    "to.CompressingClustersIds\"K\n\034SerializedC"
    "ompressedElements\022\n\n\002id\030\001 \003(\t\022\037\n\027compres"
    "sing_clusters_id\030\002 \003(\014\"\321\001\n\025CompressedEle"
    "mentsMap\022W\n\022compressed_element\030\001 \003(\0132;.s"
    "imilia.proto.CompressedElementsMap.Compr"
    "essedElementEntry\032_\n\026CompressedElementEn"
    "try\022\013\n\003key\030\001 \001(\t\0224\n\005value\030\002 \001(\0132%.simili"
    "a.proto.CompressingClustersIds:\0028\001\"h\n\024Si"
    "miliaSearchRequest\022\020\n\010image_id\030\001 \001(\t\022\023\n\013"
    "num_nearest\030\002 \001(\005\022)\n\010features\030\003 \001(\0132\027.si"
    "milia.proto.Features\"_\n\025SimiliaSearchRes"
    "ponse\022\020\n\010image_id\030\001 \003(\t\022\032\n\022processing_ti"
    "me_ms\030\002 \001(\003\022\030\n\020squared_distance\030\003 \003(\001\"\242\001"
    "\n\024MultiIndexAddRequest\022\020\n\010image_id\030\001 \001(\t"
    "\0228\n\014indexing_ids\030\002 \001(\0132\".similia.proto.I"
    "ndexingClustersIds\022>\n\017compressing_ids\030\003 "
    "\001(\0132%.similia.proto.CompressingClustersI"
    "ds\"3\n\025MultiIndexAddResponse\022\032\n\022processin"
    "g_time_ms\030\002 \001(\003\"P\n\024MultiIndexGetRequest\022"
    "8\n\014indexing_ids\030\001 \001(\0132\".similia.proto.In"
    "dexingClustersIds\"P\n\025MultiIndexGetRespon"
    "se\022\032\n\022processing_time_ms\030\002 \001(\003\022\033\n\023compre"
    "ssed_elements\030\003 \001(\014\"j\n\031MultiIndexMultiGe"
    "tRequest\0228\n\014indexing_ids\030\001 \003(\0132\".similia"
    ".proto.IndexingClustersIds\022\023\n\013count_limi"
    "t\030\002 \001(\005\"U\n\032MultiIndexMultiGetResponse\022\032\n"
    "\022processing_time_ms\030\002 \001(\003\022\033\n\023compressed_"
    "elements\030\003 \003(\014\"W\n\033MultiIndexMultiCountRe"
    "quest\0228\n\014indexing_ids\030\001 \003(\0132\".similia.pr"
    "oto.IndexingClustersIds\"I\n\034MultiIndexMul"
    "tiCountResponse\022\032\n\022processing_time_ms\030\002 "
    "\001(\003\022\r\n\005count\030\003 \003(\005\"a\n\031MultiIndexMultiAdd"
    "Request\022D\n\027multi_index_add_request\030\001 \003(\013"
    "2#.similia.proto.MultiIndexAddRequest\"8\n"
    "\032MultiIndexMultiAddResponse\022\032\n\022processin"
    "g_time_ms\030\002 \001(\003\"_\n\027MultiIndexDeleteReque"
    "st\022\n\n\002id\030\001 \001(\t\0228\n\014indexing_ids\030\002 \001(\0132\".s"
    "imilia.proto.IndexingClustersIds\"6\n\030Mult"
    "iIndexDeleteResponse\022\032\n\022processing_time_"
    "ms\030\002 \001(\003\"R\n\023QuantizationRequest\022)\n\010featu"
    "res\030\001 \001(\0132\027.similia.proto.Features\022\020\n\010im"
    "age_id\030\002 \001(\t\"\254\001\n\024QuantizationResponse\022\032\n"
    "\022processing_time_ms\030\002 \001(\003\022>\n\017compressing"
    "_ids\030\003 \001(\0132%.similia.proto.CompressingCl"
    "ustersIds\0228\n\014indexing_ids\030\004 \001(\0132\".simili"
    "a.proto.IndexingClustersIds2g\n\007Similia\022\\"
    "\n\rSimiliaSearch\022#.similia.proto.SimiliaS"
    "earchRequest\032$.similia.proto.SimiliaSear"
    "chResponse\"\0002\310\004\n\022InvertedMultiIndex\022R\n\003A"
    "dd\022#.similia.proto.MultiIndexAddRequest\032"
    "$.similia.proto.MultiIndexAddResponse\"\000\022"
    "R\n\003Get\022#.similia.proto.MultiIndexGetRequ"
    "est\032$.similia.proto.MultiIndexGetRespons"
    "e\"\000\022[\n\006Delete\022&.similia.proto.MultiIndex"
    "DeleteRequest\032\'.similia.proto.MultiIndex"
    "DeleteResponse\"\000\022a\n\010MultiGet\022(.similia.p"
    "roto.MultiIndexMultiGetRequest\032).similia"
    ".proto.MultiIndexMultiGetResponse\"\000\022g\n\nM"
    "ultiCount\022*.similia.proto.MultiIndexMult"
    "iCountRequest\032+.similia.proto.MultiIndex"
    "MultiCountResponse\"\000\022a\n\010MultiAdd\022(.simil"
    "ia.proto.MultiIndexMultiAddRequest\032).sim"
    "ilia.proto.MultiIndexMultiAddResponse\"\0002"
    "n\n\025MultiProductQuantizer\022U\n\010Quantize\022\".s"
    "imilia.proto.QuantizationRequest\032#.simil"
    "ia.proto.QuantizationResponse\"\000B&\n\026io.le"
    "fty.similia.protoB\014SimiliaProtob\006proto3", 3359);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "similia/proto/similia.proto", &protobuf_RegisterTypes);
  FloatMatrix::default_instance_ = new FloatMatrix();
  Features::default_instance_ = new Features();
  CompressingClustersIds::default_instance_ = new CompressingClustersIds();
  IndexingClustersIds::default_instance_ = new IndexingClustersIds();
  CompressedElement::default_instance_ = new CompressedElement();
  SerializedCompressedElement::default_instance_ = new SerializedCompressedElement();
  CompressedElementsCombined::default_instance_ = new CompressedElementsCombined();
  SerializedCompressedElementsCombined::default_instance_ = new SerializedCompressedElementsCombined();
  CompressedElements::default_instance_ = new CompressedElements();
  SerializedCompressedElements::default_instance_ = new SerializedCompressedElements();
  CompressedElementsMap::default_instance_ = new CompressedElementsMap();
  SimiliaSearchRequest::default_instance_ = new SimiliaSearchRequest();
  SimiliaSearchResponse::default_instance_ = new SimiliaSearchResponse();
  MultiIndexAddRequest::default_instance_ = new MultiIndexAddRequest();
  MultiIndexAddResponse::default_instance_ = new MultiIndexAddResponse();
  MultiIndexGetRequest::default_instance_ = new MultiIndexGetRequest();
  MultiIndexGetResponse::default_instance_ = new MultiIndexGetResponse();
  MultiIndexMultiGetRequest::default_instance_ = new MultiIndexMultiGetRequest();
  MultiIndexMultiGetResponse::default_instance_ = new MultiIndexMultiGetResponse();
  MultiIndexMultiCountRequest::default_instance_ = new MultiIndexMultiCountRequest();
  MultiIndexMultiCountResponse::default_instance_ = new MultiIndexMultiCountResponse();
  MultiIndexMultiAddRequest::default_instance_ = new MultiIndexMultiAddRequest();
  MultiIndexMultiAddResponse::default_instance_ = new MultiIndexMultiAddResponse();
  MultiIndexDeleteRequest::default_instance_ = new MultiIndexDeleteRequest();
  MultiIndexDeleteResponse::default_instance_ = new MultiIndexDeleteResponse();
  QuantizationRequest::default_instance_ = new QuantizationRequest();
  QuantizationResponse::default_instance_ = new QuantizationResponse();
  FloatMatrix::default_instance_->InitAsDefaultInstance();
  Features::default_instance_->InitAsDefaultInstance();
  CompressingClustersIds::default_instance_->InitAsDefaultInstance();
  IndexingClustersIds::default_instance_->InitAsDefaultInstance();
  CompressedElement::default_instance_->InitAsDefaultInstance();
  SerializedCompressedElement::default_instance_->InitAsDefaultInstance();
  CompressedElementsCombined::default_instance_->InitAsDefaultInstance();
  SerializedCompressedElementsCombined::default_instance_->InitAsDefaultInstance();
  CompressedElements::default_instance_->InitAsDefaultInstance();
  SerializedCompressedElements::default_instance_->InitAsDefaultInstance();
  CompressedElementsMap::default_instance_->InitAsDefaultInstance();
  SimiliaSearchRequest::default_instance_->InitAsDefaultInstance();
  SimiliaSearchResponse::default_instance_->InitAsDefaultInstance();
  MultiIndexAddRequest::default_instance_->InitAsDefaultInstance();
  MultiIndexAddResponse::default_instance_->InitAsDefaultInstance();
  MultiIndexGetRequest::default_instance_->InitAsDefaultInstance();
  MultiIndexGetResponse::default_instance_->InitAsDefaultInstance();
  MultiIndexMultiGetRequest::default_instance_->InitAsDefaultInstance();
  MultiIndexMultiGetResponse::default_instance_->InitAsDefaultInstance();
  MultiIndexMultiCountRequest::default_instance_->InitAsDefaultInstance();
  MultiIndexMultiCountResponse::default_instance_->InitAsDefaultInstance();
  MultiIndexMultiAddRequest::default_instance_->InitAsDefaultInstance();
  MultiIndexMultiAddResponse::default_instance_->InitAsDefaultInstance();
  MultiIndexDeleteRequest::default_instance_->InitAsDefaultInstance();
  MultiIndexDeleteResponse::default_instance_->InitAsDefaultInstance();
  QuantizationRequest::default_instance_->InitAsDefaultInstance();
  QuantizationResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_similia_2fproto_2fsimilia_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_similia_2fproto_2fsimilia_2eproto {
  StaticDescriptorInitializer_similia_2fproto_2fsimilia_2eproto() {
    protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto();
  }
} static_descriptor_initializer_similia_2fproto_2fsimilia_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FloatMatrix::kNumRowsFieldNumber;
const int FloatMatrix::kNumColsFieldNumber;
const int FloatMatrix::kElementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FloatMatrix::FloatMatrix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:similia.proto.FloatMatrix)
}

void FloatMatrix::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FloatMatrix::FloatMatrix(const FloatMatrix& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:similia.proto.FloatMatrix)
}

void FloatMatrix::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  num_rows_ = 0;
  num_cols_ = 0;
}

FloatMatrix::~FloatMatrix() {
  // @@protoc_insertion_point(destructor:similia.proto.FloatMatrix)
  SharedDtor();
}

void FloatMatrix::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FloatMatrix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloatMatrix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloatMatrix_descriptor_;
}

const FloatMatrix& FloatMatrix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto();
  return *default_instance_;
}

FloatMatrix* FloatMatrix::default_instance_ = NULL;

FloatMatrix* FloatMatrix::New(::google::protobuf::Arena* arena) const {
  FloatMatrix* n = new FloatMatrix;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FloatMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:similia.proto.FloatMatrix)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FloatMatrix, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FloatMatrix*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(num_rows_, num_cols_);

#undef ZR_HELPER_
#undef ZR_

  element_.Clear();
}

bool FloatMatrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:similia.proto.FloatMatrix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_rows = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_rows_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_cols;
        break;
      }

      // optional int32 num_cols = 2;
      case 2: {
        if (tag == 16) {
         parse_num_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_cols_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_element;
        break;
      }

      // repeated float element = 3;
      case 3: {
        if (tag == 26) {
         parse_element:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_element())));
        } else if (tag == 29) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_element())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:similia.proto.FloatMatrix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:similia.proto.FloatMatrix)
  return false;
#undef DO_
}

void FloatMatrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:similia.proto.FloatMatrix)
  // optional int32 num_rows = 1;
  if (this->num_rows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_rows(), output);
  }

  // optional int32 num_cols = 2;
  if (this->num_cols() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_cols(), output);
  }

  // repeated float element = 3;
  if (this->element_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_element_cached_byte_size_);
  }
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->element(i), output);
  }

  // @@protoc_insertion_point(serialize_end:similia.proto.FloatMatrix)
}

::google::protobuf::uint8* FloatMatrix::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:similia.proto.FloatMatrix)
  // optional int32 num_rows = 1;
  if (this->num_rows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_rows(), target);
  }

  // optional int32 num_cols = 2;
  if (this->num_cols() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_cols(), target);
  }

  // repeated float element = 3;
  if (this->element_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _element_cached_byte_size_, target);
  }
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->element(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:similia.proto.FloatMatrix)
  return target;
}

int FloatMatrix::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:similia.proto.FloatMatrix)
  int total_size = 0;

  // optional int32 num_rows = 1;
  if (this->num_rows() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_rows());
  }

  // optional int32 num_cols = 2;
  if (this->num_cols() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_cols());
  }

  // repeated float element = 3;
  {
    int data_size = 0;
    data_size = 4 * this->element_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _element_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloatMatrix::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:similia.proto.FloatMatrix)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FloatMatrix* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FloatMatrix>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:similia.proto.FloatMatrix)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:similia.proto.FloatMatrix)
    MergeFrom(*source);
  }
}

void FloatMatrix::MergeFrom(const FloatMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:similia.proto.FloatMatrix)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  element_.MergeFrom(from.element_);
  if (from.num_rows() != 0) {
    set_num_rows(from.num_rows());
  }
  if (from.num_cols() != 0) {
    set_num_cols(from.num_cols());
  }
}

void FloatMatrix::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:similia.proto.FloatMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatMatrix::CopyFrom(const FloatMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:similia.proto.FloatMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatMatrix::IsInitialized() const {

  return true;
}

void FloatMatrix::Swap(FloatMatrix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FloatMatrix::InternalSwap(FloatMatrix* other) {
  std::swap(num_rows_, other->num_rows_);
  std::swap(num_cols_, other->num_cols_);
  element_.UnsafeArenaSwap(&other->element_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FloatMatrix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloatMatrix_descriptor_;
  metadata.reflection = FloatMatrix_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FloatMatrix

// optional int32 num_rows = 1;
void FloatMatrix::clear_num_rows() {
  num_rows_ = 0;
}
 ::google::protobuf::int32 FloatMatrix::num_rows() const {
  // @@protoc_insertion_point(field_get:similia.proto.FloatMatrix.num_rows)
  return num_rows_;
}
 void FloatMatrix::set_num_rows(::google::protobuf::int32 value) {
  
  num_rows_ = value;
  // @@protoc_insertion_point(field_set:similia.proto.FloatMatrix.num_rows)
}

// optional int32 num_cols = 2;
void FloatMatrix::clear_num_cols() {
  num_cols_ = 0;
}
 ::google::protobuf::int32 FloatMatrix::num_cols() const {
  // @@protoc_insertion_point(field_get:similia.proto.FloatMatrix.num_cols)
  return num_cols_;
}
 void FloatMatrix::set_num_cols(::google::protobuf::int32 value) {
  
  num_cols_ = value;
  // @@protoc_insertion_point(field_set:similia.proto.FloatMatrix.num_cols)
}

// repeated float element = 3;
int FloatMatrix::element_size() const {
  return element_.size();
}
void FloatMatrix::clear_element() {
  element_.Clear();
}
 float FloatMatrix::element(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.FloatMatrix.element)
  return element_.Get(index);
}
 void FloatMatrix::set_element(int index, float value) {
  element_.Set(index, value);
  // @@protoc_insertion_point(field_set:similia.proto.FloatMatrix.element)
}
 void FloatMatrix::add_element(float value) {
  element_.Add(value);
  // @@protoc_insertion_point(field_add:similia.proto.FloatMatrix.element)
}
 const ::google::protobuf::RepeatedField< float >&
FloatMatrix::element() const {
  // @@protoc_insertion_point(field_list:similia.proto.FloatMatrix.element)
  return element_;
}
 ::google::protobuf::RepeatedField< float >*
FloatMatrix::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.FloatMatrix.element)
  return &element_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Features::kElementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Features::Features()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:similia.proto.Features)
}

void Features::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Features::Features(const Features& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:similia.proto.Features)
}

void Features::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Features::~Features() {
  // @@protoc_insertion_point(destructor:similia.proto.Features)
  SharedDtor();
}

void Features::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Features::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Features::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Features_descriptor_;
}

const Features& Features::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto();
  return *default_instance_;
}

Features* Features::default_instance_ = NULL;

Features* Features::New(::google::protobuf::Arena* arena) const {
  Features* n = new Features;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Features::Clear() {
// @@protoc_insertion_point(message_clear_start:similia.proto.Features)
  element_.Clear();
}

bool Features::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:similia.proto.Features)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float element = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_element())));
        } else if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10, input, this->mutable_element())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:similia.proto.Features)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:similia.proto.Features)
  return false;
#undef DO_
}

void Features::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:similia.proto.Features)
  // repeated float element = 1;
  if (this->element_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_element_cached_byte_size_);
  }
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->element(i), output);
  }

  // @@protoc_insertion_point(serialize_end:similia.proto.Features)
}

::google::protobuf::uint8* Features::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:similia.proto.Features)
  // repeated float element = 1;
  if (this->element_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _element_cached_byte_size_, target);
  }
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->element(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:similia.proto.Features)
  return target;
}

int Features::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:similia.proto.Features)
  int total_size = 0;

  // repeated float element = 1;
  {
    int data_size = 0;
    data_size = 4 * this->element_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _element_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Features::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:similia.proto.Features)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Features* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Features>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:similia.proto.Features)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:similia.proto.Features)
    MergeFrom(*source);
  }
}

void Features::MergeFrom(const Features& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:similia.proto.Features)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  element_.MergeFrom(from.element_);
}

void Features::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:similia.proto.Features)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Features::CopyFrom(const Features& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:similia.proto.Features)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Features::IsInitialized() const {

  return true;
}

void Features::Swap(Features* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Features::InternalSwap(Features* other) {
  element_.UnsafeArenaSwap(&other->element_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Features::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Features_descriptor_;
  metadata.reflection = Features_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Features

// repeated float element = 1;
int Features::element_size() const {
  return element_.size();
}
void Features::clear_element() {
  element_.Clear();
}
 float Features::element(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.Features.element)
  return element_.Get(index);
}
 void Features::set_element(int index, float value) {
  element_.Set(index, value);
  // @@protoc_insertion_point(field_set:similia.proto.Features.element)
}
 void Features::add_element(float value) {
  element_.Add(value);
  // @@protoc_insertion_point(field_add:similia.proto.Features.element)
}
 const ::google::protobuf::RepeatedField< float >&
Features::element() const {
  // @@protoc_insertion_point(field_list:similia.proto.Features.element)
  return element_;
}
 ::google::protobuf::RepeatedField< float >*
Features::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.Features.element)
  return &element_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompressingClustersIds::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompressingClustersIds::CompressingClustersIds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:similia.proto.CompressingClustersIds)
}

void CompressingClustersIds::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CompressingClustersIds::CompressingClustersIds(const CompressingClustersIds& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:similia.proto.CompressingClustersIds)
}

void CompressingClustersIds::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

CompressingClustersIds::~CompressingClustersIds() {
  // @@protoc_insertion_point(destructor:similia.proto.CompressingClustersIds)
  SharedDtor();
}

void CompressingClustersIds::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CompressingClustersIds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompressingClustersIds::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompressingClustersIds_descriptor_;
}

const CompressingClustersIds& CompressingClustersIds::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto();
  return *default_instance_;
}

CompressingClustersIds* CompressingClustersIds::default_instance_ = NULL;

CompressingClustersIds* CompressingClustersIds::New(::google::protobuf::Arena* arena) const {
  CompressingClustersIds* n = new CompressingClustersIds;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompressingClustersIds::Clear() {
// @@protoc_insertion_point(message_clear_start:similia.proto.CompressingClustersIds)
  id_.Clear();
}

bool CompressingClustersIds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:similia.proto.CompressingClustersIds)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 id = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:similia.proto.CompressingClustersIds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:similia.proto.CompressingClustersIds)
  return false;
#undef DO_
}

void CompressingClustersIds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:similia.proto.CompressingClustersIds)
  // repeated int32 id = 1;
  if (this->id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_id_cached_byte_size_);
  }
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->id(i), output);
  }

  // @@protoc_insertion_point(serialize_end:similia.proto.CompressingClustersIds)
}

::google::protobuf::uint8* CompressingClustersIds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:similia.proto.CompressingClustersIds)
  // repeated int32 id = 1;
  if (this->id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->id(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:similia.proto.CompressingClustersIds)
  return target;
}

int CompressingClustersIds::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:similia.proto.CompressingClustersIds)
  int total_size = 0;

  // repeated int32 id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompressingClustersIds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:similia.proto.CompressingClustersIds)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CompressingClustersIds* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CompressingClustersIds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:similia.proto.CompressingClustersIds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:similia.proto.CompressingClustersIds)
    MergeFrom(*source);
  }
}

void CompressingClustersIds::MergeFrom(const CompressingClustersIds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:similia.proto.CompressingClustersIds)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  id_.MergeFrom(from.id_);
}

void CompressingClustersIds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:similia.proto.CompressingClustersIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressingClustersIds::CopyFrom(const CompressingClustersIds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:similia.proto.CompressingClustersIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressingClustersIds::IsInitialized() const {

  return true;
}

void CompressingClustersIds::Swap(CompressingClustersIds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompressingClustersIds::InternalSwap(CompressingClustersIds* other) {
  id_.UnsafeArenaSwap(&other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompressingClustersIds::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompressingClustersIds_descriptor_;
  metadata.reflection = CompressingClustersIds_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompressingClustersIds

// repeated int32 id = 1;
int CompressingClustersIds::id_size() const {
  return id_.size();
}
void CompressingClustersIds::clear_id() {
  id_.Clear();
}
 ::google::protobuf::int32 CompressingClustersIds::id(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.CompressingClustersIds.id)
  return id_.Get(index);
}
 void CompressingClustersIds::set_id(int index, ::google::protobuf::int32 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:similia.proto.CompressingClustersIds.id)
}
 void CompressingClustersIds::add_id(::google::protobuf::int32 value) {
  id_.Add(value);
  // @@protoc_insertion_point(field_add:similia.proto.CompressingClustersIds.id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CompressingClustersIds::id() const {
  // @@protoc_insertion_point(field_list:similia.proto.CompressingClustersIds.id)
  return id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CompressingClustersIds::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.CompressingClustersIds.id)
  return &id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndexingClustersIds::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndexingClustersIds::IndexingClustersIds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:similia.proto.IndexingClustersIds)
}

void IndexingClustersIds::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

IndexingClustersIds::IndexingClustersIds(const IndexingClustersIds& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:similia.proto.IndexingClustersIds)
}

void IndexingClustersIds::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

IndexingClustersIds::~IndexingClustersIds() {
  // @@protoc_insertion_point(destructor:similia.proto.IndexingClustersIds)
  SharedDtor();
}

void IndexingClustersIds::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndexingClustersIds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexingClustersIds::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexingClustersIds_descriptor_;
}

const IndexingClustersIds& IndexingClustersIds::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto();
  return *default_instance_;
}

IndexingClustersIds* IndexingClustersIds::default_instance_ = NULL;

IndexingClustersIds* IndexingClustersIds::New(::google::protobuf::Arena* arena) const {
  IndexingClustersIds* n = new IndexingClustersIds;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IndexingClustersIds::Clear() {
// @@protoc_insertion_point(message_clear_start:similia.proto.IndexingClustersIds)
  id_.Clear();
}

bool IndexingClustersIds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:similia.proto.IndexingClustersIds)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 id = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:similia.proto.IndexingClustersIds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:similia.proto.IndexingClustersIds)
  return false;
#undef DO_
}

void IndexingClustersIds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:similia.proto.IndexingClustersIds)
  // repeated int32 id = 1;
  if (this->id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_id_cached_byte_size_);
  }
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->id(i), output);
  }

  // @@protoc_insertion_point(serialize_end:similia.proto.IndexingClustersIds)
}

::google::protobuf::uint8* IndexingClustersIds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:similia.proto.IndexingClustersIds)
  // repeated int32 id = 1;
  if (this->id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->id(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:similia.proto.IndexingClustersIds)
  return target;
}

int IndexingClustersIds::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:similia.proto.IndexingClustersIds)
  int total_size = 0;

  // repeated int32 id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexingClustersIds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:similia.proto.IndexingClustersIds)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IndexingClustersIds* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IndexingClustersIds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:similia.proto.IndexingClustersIds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:similia.proto.IndexingClustersIds)
    MergeFrom(*source);
  }
}

void IndexingClustersIds::MergeFrom(const IndexingClustersIds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:similia.proto.IndexingClustersIds)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  id_.MergeFrom(from.id_);
}

void IndexingClustersIds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:similia.proto.IndexingClustersIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexingClustersIds::CopyFrom(const IndexingClustersIds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:similia.proto.IndexingClustersIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexingClustersIds::IsInitialized() const {

  return true;
}

void IndexingClustersIds::Swap(IndexingClustersIds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndexingClustersIds::InternalSwap(IndexingClustersIds* other) {
  id_.UnsafeArenaSwap(&other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IndexingClustersIds::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexingClustersIds_descriptor_;
  metadata.reflection = IndexingClustersIds_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IndexingClustersIds

// repeated int32 id = 1;
int IndexingClustersIds::id_size() const {
  return id_.size();
}
void IndexingClustersIds::clear_id() {
  id_.Clear();
}
 ::google::protobuf::int32 IndexingClustersIds::id(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.IndexingClustersIds.id)
  return id_.Get(index);
}
 void IndexingClustersIds::set_id(int index, ::google::protobuf::int32 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:similia.proto.IndexingClustersIds.id)
}
 void IndexingClustersIds::add_id(::google::protobuf::int32 value) {
  id_.Add(value);
  // @@protoc_insertion_point(field_add:similia.proto.IndexingClustersIds.id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
IndexingClustersIds::id() const {
  // @@protoc_insertion_point(field_list:similia.proto.IndexingClustersIds.id)
  return id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
IndexingClustersIds::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.IndexingClustersIds.id)
  return &id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompressedElement::kIdFieldNumber;
const int CompressedElement::kCompressingClustersIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompressedElement::CompressedElement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:similia.proto.CompressedElement)
}

void CompressedElement::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  compressing_clusters_id_ = const_cast< ::similia::proto::CompressingClustersIds*>(&::similia::proto::CompressingClustersIds::default_instance());
}

CompressedElement::CompressedElement(const CompressedElement& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:similia.proto.CompressedElement)
}

void CompressedElement::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  compressing_clusters_id_ = NULL;
}

CompressedElement::~CompressedElement() {
  // @@protoc_insertion_point(destructor:similia.proto.CompressedElement)
  SharedDtor();
}

void CompressedElement::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete compressing_clusters_id_;
  }
}

void CompressedElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompressedElement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompressedElement_descriptor_;
}

const CompressedElement& CompressedElement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto();
  return *default_instance_;
}

CompressedElement* CompressedElement::default_instance_ = NULL;

CompressedElement* CompressedElement::New(::google::protobuf::Arena* arena) const {
  CompressedElement* n = new CompressedElement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompressedElement::Clear() {
// @@protoc_insertion_point(message_clear_start:similia.proto.CompressedElement)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && compressing_clusters_id_ != NULL) delete compressing_clusters_id_;
  compressing_clusters_id_ = NULL;
}

bool CompressedElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:similia.proto.CompressedElement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "similia.proto.CompressedElement.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_compressing_clusters_id;
        break;
      }

      // optional .similia.proto.CompressingClustersIds compressing_clusters_id = 2;
      case 2: {
        if (tag == 18) {
         parse_compressing_clusters_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compressing_clusters_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:similia.proto.CompressedElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:similia.proto.CompressedElement)
  return false;
#undef DO_
}

void CompressedElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:similia.proto.CompressedElement)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "similia.proto.CompressedElement.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional .similia.proto.CompressingClustersIds compressing_clusters_id = 2;
  if (this->has_compressing_clusters_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->compressing_clusters_id_, output);
  }

  // @@protoc_insertion_point(serialize_end:similia.proto.CompressedElement)
}

::google::protobuf::uint8* CompressedElement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:similia.proto.CompressedElement)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "similia.proto.CompressedElement.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .similia.proto.CompressingClustersIds compressing_clusters_id = 2;
  if (this->has_compressing_clusters_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->compressing_clusters_id_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:similia.proto.CompressedElement)
  return target;
}

int CompressedElement::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:similia.proto.CompressedElement)
  int total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional .similia.proto.CompressingClustersIds compressing_clusters_id = 2;
  if (this->has_compressing_clusters_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->compressing_clusters_id_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompressedElement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:similia.proto.CompressedElement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CompressedElement* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CompressedElement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:similia.proto.CompressedElement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:similia.proto.CompressedElement)
    MergeFrom(*source);
  }
}

void CompressedElement::MergeFrom(const CompressedElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:similia.proto.CompressedElement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_compressing_clusters_id()) {
    mutable_compressing_clusters_id()->::similia::proto::CompressingClustersIds::MergeFrom(from.compressing_clusters_id());
  }
}

void CompressedElement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:similia.proto.CompressedElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressedElement::CopyFrom(const CompressedElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:similia.proto.CompressedElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedElement::IsInitialized() const {

  return true;
}

void CompressedElement::Swap(CompressedElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompressedElement::InternalSwap(CompressedElement* other) {
  id_.Swap(&other->id_);
  std::swap(compressing_clusters_id_, other->compressing_clusters_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompressedElement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompressedElement_descriptor_;
  metadata.reflection = CompressedElement_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompressedElement

// optional string id = 1;
void CompressedElement::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CompressedElement::id() const {
  // @@protoc_insertion_point(field_get:similia.proto.CompressedElement.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CompressedElement::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:similia.proto.CompressedElement.id)
}
 void CompressedElement::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:similia.proto.CompressedElement.id)
}
 void CompressedElement::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:similia.proto.CompressedElement.id)
}
 ::std::string* CompressedElement::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:similia.proto.CompressedElement.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CompressedElement::release_id() {
  // @@protoc_insertion_point(field_release:similia.proto.CompressedElement.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CompressedElement::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:similia.proto.CompressedElement.id)
}

// optional .similia.proto.CompressingClustersIds compressing_clusters_id = 2;
bool CompressedElement::has_compressing_clusters_id() const {
  return !_is_default_instance_ && compressing_clusters_id_ != NULL;
}
void CompressedElement::clear_compressing_clusters_id() {
  if (GetArenaNoVirtual() == NULL && compressing_clusters_id_ != NULL) delete compressing_clusters_id_;
  compressing_clusters_id_ = NULL;
}
const ::similia::proto::CompressingClustersIds& CompressedElement::compressing_clusters_id() const {
  // @@protoc_insertion_point(field_get:similia.proto.CompressedElement.compressing_clusters_id)
  return compressing_clusters_id_ != NULL ? *compressing_clusters_id_ : *default_instance_->compressing_clusters_id_;
}
::similia::proto::CompressingClustersIds* CompressedElement::mutable_compressing_clusters_id() {
  
  if (compressing_clusters_id_ == NULL) {
    compressing_clusters_id_ = new ::similia::proto::CompressingClustersIds;
  }
  // @@protoc_insertion_point(field_mutable:similia.proto.CompressedElement.compressing_clusters_id)
  return compressing_clusters_id_;
}
::similia::proto::CompressingClustersIds* CompressedElement::release_compressing_clusters_id() {
  // @@protoc_insertion_point(field_release:similia.proto.CompressedElement.compressing_clusters_id)
  
  ::similia::proto::CompressingClustersIds* temp = compressing_clusters_id_;
  compressing_clusters_id_ = NULL;
  return temp;
}
void CompressedElement::set_allocated_compressing_clusters_id(::similia::proto::CompressingClustersIds* compressing_clusters_id) {
  delete compressing_clusters_id_;
  compressing_clusters_id_ = compressing_clusters_id;
  if (compressing_clusters_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:similia.proto.CompressedElement.compressing_clusters_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializedCompressedElement::kIdFieldNumber;
const int SerializedCompressedElement::kCompressingClustersIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializedCompressedElement::SerializedCompressedElement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:similia.proto.SerializedCompressedElement)
}

void SerializedCompressedElement::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SerializedCompressedElement::SerializedCompressedElement(const SerializedCompressedElement& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:similia.proto.SerializedCompressedElement)
}

void SerializedCompressedElement::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  compressing_clusters_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SerializedCompressedElement::~SerializedCompressedElement() {
  // @@protoc_insertion_point(destructor:similia.proto.SerializedCompressedElement)
  SharedDtor();
}

void SerializedCompressedElement::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  compressing_clusters_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SerializedCompressedElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializedCompressedElement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SerializedCompressedElement_descriptor_;
}

const SerializedCompressedElement& SerializedCompressedElement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto();
  return *default_instance_;
}

SerializedCompressedElement* SerializedCompressedElement::default_instance_ = NULL;

SerializedCompressedElement* SerializedCompressedElement::New(::google::protobuf::Arena* arena) const {
  SerializedCompressedElement* n = new SerializedCompressedElement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerializedCompressedElement::Clear() {
// @@protoc_insertion_point(message_clear_start:similia.proto.SerializedCompressedElement)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  compressing_clusters_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SerializedCompressedElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:similia.proto.SerializedCompressedElement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "similia.proto.SerializedCompressedElement.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_compressing_clusters_id;
        break;
      }

      // optional bytes compressing_clusters_id = 2;
      case 2: {
        if (tag == 18) {
         parse_compressing_clusters_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_compressing_clusters_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:similia.proto.SerializedCompressedElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:similia.proto.SerializedCompressedElement)
  return false;
#undef DO_
}

void SerializedCompressedElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:similia.proto.SerializedCompressedElement)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "similia.proto.SerializedCompressedElement.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional bytes compressing_clusters_id = 2;
  if (this->compressing_clusters_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->compressing_clusters_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:similia.proto.SerializedCompressedElement)
}

::google::protobuf::uint8* SerializedCompressedElement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:similia.proto.SerializedCompressedElement)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "similia.proto.SerializedCompressedElement.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional bytes compressing_clusters_id = 2;
  if (this->compressing_clusters_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->compressing_clusters_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:similia.proto.SerializedCompressedElement)
  return target;
}

int SerializedCompressedElement::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:similia.proto.SerializedCompressedElement)
  int total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional bytes compressing_clusters_id = 2;
  if (this->compressing_clusters_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->compressing_clusters_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializedCompressedElement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:similia.proto.SerializedCompressedElement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SerializedCompressedElement* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SerializedCompressedElement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:similia.proto.SerializedCompressedElement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:similia.proto.SerializedCompressedElement)
    MergeFrom(*source);
  }
}

void SerializedCompressedElement::MergeFrom(const SerializedCompressedElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:similia.proto.SerializedCompressedElement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.compressing_clusters_id().size() > 0) {

    compressing_clusters_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.compressing_clusters_id_);
  }
}

void SerializedCompressedElement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:similia.proto.SerializedCompressedElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedCompressedElement::CopyFrom(const SerializedCompressedElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:similia.proto.SerializedCompressedElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedCompressedElement::IsInitialized() const {

  return true;
}

void SerializedCompressedElement::Swap(SerializedCompressedElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializedCompressedElement::InternalSwap(SerializedCompressedElement* other) {
  id_.Swap(&other->id_);
  compressing_clusters_id_.Swap(&other->compressing_clusters_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerializedCompressedElement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SerializedCompressedElement_descriptor_;
  metadata.reflection = SerializedCompressedElement_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerializedCompressedElement

// optional string id = 1;
void SerializedCompressedElement::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SerializedCompressedElement::id() const {
  // @@protoc_insertion_point(field_get:similia.proto.SerializedCompressedElement.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SerializedCompressedElement::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:similia.proto.SerializedCompressedElement.id)
}
 void SerializedCompressedElement::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:similia.proto.SerializedCompressedElement.id)
}
 void SerializedCompressedElement::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:similia.proto.SerializedCompressedElement.id)
}
 ::std::string* SerializedCompressedElement::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:similia.proto.SerializedCompressedElement.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SerializedCompressedElement::release_id() {
  // @@protoc_insertion_point(field_release:similia.proto.SerializedCompressedElement.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SerializedCompressedElement::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:similia.proto.SerializedCompressedElement.id)
}

// optional bytes compressing_clusters_id = 2;
void SerializedCompressedElement::clear_compressing_clusters_id() {
  compressing_clusters_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SerializedCompressedElement::compressing_clusters_id() const {
  // @@protoc_insertion_point(field_get:similia.proto.SerializedCompressedElement.compressing_clusters_id)
  return compressing_clusters_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SerializedCompressedElement::set_compressing_clusters_id(const ::std::string& value) {
  
  compressing_clusters_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:similia.proto.SerializedCompressedElement.compressing_clusters_id)
}
 void SerializedCompressedElement::set_compressing_clusters_id(const char* value) {
  
  compressing_clusters_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:similia.proto.SerializedCompressedElement.compressing_clusters_id)
}
 void SerializedCompressedElement::set_compressing_clusters_id(const void* value, size_t size) {
  
  compressing_clusters_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:similia.proto.SerializedCompressedElement.compressing_clusters_id)
}
 ::std::string* SerializedCompressedElement::mutable_compressing_clusters_id() {
  
  // @@protoc_insertion_point(field_mutable:similia.proto.SerializedCompressedElement.compressing_clusters_id)
  return compressing_clusters_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SerializedCompressedElement::release_compressing_clusters_id() {
  // @@protoc_insertion_point(field_release:similia.proto.SerializedCompressedElement.compressing_clusters_id)
  
  return compressing_clusters_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SerializedCompressedElement::set_allocated_compressing_clusters_id(::std::string* compressing_clusters_id) {
  if (compressing_clusters_id != NULL) {
    
  } else {
    
  }
  compressing_clusters_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), compressing_clusters_id);
  // @@protoc_insertion_point(field_set_allocated:similia.proto.SerializedCompressedElement.compressing_clusters_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompressedElementsCombined::kCompressedElementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompressedElementsCombined::CompressedElementsCombined()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:similia.proto.CompressedElementsCombined)
}

void CompressedElementsCombined::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CompressedElementsCombined::CompressedElementsCombined(const CompressedElementsCombined& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:similia.proto.CompressedElementsCombined)
}

void CompressedElementsCombined::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

CompressedElementsCombined::~CompressedElementsCombined() {
  // @@protoc_insertion_point(destructor:similia.proto.CompressedElementsCombined)
  SharedDtor();
}

void CompressedElementsCombined::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CompressedElementsCombined::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompressedElementsCombined::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompressedElementsCombined_descriptor_;
}

const CompressedElementsCombined& CompressedElementsCombined::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto();
  return *default_instance_;
}

CompressedElementsCombined* CompressedElementsCombined::default_instance_ = NULL;

CompressedElementsCombined* CompressedElementsCombined::New(::google::protobuf::Arena* arena) const {
  CompressedElementsCombined* n = new CompressedElementsCombined;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompressedElementsCombined::Clear() {
// @@protoc_insertion_point(message_clear_start:similia.proto.CompressedElementsCombined)
  compressed_element_.Clear();
}

bool CompressedElementsCombined::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:similia.proto.CompressedElementsCombined)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .similia.proto.CompressedElement compressed_element = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_compressed_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_compressed_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_compressed_element;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:similia.proto.CompressedElementsCombined)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:similia.proto.CompressedElementsCombined)
  return false;
#undef DO_
}

void CompressedElementsCombined::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:similia.proto.CompressedElementsCombined)
  // repeated .similia.proto.CompressedElement compressed_element = 1;
  for (unsigned int i = 0, n = this->compressed_element_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->compressed_element(i), output);
  }

  // @@protoc_insertion_point(serialize_end:similia.proto.CompressedElementsCombined)
}

::google::protobuf::uint8* CompressedElementsCombined::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:similia.proto.CompressedElementsCombined)
  // repeated .similia.proto.CompressedElement compressed_element = 1;
  for (unsigned int i = 0, n = this->compressed_element_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->compressed_element(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:similia.proto.CompressedElementsCombined)
  return target;
}

int CompressedElementsCombined::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:similia.proto.CompressedElementsCombined)
  int total_size = 0;

  // repeated .similia.proto.CompressedElement compressed_element = 1;
  total_size += 1 * this->compressed_element_size();
  for (int i = 0; i < this->compressed_element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->compressed_element(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompressedElementsCombined::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:similia.proto.CompressedElementsCombined)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CompressedElementsCombined* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CompressedElementsCombined>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:similia.proto.CompressedElementsCombined)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:similia.proto.CompressedElementsCombined)
    MergeFrom(*source);
  }
}

void CompressedElementsCombined::MergeFrom(const CompressedElementsCombined& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:similia.proto.CompressedElementsCombined)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  compressed_element_.MergeFrom(from.compressed_element_);
}

void CompressedElementsCombined::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:similia.proto.CompressedElementsCombined)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressedElementsCombined::CopyFrom(const CompressedElementsCombined& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:similia.proto.CompressedElementsCombined)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedElementsCombined::IsInitialized() const {

  return true;
}

void CompressedElementsCombined::Swap(CompressedElementsCombined* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompressedElementsCombined::InternalSwap(CompressedElementsCombined* other) {
  compressed_element_.UnsafeArenaSwap(&other->compressed_element_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompressedElementsCombined::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompressedElementsCombined_descriptor_;
  metadata.reflection = CompressedElementsCombined_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompressedElementsCombined

// repeated .similia.proto.CompressedElement compressed_element = 1;
int CompressedElementsCombined::compressed_element_size() const {
  return compressed_element_.size();
}
void CompressedElementsCombined::clear_compressed_element() {
  compressed_element_.Clear();
}
const ::similia::proto::CompressedElement& CompressedElementsCombined::compressed_element(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.CompressedElementsCombined.compressed_element)
  return compressed_element_.Get(index);
}
::similia::proto::CompressedElement* CompressedElementsCombined::mutable_compressed_element(int index) {
  // @@protoc_insertion_point(field_mutable:similia.proto.CompressedElementsCombined.compressed_element)
  return compressed_element_.Mutable(index);
}
::similia::proto::CompressedElement* CompressedElementsCombined::add_compressed_element() {
  // @@protoc_insertion_point(field_add:similia.proto.CompressedElementsCombined.compressed_element)
  return compressed_element_.Add();
}
::google::protobuf::RepeatedPtrField< ::similia::proto::CompressedElement >*
CompressedElementsCombined::mutable_compressed_element() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.CompressedElementsCombined.compressed_element)
  return &compressed_element_;
}
const ::google::protobuf::RepeatedPtrField< ::similia::proto::CompressedElement >&
CompressedElementsCombined::compressed_element() const {
  // @@protoc_insertion_point(field_list:similia.proto.CompressedElementsCombined.compressed_element)
  return compressed_element_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializedCompressedElementsCombined::kCompressedElementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializedCompressedElementsCombined::SerializedCompressedElementsCombined()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:similia.proto.SerializedCompressedElementsCombined)
}

void SerializedCompressedElementsCombined::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SerializedCompressedElementsCombined::SerializedCompressedElementsCombined(const SerializedCompressedElementsCombined& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:similia.proto.SerializedCompressedElementsCombined)
}

void SerializedCompressedElementsCombined::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SerializedCompressedElementsCombined::~SerializedCompressedElementsCombined() {
  // @@protoc_insertion_point(destructor:similia.proto.SerializedCompressedElementsCombined)
  SharedDtor();
}

void SerializedCompressedElementsCombined::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SerializedCompressedElementsCombined::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializedCompressedElementsCombined::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SerializedCompressedElementsCombined_descriptor_;
}

const SerializedCompressedElementsCombined& SerializedCompressedElementsCombined::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto();
  return *default_instance_;
}

SerializedCompressedElementsCombined* SerializedCompressedElementsCombined::default_instance_ = NULL;

SerializedCompressedElementsCombined* SerializedCompressedElementsCombined::New(::google::protobuf::Arena* arena) const {
  SerializedCompressedElementsCombined* n = new SerializedCompressedElementsCombined;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerializedCompressedElementsCombined::Clear() {
// @@protoc_insertion_point(message_clear_start:similia.proto.SerializedCompressedElementsCombined)
  compressed_element_.Clear();
}

bool SerializedCompressedElementsCombined::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:similia.proto.SerializedCompressedElementsCombined)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .similia.proto.SerializedCompressedElement compressed_element = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_compressed_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_compressed_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_compressed_element;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:similia.proto.SerializedCompressedElementsCombined)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:similia.proto.SerializedCompressedElementsCombined)
  return false;
#undef DO_
}

void SerializedCompressedElementsCombined::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:similia.proto.SerializedCompressedElementsCombined)
  // repeated .similia.proto.SerializedCompressedElement compressed_element = 1;
  for (unsigned int i = 0, n = this->compressed_element_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->compressed_element(i), output);
  }

  // @@protoc_insertion_point(serialize_end:similia.proto.SerializedCompressedElementsCombined)
}

::google::protobuf::uint8* SerializedCompressedElementsCombined::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:similia.proto.SerializedCompressedElementsCombined)
  // repeated .similia.proto.SerializedCompressedElement compressed_element = 1;
  for (unsigned int i = 0, n = this->compressed_element_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->compressed_element(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:similia.proto.SerializedCompressedElementsCombined)
  return target;
}

int SerializedCompressedElementsCombined::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:similia.proto.SerializedCompressedElementsCombined)
  int total_size = 0;

  // repeated .similia.proto.SerializedCompressedElement compressed_element = 1;
  total_size += 1 * this->compressed_element_size();
  for (int i = 0; i < this->compressed_element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->compressed_element(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializedCompressedElementsCombined::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:similia.proto.SerializedCompressedElementsCombined)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SerializedCompressedElementsCombined* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SerializedCompressedElementsCombined>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:similia.proto.SerializedCompressedElementsCombined)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:similia.proto.SerializedCompressedElementsCombined)
    MergeFrom(*source);
  }
}

void SerializedCompressedElementsCombined::MergeFrom(const SerializedCompressedElementsCombined& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:similia.proto.SerializedCompressedElementsCombined)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  compressed_element_.MergeFrom(from.compressed_element_);
}

void SerializedCompressedElementsCombined::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:similia.proto.SerializedCompressedElementsCombined)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedCompressedElementsCombined::CopyFrom(const SerializedCompressedElementsCombined& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:similia.proto.SerializedCompressedElementsCombined)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedCompressedElementsCombined::IsInitialized() const {

  return true;
}

void SerializedCompressedElementsCombined::Swap(SerializedCompressedElementsCombined* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializedCompressedElementsCombined::InternalSwap(SerializedCompressedElementsCombined* other) {
  compressed_element_.UnsafeArenaSwap(&other->compressed_element_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerializedCompressedElementsCombined::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SerializedCompressedElementsCombined_descriptor_;
  metadata.reflection = SerializedCompressedElementsCombined_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerializedCompressedElementsCombined

// repeated .similia.proto.SerializedCompressedElement compressed_element = 1;
int SerializedCompressedElementsCombined::compressed_element_size() const {
  return compressed_element_.size();
}
void SerializedCompressedElementsCombined::clear_compressed_element() {
  compressed_element_.Clear();
}
const ::similia::proto::SerializedCompressedElement& SerializedCompressedElementsCombined::compressed_element(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.SerializedCompressedElementsCombined.compressed_element)
  return compressed_element_.Get(index);
}
::similia::proto::SerializedCompressedElement* SerializedCompressedElementsCombined::mutable_compressed_element(int index) {
  // @@protoc_insertion_point(field_mutable:similia.proto.SerializedCompressedElementsCombined.compressed_element)
  return compressed_element_.Mutable(index);
}
::similia::proto::SerializedCompressedElement* SerializedCompressedElementsCombined::add_compressed_element() {
  // @@protoc_insertion_point(field_add:similia.proto.SerializedCompressedElementsCombined.compressed_element)
  return compressed_element_.Add();
}
::google::protobuf::RepeatedPtrField< ::similia::proto::SerializedCompressedElement >*
SerializedCompressedElementsCombined::mutable_compressed_element() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.SerializedCompressedElementsCombined.compressed_element)
  return &compressed_element_;
}
const ::google::protobuf::RepeatedPtrField< ::similia::proto::SerializedCompressedElement >&
SerializedCompressedElementsCombined::compressed_element() const {
  // @@protoc_insertion_point(field_list:similia.proto.SerializedCompressedElementsCombined.compressed_element)
  return compressed_element_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompressedElements::kIdFieldNumber;
const int CompressedElements::kCompressingClustersIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompressedElements::CompressedElements()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:similia.proto.CompressedElements)
}

void CompressedElements::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CompressedElements::CompressedElements(const CompressedElements& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:similia.proto.CompressedElements)
}

void CompressedElements::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

CompressedElements::~CompressedElements() {
  // @@protoc_insertion_point(destructor:similia.proto.CompressedElements)
  SharedDtor();
}

void CompressedElements::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CompressedElements::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompressedElements::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompressedElements_descriptor_;
}

const CompressedElements& CompressedElements::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto();
  return *default_instance_;
}

CompressedElements* CompressedElements::default_instance_ = NULL;

CompressedElements* CompressedElements::New(::google::protobuf::Arena* arena) const {
  CompressedElements* n = new CompressedElements;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompressedElements::Clear() {
// @@protoc_insertion_point(message_clear_start:similia.proto.CompressedElements)
  id_.Clear();
  compressing_clusters_id_.Clear();
}

bool CompressedElements::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:similia.proto.CompressedElements)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string id = 1;
      case 1: {
        if (tag == 10) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id(this->id_size() - 1).data(),
            this->id(this->id_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "similia.proto.CompressedElements.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_id;
        if (input->ExpectTag(18)) goto parse_compressing_clusters_id;
        break;
      }

      // repeated .similia.proto.CompressingClustersIds compressing_clusters_id = 2;
      case 2: {
        if (tag == 18) {
         parse_compressing_clusters_id:
          DO_(input->IncrementRecursionDepth());
         parse_loop_compressing_clusters_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_compressing_clusters_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_compressing_clusters_id;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:similia.proto.CompressedElements)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:similia.proto.CompressedElements)
  return false;
#undef DO_
}

void CompressedElements::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:similia.proto.CompressedElements)
  // repeated string id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id(i).data(), this->id(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "similia.proto.CompressedElements.id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(i), output);
  }

  // repeated .similia.proto.CompressingClustersIds compressing_clusters_id = 2;
  for (unsigned int i = 0, n = this->compressing_clusters_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->compressing_clusters_id(i), output);
  }

  // @@protoc_insertion_point(serialize_end:similia.proto.CompressedElements)
}

::google::protobuf::uint8* CompressedElements::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:similia.proto.CompressedElements)
  // repeated string id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id(i).data(), this->id(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "similia.proto.CompressedElements.id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->id(i), target);
  }

  // repeated .similia.proto.CompressingClustersIds compressing_clusters_id = 2;
  for (unsigned int i = 0, n = this->compressing_clusters_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->compressing_clusters_id(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:similia.proto.CompressedElements)
  return target;
}

int CompressedElements::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:similia.proto.CompressedElements)
  int total_size = 0;

  // repeated string id = 1;
  total_size += 1 * this->id_size();
  for (int i = 0; i < this->id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->id(i));
  }

  // repeated .similia.proto.CompressingClustersIds compressing_clusters_id = 2;
  total_size += 1 * this->compressing_clusters_id_size();
  for (int i = 0; i < this->compressing_clusters_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->compressing_clusters_id(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompressedElements::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:similia.proto.CompressedElements)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CompressedElements* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CompressedElements>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:similia.proto.CompressedElements)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:similia.proto.CompressedElements)
    MergeFrom(*source);
  }
}

void CompressedElements::MergeFrom(const CompressedElements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:similia.proto.CompressedElements)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  id_.MergeFrom(from.id_);
  compressing_clusters_id_.MergeFrom(from.compressing_clusters_id_);
}

void CompressedElements::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:similia.proto.CompressedElements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressedElements::CopyFrom(const CompressedElements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:similia.proto.CompressedElements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedElements::IsInitialized() const {

  return true;
}

void CompressedElements::Swap(CompressedElements* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompressedElements::InternalSwap(CompressedElements* other) {
  id_.UnsafeArenaSwap(&other->id_);
  compressing_clusters_id_.UnsafeArenaSwap(&other->compressing_clusters_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompressedElements::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompressedElements_descriptor_;
  metadata.reflection = CompressedElements_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompressedElements

// repeated string id = 1;
int CompressedElements::id_size() const {
  return id_.size();
}
void CompressedElements::clear_id() {
  id_.Clear();
}
 const ::std::string& CompressedElements::id(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.CompressedElements.id)
  return id_.Get(index);
}
 ::std::string* CompressedElements::mutable_id(int index) {
  // @@protoc_insertion_point(field_mutable:similia.proto.CompressedElements.id)
  return id_.Mutable(index);
}
 void CompressedElements::set_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:similia.proto.CompressedElements.id)
  id_.Mutable(index)->assign(value);
}
 void CompressedElements::set_id(int index, const char* value) {
  id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:similia.proto.CompressedElements.id)
}
 void CompressedElements::set_id(int index, const char* value, size_t size) {
  id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:similia.proto.CompressedElements.id)
}
 ::std::string* CompressedElements::add_id() {
  // @@protoc_insertion_point(field_add_mutable:similia.proto.CompressedElements.id)
  return id_.Add();
}
 void CompressedElements::add_id(const ::std::string& value) {
  id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:similia.proto.CompressedElements.id)
}
 void CompressedElements::add_id(const char* value) {
  id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:similia.proto.CompressedElements.id)
}
 void CompressedElements::add_id(const char* value, size_t size) {
  id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:similia.proto.CompressedElements.id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
CompressedElements::id() const {
  // @@protoc_insertion_point(field_list:similia.proto.CompressedElements.id)
  return id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
CompressedElements::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.CompressedElements.id)
  return &id_;
}

// repeated .similia.proto.CompressingClustersIds compressing_clusters_id = 2;
int CompressedElements::compressing_clusters_id_size() const {
  return compressing_clusters_id_.size();
}
void CompressedElements::clear_compressing_clusters_id() {
  compressing_clusters_id_.Clear();
}
const ::similia::proto::CompressingClustersIds& CompressedElements::compressing_clusters_id(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.CompressedElements.compressing_clusters_id)
  return compressing_clusters_id_.Get(index);
}
::similia::proto::CompressingClustersIds* CompressedElements::mutable_compressing_clusters_id(int index) {
  // @@protoc_insertion_point(field_mutable:similia.proto.CompressedElements.compressing_clusters_id)
  return compressing_clusters_id_.Mutable(index);
}
::similia::proto::CompressingClustersIds* CompressedElements::add_compressing_clusters_id() {
  // @@protoc_insertion_point(field_add:similia.proto.CompressedElements.compressing_clusters_id)
  return compressing_clusters_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::similia::proto::CompressingClustersIds >*
CompressedElements::mutable_compressing_clusters_id() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.CompressedElements.compressing_clusters_id)
  return &compressing_clusters_id_;
}
const ::google::protobuf::RepeatedPtrField< ::similia::proto::CompressingClustersIds >&
CompressedElements::compressing_clusters_id() const {
  // @@protoc_insertion_point(field_list:similia.proto.CompressedElements.compressing_clusters_id)
  return compressing_clusters_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializedCompressedElements::kIdFieldNumber;
const int SerializedCompressedElements::kCompressingClustersIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializedCompressedElements::SerializedCompressedElements()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:similia.proto.SerializedCompressedElements)
}

void SerializedCompressedElements::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SerializedCompressedElements::SerializedCompressedElements(const SerializedCompressedElements& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:similia.proto.SerializedCompressedElements)
}

void SerializedCompressedElements::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

SerializedCompressedElements::~SerializedCompressedElements() {
  // @@protoc_insertion_point(destructor:similia.proto.SerializedCompressedElements)
  SharedDtor();
}

void SerializedCompressedElements::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SerializedCompressedElements::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializedCompressedElements::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SerializedCompressedElements_descriptor_;
}

const SerializedCompressedElements& SerializedCompressedElements::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto();
  return *default_instance_;
}

SerializedCompressedElements* SerializedCompressedElements::default_instance_ = NULL;

SerializedCompressedElements* SerializedCompressedElements::New(::google::protobuf::Arena* arena) const {
  SerializedCompressedElements* n = new SerializedCompressedElements;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerializedCompressedElements::Clear() {
// @@protoc_insertion_point(message_clear_start:similia.proto.SerializedCompressedElements)
  id_.Clear();
  compressing_clusters_id_.Clear();
}

bool SerializedCompressedElements::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:similia.proto.SerializedCompressedElements)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string id = 1;
      case 1: {
        if (tag == 10) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id(this->id_size() - 1).data(),
            this->id(this->id_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "similia.proto.SerializedCompressedElements.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_id;
        if (input->ExpectTag(18)) goto parse_compressing_clusters_id;
        break;
      }

      // repeated bytes compressing_clusters_id = 2;
      case 2: {
        if (tag == 18) {
         parse_compressing_clusters_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_compressing_clusters_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_compressing_clusters_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:similia.proto.SerializedCompressedElements)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:similia.proto.SerializedCompressedElements)
  return false;
#undef DO_
}

void SerializedCompressedElements::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:similia.proto.SerializedCompressedElements)
  // repeated string id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id(i).data(), this->id(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "similia.proto.SerializedCompressedElements.id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(i), output);
  }

  // repeated bytes compressing_clusters_id = 2;
  for (int i = 0; i < this->compressing_clusters_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->compressing_clusters_id(i), output);
  }

  // @@protoc_insertion_point(serialize_end:similia.proto.SerializedCompressedElements)
}

::google::protobuf::uint8* SerializedCompressedElements::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:similia.proto.SerializedCompressedElements)
  // repeated string id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id(i).data(), this->id(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "similia.proto.SerializedCompressedElements.id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->id(i), target);
  }

  // repeated bytes compressing_clusters_id = 2;
  for (int i = 0; i < this->compressing_clusters_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->compressing_clusters_id(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:similia.proto.SerializedCompressedElements)
  return target;
}

int SerializedCompressedElements::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:similia.proto.SerializedCompressedElements)
  int total_size = 0;

  // repeated string id = 1;
  total_size += 1 * this->id_size();
  for (int i = 0; i < this->id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->id(i));
  }

  // repeated bytes compressing_clusters_id = 2;
  total_size += 1 * this->compressing_clusters_id_size();
  for (int i = 0; i < this->compressing_clusters_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->compressing_clusters_id(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializedCompressedElements::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:similia.proto.SerializedCompressedElements)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SerializedCompressedElements* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SerializedCompressedElements>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:similia.proto.SerializedCompressedElements)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:similia.proto.SerializedCompressedElements)
    MergeFrom(*source);
  }
}

void SerializedCompressedElements::MergeFrom(const SerializedCompressedElements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:similia.proto.SerializedCompressedElements)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  id_.MergeFrom(from.id_);
  compressing_clusters_id_.MergeFrom(from.compressing_clusters_id_);
}

void SerializedCompressedElements::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:similia.proto.SerializedCompressedElements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedCompressedElements::CopyFrom(const SerializedCompressedElements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:similia.proto.SerializedCompressedElements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedCompressedElements::IsInitialized() const {

  return true;
}

void SerializedCompressedElements::Swap(SerializedCompressedElements* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializedCompressedElements::InternalSwap(SerializedCompressedElements* other) {
  id_.UnsafeArenaSwap(&other->id_);
  compressing_clusters_id_.UnsafeArenaSwap(&other->compressing_clusters_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerializedCompressedElements::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SerializedCompressedElements_descriptor_;
  metadata.reflection = SerializedCompressedElements_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerializedCompressedElements

// repeated string id = 1;
int SerializedCompressedElements::id_size() const {
  return id_.size();
}
void SerializedCompressedElements::clear_id() {
  id_.Clear();
}
 const ::std::string& SerializedCompressedElements::id(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.SerializedCompressedElements.id)
  return id_.Get(index);
}
 ::std::string* SerializedCompressedElements::mutable_id(int index) {
  // @@protoc_insertion_point(field_mutable:similia.proto.SerializedCompressedElements.id)
  return id_.Mutable(index);
}
 void SerializedCompressedElements::set_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:similia.proto.SerializedCompressedElements.id)
  id_.Mutable(index)->assign(value);
}
 void SerializedCompressedElements::set_id(int index, const char* value) {
  id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:similia.proto.SerializedCompressedElements.id)
}
 void SerializedCompressedElements::set_id(int index, const char* value, size_t size) {
  id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:similia.proto.SerializedCompressedElements.id)
}
 ::std::string* SerializedCompressedElements::add_id() {
  // @@protoc_insertion_point(field_add_mutable:similia.proto.SerializedCompressedElements.id)
  return id_.Add();
}
 void SerializedCompressedElements::add_id(const ::std::string& value) {
  id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:similia.proto.SerializedCompressedElements.id)
}
 void SerializedCompressedElements::add_id(const char* value) {
  id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:similia.proto.SerializedCompressedElements.id)
}
 void SerializedCompressedElements::add_id(const char* value, size_t size) {
  id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:similia.proto.SerializedCompressedElements.id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
SerializedCompressedElements::id() const {
  // @@protoc_insertion_point(field_list:similia.proto.SerializedCompressedElements.id)
  return id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
SerializedCompressedElements::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.SerializedCompressedElements.id)
  return &id_;
}

// repeated bytes compressing_clusters_id = 2;
int SerializedCompressedElements::compressing_clusters_id_size() const {
  return compressing_clusters_id_.size();
}
void SerializedCompressedElements::clear_compressing_clusters_id() {
  compressing_clusters_id_.Clear();
}
 const ::std::string& SerializedCompressedElements::compressing_clusters_id(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.SerializedCompressedElements.compressing_clusters_id)
  return compressing_clusters_id_.Get(index);
}
 ::std::string* SerializedCompressedElements::mutable_compressing_clusters_id(int index) {
  // @@protoc_insertion_point(field_mutable:similia.proto.SerializedCompressedElements.compressing_clusters_id)
  return compressing_clusters_id_.Mutable(index);
}
 void SerializedCompressedElements::set_compressing_clusters_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:similia.proto.SerializedCompressedElements.compressing_clusters_id)
  compressing_clusters_id_.Mutable(index)->assign(value);
}
 void SerializedCompressedElements::set_compressing_clusters_id(int index, const char* value) {
  compressing_clusters_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:similia.proto.SerializedCompressedElements.compressing_clusters_id)
}
 void SerializedCompressedElements::set_compressing_clusters_id(int index, const void* value, size_t size) {
  compressing_clusters_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:similia.proto.SerializedCompressedElements.compressing_clusters_id)
}
 ::std::string* SerializedCompressedElements::add_compressing_clusters_id() {
  // @@protoc_insertion_point(field_add_mutable:similia.proto.SerializedCompressedElements.compressing_clusters_id)
  return compressing_clusters_id_.Add();
}
 void SerializedCompressedElements::add_compressing_clusters_id(const ::std::string& value) {
  compressing_clusters_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:similia.proto.SerializedCompressedElements.compressing_clusters_id)
}
 void SerializedCompressedElements::add_compressing_clusters_id(const char* value) {
  compressing_clusters_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:similia.proto.SerializedCompressedElements.compressing_clusters_id)
}
 void SerializedCompressedElements::add_compressing_clusters_id(const void* value, size_t size) {
  compressing_clusters_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:similia.proto.SerializedCompressedElements.compressing_clusters_id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
SerializedCompressedElements::compressing_clusters_id() const {
  // @@protoc_insertion_point(field_list:similia.proto.SerializedCompressedElements.compressing_clusters_id)
  return compressing_clusters_id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
SerializedCompressedElements::mutable_compressing_clusters_id() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.SerializedCompressedElements.compressing_clusters_id)
  return &compressing_clusters_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompressedElementsMap::kCompressedElementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompressedElementsMap::CompressedElementsMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:similia.proto.CompressedElementsMap)
}

void CompressedElementsMap::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CompressedElementsMap::CompressedElementsMap(const CompressedElementsMap& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:similia.proto.CompressedElementsMap)
}

void CompressedElementsMap::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  compressed_element_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  compressed_element_.SetEntryDescriptor(
      &::similia::proto::CompressedElementsMap_CompressedElementEntry_descriptor_);
}

CompressedElementsMap::~CompressedElementsMap() {
  // @@protoc_insertion_point(destructor:similia.proto.CompressedElementsMap)
  SharedDtor();
}

void CompressedElementsMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CompressedElementsMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompressedElementsMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompressedElementsMap_descriptor_;
}

const CompressedElementsMap& CompressedElementsMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto();
  return *default_instance_;
}

CompressedElementsMap* CompressedElementsMap::default_instance_ = NULL;

CompressedElementsMap* CompressedElementsMap::New(::google::protobuf::Arena* arena) const {
  CompressedElementsMap* n = new CompressedElementsMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompressedElementsMap::Clear() {
// @@protoc_insertion_point(message_clear_start:similia.proto.CompressedElementsMap)
  compressed_element_.Clear();
}

bool CompressedElementsMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:similia.proto.CompressedElementsMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .similia.proto.CompressingClustersIds> compressed_element = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_compressed_element:
          CompressedElementsMap_CompressedElementEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::similia::proto::CompressingClustersIds,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::similia::proto::CompressingClustersIds > > parser(&compressed_element_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "similia.proto.CompressedElementsMap.CompressedElementEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_compressed_element;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:similia.proto.CompressedElementsMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:similia.proto.CompressedElementsMap)
  return false;
#undef DO_
}

void CompressedElementsMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:similia.proto.CompressedElementsMap)
  // map<string, .similia.proto.CompressingClustersIds> compressed_element = 1;
  if (!this->compressed_element().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::similia::proto::CompressingClustersIds >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "similia.proto.CompressedElementsMap.CompressedElementEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->compressed_element().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->compressed_element().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::similia::proto::CompressingClustersIds >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::similia::proto::CompressingClustersIds >::const_iterator
          it = this->compressed_element().begin();
          it != this->compressed_element().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CompressedElementsMap_CompressedElementEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(compressed_element_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CompressedElementsMap_CompressedElementEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::similia::proto::CompressingClustersIds >::const_iterator
          it = this->compressed_element().begin();
          it != this->compressed_element().end(); ++it) {
        entry.reset(compressed_element_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:similia.proto.CompressedElementsMap)
}

::google::protobuf::uint8* CompressedElementsMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:similia.proto.CompressedElementsMap)
  // map<string, .similia.proto.CompressingClustersIds> compressed_element = 1;
  if (!this->compressed_element().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::similia::proto::CompressingClustersIds >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "similia.proto.CompressedElementsMap.CompressedElementEntry.key");
      }
    };

    if (deterministic &&
        this->compressed_element().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->compressed_element().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::similia::proto::CompressingClustersIds >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::similia::proto::CompressingClustersIds >::const_iterator
          it = this->compressed_element().begin();
          it != this->compressed_element().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CompressedElementsMap_CompressedElementEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(compressed_element_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CompressedElementsMap_CompressedElementEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::similia::proto::CompressingClustersIds >::const_iterator
          it = this->compressed_element().begin();
          it != this->compressed_element().end(); ++it) {
        entry.reset(compressed_element_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:similia.proto.CompressedElementsMap)
  return target;
}

int CompressedElementsMap::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:similia.proto.CompressedElementsMap)
  int total_size = 0;

  // map<string, .similia.proto.CompressingClustersIds> compressed_element = 1;
  total_size += 1 * this->compressed_element_size();
  {
    ::google::protobuf::scoped_ptr<CompressedElementsMap_CompressedElementEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::similia::proto::CompressingClustersIds >::const_iterator
        it = this->compressed_element().begin();
        it != this->compressed_element().end(); ++it) {
      entry.reset(compressed_element_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompressedElementsMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:similia.proto.CompressedElementsMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CompressedElementsMap* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CompressedElementsMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:similia.proto.CompressedElementsMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:similia.proto.CompressedElementsMap)
    MergeFrom(*source);
  }
}

void CompressedElementsMap::MergeFrom(const CompressedElementsMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:similia.proto.CompressedElementsMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  compressed_element_.MergeFrom(from.compressed_element_);
}

void CompressedElementsMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:similia.proto.CompressedElementsMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressedElementsMap::CopyFrom(const CompressedElementsMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:similia.proto.CompressedElementsMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedElementsMap::IsInitialized() const {

  return true;
}

void CompressedElementsMap::Swap(CompressedElementsMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompressedElementsMap::InternalSwap(CompressedElementsMap* other) {
  compressed_element_.Swap(&other->compressed_element_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompressedElementsMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompressedElementsMap_descriptor_;
  metadata.reflection = CompressedElementsMap_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompressedElementsMap

// map<string, .similia.proto.CompressingClustersIds> compressed_element = 1;
int CompressedElementsMap::compressed_element_size() const {
  return compressed_element_.size();
}
void CompressedElementsMap::clear_compressed_element() {
  compressed_element_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::similia::proto::CompressingClustersIds >&
CompressedElementsMap::compressed_element() const {
  // @@protoc_insertion_point(field_map:similia.proto.CompressedElementsMap.compressed_element)
  return compressed_element_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::similia::proto::CompressingClustersIds >*
CompressedElementsMap::mutable_compressed_element() {
  // @@protoc_insertion_point(field_mutable_map:similia.proto.CompressedElementsMap.compressed_element)
  return compressed_element_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimiliaSearchRequest::kImageIdFieldNumber;
const int SimiliaSearchRequest::kNumNearestFieldNumber;
const int SimiliaSearchRequest::kFeaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimiliaSearchRequest::SimiliaSearchRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:similia.proto.SimiliaSearchRequest)
}

void SimiliaSearchRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  features_ = const_cast< ::similia::proto::Features*>(&::similia::proto::Features::default_instance());
}

SimiliaSearchRequest::SimiliaSearchRequest(const SimiliaSearchRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:similia.proto.SimiliaSearchRequest)
}

void SimiliaSearchRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  image_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_nearest_ = 0;
  features_ = NULL;
}

SimiliaSearchRequest::~SimiliaSearchRequest() {
  // @@protoc_insertion_point(destructor:similia.proto.SimiliaSearchRequest)
  SharedDtor();
}

void SimiliaSearchRequest::SharedDtor() {
  image_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete features_;
  }
}

void SimiliaSearchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimiliaSearchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimiliaSearchRequest_descriptor_;
}

const SimiliaSearchRequest& SimiliaSearchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto();
  return *default_instance_;
}

SimiliaSearchRequest* SimiliaSearchRequest::default_instance_ = NULL;

SimiliaSearchRequest* SimiliaSearchRequest::New(::google::protobuf::Arena* arena) const {
  SimiliaSearchRequest* n = new SimiliaSearchRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimiliaSearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:similia.proto.SimiliaSearchRequest)
  image_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_nearest_ = 0;
  if (GetArenaNoVirtual() == NULL && features_ != NULL) delete features_;
  features_ = NULL;
}

bool SimiliaSearchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:similia.proto.SimiliaSearchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string image_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image_id().data(), this->image_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "similia.proto.SimiliaSearchRequest.image_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_nearest;
        break;
      }

      // optional int32 num_nearest = 2;
      case 2: {
        if (tag == 16) {
         parse_num_nearest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_nearest_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_features;
        break;
      }

      // optional .similia.proto.Features features = 3;
      case 3: {
        if (tag == 26) {
         parse_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_features()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:similia.proto.SimiliaSearchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:similia.proto.SimiliaSearchRequest)
  return false;
#undef DO_
}

void SimiliaSearchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:similia.proto.SimiliaSearchRequest)
  // optional string image_id = 1;
  if (this->image_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_id().data(), this->image_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "similia.proto.SimiliaSearchRequest.image_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->image_id(), output);
  }

  // optional int32 num_nearest = 2;
  if (this->num_nearest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_nearest(), output);
  }

  // optional .similia.proto.Features features = 3;
  if (this->has_features()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->features_, output);
  }

  // @@protoc_insertion_point(serialize_end:similia.proto.SimiliaSearchRequest)
}

::google::protobuf::uint8* SimiliaSearchRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:similia.proto.SimiliaSearchRequest)
  // optional string image_id = 1;
  if (this->image_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_id().data(), this->image_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "similia.proto.SimiliaSearchRequest.image_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->image_id(), target);
  }

  // optional int32 num_nearest = 2;
  if (this->num_nearest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_nearest(), target);
  }

  // optional .similia.proto.Features features = 3;
  if (this->has_features()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->features_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:similia.proto.SimiliaSearchRequest)
  return target;
}

int SimiliaSearchRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:similia.proto.SimiliaSearchRequest)
  int total_size = 0;

  // optional string image_id = 1;
  if (this->image_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image_id());
  }

  // optional int32 num_nearest = 2;
  if (this->num_nearest() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_nearest());
  }

  // optional .similia.proto.Features features = 3;
  if (this->has_features()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->features_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimiliaSearchRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:similia.proto.SimiliaSearchRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SimiliaSearchRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SimiliaSearchRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:similia.proto.SimiliaSearchRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:similia.proto.SimiliaSearchRequest)
    MergeFrom(*source);
  }
}

void SimiliaSearchRequest::MergeFrom(const SimiliaSearchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:similia.proto.SimiliaSearchRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.image_id().size() > 0) {

    image_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_id_);
  }
  if (from.num_nearest() != 0) {
    set_num_nearest(from.num_nearest());
  }
  if (from.has_features()) {
    mutable_features()->::similia::proto::Features::MergeFrom(from.features());
  }
}

void SimiliaSearchRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:similia.proto.SimiliaSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimiliaSearchRequest::CopyFrom(const SimiliaSearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:similia.proto.SimiliaSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimiliaSearchRequest::IsInitialized() const {

  return true;
}

void SimiliaSearchRequest::Swap(SimiliaSearchRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimiliaSearchRequest::InternalSwap(SimiliaSearchRequest* other) {
  image_id_.Swap(&other->image_id_);
  std::swap(num_nearest_, other->num_nearest_);
  std::swap(features_, other->features_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimiliaSearchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimiliaSearchRequest_descriptor_;
  metadata.reflection = SimiliaSearchRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimiliaSearchRequest

// optional string image_id = 1;
void SimiliaSearchRequest::clear_image_id() {
  image_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SimiliaSearchRequest::image_id() const {
  // @@protoc_insertion_point(field_get:similia.proto.SimiliaSearchRequest.image_id)
  return image_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SimiliaSearchRequest::set_image_id(const ::std::string& value) {
  
  image_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:similia.proto.SimiliaSearchRequest.image_id)
}
 void SimiliaSearchRequest::set_image_id(const char* value) {
  
  image_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:similia.proto.SimiliaSearchRequest.image_id)
}
 void SimiliaSearchRequest::set_image_id(const char* value, size_t size) {
  
  image_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:similia.proto.SimiliaSearchRequest.image_id)
}
 ::std::string* SimiliaSearchRequest::mutable_image_id() {
  
  // @@protoc_insertion_point(field_mutable:similia.proto.SimiliaSearchRequest.image_id)
  return image_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SimiliaSearchRequest::release_image_id() {
  // @@protoc_insertion_point(field_release:similia.proto.SimiliaSearchRequest.image_id)
  
  return image_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SimiliaSearchRequest::set_allocated_image_id(::std::string* image_id) {
  if (image_id != NULL) {
    
  } else {
    
  }
  image_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_id);
  // @@protoc_insertion_point(field_set_allocated:similia.proto.SimiliaSearchRequest.image_id)
}

// optional int32 num_nearest = 2;
void SimiliaSearchRequest::clear_num_nearest() {
  num_nearest_ = 0;
}
 ::google::protobuf::int32 SimiliaSearchRequest::num_nearest() const {
  // @@protoc_insertion_point(field_get:similia.proto.SimiliaSearchRequest.num_nearest)
  return num_nearest_;
}
 void SimiliaSearchRequest::set_num_nearest(::google::protobuf::int32 value) {
  
  num_nearest_ = value;
  // @@protoc_insertion_point(field_set:similia.proto.SimiliaSearchRequest.num_nearest)
}

// optional .similia.proto.Features features = 3;
bool SimiliaSearchRequest::has_features() const {
  return !_is_default_instance_ && features_ != NULL;
}
void SimiliaSearchRequest::clear_features() {
  if (GetArenaNoVirtual() == NULL && features_ != NULL) delete features_;
  features_ = NULL;
}
const ::similia::proto::Features& SimiliaSearchRequest::features() const {
  // @@protoc_insertion_point(field_get:similia.proto.SimiliaSearchRequest.features)
  return features_ != NULL ? *features_ : *default_instance_->features_;
}
::similia::proto::Features* SimiliaSearchRequest::mutable_features() {
  
  if (features_ == NULL) {
    features_ = new ::similia::proto::Features;
  }
  // @@protoc_insertion_point(field_mutable:similia.proto.SimiliaSearchRequest.features)
  return features_;
}
::similia::proto::Features* SimiliaSearchRequest::release_features() {
  // @@protoc_insertion_point(field_release:similia.proto.SimiliaSearchRequest.features)
  
  ::similia::proto::Features* temp = features_;
  features_ = NULL;
  return temp;
}
void SimiliaSearchRequest::set_allocated_features(::similia::proto::Features* features) {
  delete features_;
  features_ = features;
  if (features) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:similia.proto.SimiliaSearchRequest.features)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimiliaSearchResponse::kImageIdFieldNumber;
const int SimiliaSearchResponse::kProcessingTimeMsFieldNumber;
const int SimiliaSearchResponse::kSquaredDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimiliaSearchResponse::SimiliaSearchResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:similia.proto.SimiliaSearchResponse)
}

void SimiliaSearchResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SimiliaSearchResponse::SimiliaSearchResponse(const SimiliaSearchResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:similia.proto.SimiliaSearchResponse)
}

void SimiliaSearchResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  processing_time_ms_ = GOOGLE_LONGLONG(0);
}

SimiliaSearchResponse::~SimiliaSearchResponse() {
  // @@protoc_insertion_point(destructor:similia.proto.SimiliaSearchResponse)
  SharedDtor();
}

void SimiliaSearchResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimiliaSearchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimiliaSearchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimiliaSearchResponse_descriptor_;
}

const SimiliaSearchResponse& SimiliaSearchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto();
  return *default_instance_;
}

SimiliaSearchResponse* SimiliaSearchResponse::default_instance_ = NULL;

SimiliaSearchResponse* SimiliaSearchResponse::New(::google::protobuf::Arena* arena) const {
  SimiliaSearchResponse* n = new SimiliaSearchResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimiliaSearchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:similia.proto.SimiliaSearchResponse)
  processing_time_ms_ = GOOGLE_LONGLONG(0);
  image_id_.Clear();
  squared_distance_.Clear();
}

bool SimiliaSearchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:similia.proto.SimiliaSearchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string image_id = 1;
      case 1: {
        if (tag == 10) {
         parse_image_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_image_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image_id(this->image_id_size() - 1).data(),
            this->image_id(this->image_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "similia.proto.SimiliaSearchResponse.image_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_image_id;
        if (input->ExpectTag(16)) goto parse_processing_time_ms;
        break;
      }

      // optional int64 processing_time_ms = 2;
      case 2: {
        if (tag == 16) {
         parse_processing_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &processing_time_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_squared_distance;
        break;
      }

      // repeated double squared_distance = 3;
      case 3: {
        if (tag == 26) {
         parse_squared_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_squared_distance())));
        } else if (tag == 25) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_squared_distance())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:similia.proto.SimiliaSearchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:similia.proto.SimiliaSearchResponse)
  return false;
#undef DO_
}

void SimiliaSearchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:similia.proto.SimiliaSearchResponse)
  // repeated string image_id = 1;
  for (int i = 0; i < this->image_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_id(i).data(), this->image_id(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "similia.proto.SimiliaSearchResponse.image_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->image_id(i), output);
  }

  // optional int64 processing_time_ms = 2;
  if (this->processing_time_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->processing_time_ms(), output);
  }

  // repeated double squared_distance = 3;
  if (this->squared_distance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_squared_distance_cached_byte_size_);
  }
  for (int i = 0; i < this->squared_distance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->squared_distance(i), output);
  }

  // @@protoc_insertion_point(serialize_end:similia.proto.SimiliaSearchResponse)
}

::google::protobuf::uint8* SimiliaSearchResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:similia.proto.SimiliaSearchResponse)
  // repeated string image_id = 1;
  for (int i = 0; i < this->image_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_id(i).data(), this->image_id(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "similia.proto.SimiliaSearchResponse.image_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->image_id(i), target);
  }

  // optional int64 processing_time_ms = 2;
  if (this->processing_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->processing_time_ms(), target);
  }

  // repeated double squared_distance = 3;
  if (this->squared_distance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _squared_distance_cached_byte_size_, target);
  }
  for (int i = 0; i < this->squared_distance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->squared_distance(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:similia.proto.SimiliaSearchResponse)
  return target;
}

int SimiliaSearchResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:similia.proto.SimiliaSearchResponse)
  int total_size = 0;

  // optional int64 processing_time_ms = 2;
  if (this->processing_time_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->processing_time_ms());
  }

  // repeated string image_id = 1;
  total_size += 1 * this->image_id_size();
  for (int i = 0; i < this->image_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->image_id(i));
  }

  // repeated double squared_distance = 3;
  {
    int data_size = 0;
    data_size = 8 * this->squared_distance_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _squared_distance_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimiliaSearchResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:similia.proto.SimiliaSearchResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SimiliaSearchResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SimiliaSearchResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:similia.proto.SimiliaSearchResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:similia.proto.SimiliaSearchResponse)
    MergeFrom(*source);
  }
}

void SimiliaSearchResponse::MergeFrom(const SimiliaSearchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:similia.proto.SimiliaSearchResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  image_id_.MergeFrom(from.image_id_);
  squared_distance_.MergeFrom(from.squared_distance_);
  if (from.processing_time_ms() != 0) {
    set_processing_time_ms(from.processing_time_ms());
  }
}

void SimiliaSearchResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:similia.proto.SimiliaSearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimiliaSearchResponse::CopyFrom(const SimiliaSearchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:similia.proto.SimiliaSearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimiliaSearchResponse::IsInitialized() const {

  return true;
}

void SimiliaSearchResponse::Swap(SimiliaSearchResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimiliaSearchResponse::InternalSwap(SimiliaSearchResponse* other) {
  image_id_.UnsafeArenaSwap(&other->image_id_);
  std::swap(processing_time_ms_, other->processing_time_ms_);
  squared_distance_.UnsafeArenaSwap(&other->squared_distance_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimiliaSearchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimiliaSearchResponse_descriptor_;
  metadata.reflection = SimiliaSearchResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimiliaSearchResponse

// repeated string image_id = 1;
int SimiliaSearchResponse::image_id_size() const {
  return image_id_.size();
}
void SimiliaSearchResponse::clear_image_id() {
  image_id_.Clear();
}
 const ::std::string& SimiliaSearchResponse::image_id(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.SimiliaSearchResponse.image_id)
  return image_id_.Get(index);
}
 ::std::string* SimiliaSearchResponse::mutable_image_id(int index) {
  // @@protoc_insertion_point(field_mutable:similia.proto.SimiliaSearchResponse.image_id)
  return image_id_.Mutable(index);
}
 void SimiliaSearchResponse::set_image_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:similia.proto.SimiliaSearchResponse.image_id)
  image_id_.Mutable(index)->assign(value);
}
 void SimiliaSearchResponse::set_image_id(int index, const char* value) {
  image_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:similia.proto.SimiliaSearchResponse.image_id)
}
 void SimiliaSearchResponse::set_image_id(int index, const char* value, size_t size) {
  image_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:similia.proto.SimiliaSearchResponse.image_id)
}
 ::std::string* SimiliaSearchResponse::add_image_id() {
  // @@protoc_insertion_point(field_add_mutable:similia.proto.SimiliaSearchResponse.image_id)
  return image_id_.Add();
}
 void SimiliaSearchResponse::add_image_id(const ::std::string& value) {
  image_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:similia.proto.SimiliaSearchResponse.image_id)
}
 void SimiliaSearchResponse::add_image_id(const char* value) {
  image_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:similia.proto.SimiliaSearchResponse.image_id)
}
 void SimiliaSearchResponse::add_image_id(const char* value, size_t size) {
  image_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:similia.proto.SimiliaSearchResponse.image_id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
SimiliaSearchResponse::image_id() const {
  // @@protoc_insertion_point(field_list:similia.proto.SimiliaSearchResponse.image_id)
  return image_id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
SimiliaSearchResponse::mutable_image_id() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.SimiliaSearchResponse.image_id)
  return &image_id_;
}

// optional int64 processing_time_ms = 2;
void SimiliaSearchResponse::clear_processing_time_ms() {
  processing_time_ms_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 SimiliaSearchResponse::processing_time_ms() const {
  // @@protoc_insertion_point(field_get:similia.proto.SimiliaSearchResponse.processing_time_ms)
  return processing_time_ms_;
}
 void SimiliaSearchResponse::set_processing_time_ms(::google::protobuf::int64 value) {
  
  processing_time_ms_ = value;
  // @@protoc_insertion_point(field_set:similia.proto.SimiliaSearchResponse.processing_time_ms)
}

// repeated double squared_distance = 3;
int SimiliaSearchResponse::squared_distance_size() const {
  return squared_distance_.size();
}
void SimiliaSearchResponse::clear_squared_distance() {
  squared_distance_.Clear();
}
 double SimiliaSearchResponse::squared_distance(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.SimiliaSearchResponse.squared_distance)
  return squared_distance_.Get(index);
}
 void SimiliaSearchResponse::set_squared_distance(int index, double value) {
  squared_distance_.Set(index, value);
  // @@protoc_insertion_point(field_set:similia.proto.SimiliaSearchResponse.squared_distance)
}
 void SimiliaSearchResponse::add_squared_distance(double value) {
  squared_distance_.Add(value);
  // @@protoc_insertion_point(field_add:similia.proto.SimiliaSearchResponse.squared_distance)
}
 const ::google::protobuf::RepeatedField< double >&
SimiliaSearchResponse::squared_distance() const {
  // @@protoc_insertion_point(field_list:similia.proto.SimiliaSearchResponse.squared_distance)
  return squared_distance_;
}
 ::google::protobuf::RepeatedField< double >*
SimiliaSearchResponse::mutable_squared_distance() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.SimiliaSearchResponse.squared_distance)
  return &squared_distance_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiIndexAddRequest::kImageIdFieldNumber;
const int MultiIndexAddRequest::kIndexingIdsFieldNumber;
const int MultiIndexAddRequest::kCompressingIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiIndexAddRequest::MultiIndexAddRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:similia.proto.MultiIndexAddRequest)
}

void MultiIndexAddRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  indexing_ids_ = const_cast< ::similia::proto::IndexingClustersIds*>(&::similia::proto::IndexingClustersIds::default_instance());
  compressing_ids_ = const_cast< ::similia::proto::CompressingClustersIds*>(&::similia::proto::CompressingClustersIds::default_instance());
}

MultiIndexAddRequest::MultiIndexAddRequest(const MultiIndexAddRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:similia.proto.MultiIndexAddRequest)
}

void MultiIndexAddRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  image_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  indexing_ids_ = NULL;
  compressing_ids_ = NULL;
}

MultiIndexAddRequest::~MultiIndexAddRequest() {
  // @@protoc_insertion_point(destructor:similia.proto.MultiIndexAddRequest)
  SharedDtor();
}

void MultiIndexAddRequest::SharedDtor() {
  image_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete indexing_ids_;
    delete compressing_ids_;
  }
}

void MultiIndexAddRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiIndexAddRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiIndexAddRequest_descriptor_;
}

const MultiIndexAddRequest& MultiIndexAddRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto();
  return *default_instance_;
}

MultiIndexAddRequest* MultiIndexAddRequest::default_instance_ = NULL;

MultiIndexAddRequest* MultiIndexAddRequest::New(::google::protobuf::Arena* arena) const {
  MultiIndexAddRequest* n = new MultiIndexAddRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiIndexAddRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:similia.proto.MultiIndexAddRequest)
  image_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && indexing_ids_ != NULL) delete indexing_ids_;
  indexing_ids_ = NULL;
  if (GetArenaNoVirtual() == NULL && compressing_ids_ != NULL) delete compressing_ids_;
  compressing_ids_ = NULL;
}

bool MultiIndexAddRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:similia.proto.MultiIndexAddRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string image_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image_id().data(), this->image_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "similia.proto.MultiIndexAddRequest.image_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_indexing_ids;
        break;
      }

      // optional .similia.proto.IndexingClustersIds indexing_ids = 2;
      case 2: {
        if (tag == 18) {
         parse_indexing_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_indexing_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_compressing_ids;
        break;
      }

      // optional .similia.proto.CompressingClustersIds compressing_ids = 3;
      case 3: {
        if (tag == 26) {
         parse_compressing_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compressing_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:similia.proto.MultiIndexAddRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:similia.proto.MultiIndexAddRequest)
  return false;
#undef DO_
}

void MultiIndexAddRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:similia.proto.MultiIndexAddRequest)
  // optional string image_id = 1;
  if (this->image_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_id().data(), this->image_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "similia.proto.MultiIndexAddRequest.image_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->image_id(), output);
  }

  // optional .similia.proto.IndexingClustersIds indexing_ids = 2;
  if (this->has_indexing_ids()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->indexing_ids_, output);
  }

  // optional .similia.proto.CompressingClustersIds compressing_ids = 3;
  if (this->has_compressing_ids()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->compressing_ids_, output);
  }

  // @@protoc_insertion_point(serialize_end:similia.proto.MultiIndexAddRequest)
}

::google::protobuf::uint8* MultiIndexAddRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:similia.proto.MultiIndexAddRequest)
  // optional string image_id = 1;
  if (this->image_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_id().data(), this->image_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "similia.proto.MultiIndexAddRequest.image_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->image_id(), target);
  }

  // optional .similia.proto.IndexingClustersIds indexing_ids = 2;
  if (this->has_indexing_ids()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->indexing_ids_, false, target);
  }

  // optional .similia.proto.CompressingClustersIds compressing_ids = 3;
  if (this->has_compressing_ids()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->compressing_ids_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:similia.proto.MultiIndexAddRequest)
  return target;
}

int MultiIndexAddRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:similia.proto.MultiIndexAddRequest)
  int total_size = 0;

  // optional string image_id = 1;
  if (this->image_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image_id());
  }

  // optional .similia.proto.IndexingClustersIds indexing_ids = 2;
  if (this->has_indexing_ids()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->indexing_ids_);
  }

  // optional .similia.proto.CompressingClustersIds compressing_ids = 3;
  if (this->has_compressing_ids()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->compressing_ids_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiIndexAddRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:similia.proto.MultiIndexAddRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MultiIndexAddRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiIndexAddRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:similia.proto.MultiIndexAddRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:similia.proto.MultiIndexAddRequest)
    MergeFrom(*source);
  }
}

void MultiIndexAddRequest::MergeFrom(const MultiIndexAddRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:similia.proto.MultiIndexAddRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.image_id().size() > 0) {

    image_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_id_);
  }
  if (from.has_indexing_ids()) {
    mutable_indexing_ids()->::similia::proto::IndexingClustersIds::MergeFrom(from.indexing_ids());
  }
  if (from.has_compressing_ids()) {
    mutable_compressing_ids()->::similia::proto::CompressingClustersIds::MergeFrom(from.compressing_ids());
  }
}

void MultiIndexAddRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:similia.proto.MultiIndexAddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiIndexAddRequest::CopyFrom(const MultiIndexAddRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:similia.proto.MultiIndexAddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiIndexAddRequest::IsInitialized() const {

  return true;
}

void MultiIndexAddRequest::Swap(MultiIndexAddRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiIndexAddRequest::InternalSwap(MultiIndexAddRequest* other) {
  image_id_.Swap(&other->image_id_);
  std::swap(indexing_ids_, other->indexing_ids_);
  std::swap(compressing_ids_, other->compressing_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiIndexAddRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiIndexAddRequest_descriptor_;
  metadata.reflection = MultiIndexAddRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiIndexAddRequest

// optional string image_id = 1;
void MultiIndexAddRequest::clear_image_id() {
  image_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MultiIndexAddRequest::image_id() const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexAddRequest.image_id)
  return image_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MultiIndexAddRequest::set_image_id(const ::std::string& value) {
  
  image_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:similia.proto.MultiIndexAddRequest.image_id)
}
 void MultiIndexAddRequest::set_image_id(const char* value) {
  
  image_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:similia.proto.MultiIndexAddRequest.image_id)
}
 void MultiIndexAddRequest::set_image_id(const char* value, size_t size) {
  
  image_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:similia.proto.MultiIndexAddRequest.image_id)
}
 ::std::string* MultiIndexAddRequest::mutable_image_id() {
  
  // @@protoc_insertion_point(field_mutable:similia.proto.MultiIndexAddRequest.image_id)
  return image_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MultiIndexAddRequest::release_image_id() {
  // @@protoc_insertion_point(field_release:similia.proto.MultiIndexAddRequest.image_id)
  
  return image_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MultiIndexAddRequest::set_allocated_image_id(::std::string* image_id) {
  if (image_id != NULL) {
    
  } else {
    
  }
  image_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_id);
  // @@protoc_insertion_point(field_set_allocated:similia.proto.MultiIndexAddRequest.image_id)
}

// optional .similia.proto.IndexingClustersIds indexing_ids = 2;
bool MultiIndexAddRequest::has_indexing_ids() const {
  return !_is_default_instance_ && indexing_ids_ != NULL;
}
void MultiIndexAddRequest::clear_indexing_ids() {
  if (GetArenaNoVirtual() == NULL && indexing_ids_ != NULL) delete indexing_ids_;
  indexing_ids_ = NULL;
}
const ::similia::proto::IndexingClustersIds& MultiIndexAddRequest::indexing_ids() const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexAddRequest.indexing_ids)
  return indexing_ids_ != NULL ? *indexing_ids_ : *default_instance_->indexing_ids_;
}
::similia::proto::IndexingClustersIds* MultiIndexAddRequest::mutable_indexing_ids() {
  
  if (indexing_ids_ == NULL) {
    indexing_ids_ = new ::similia::proto::IndexingClustersIds;
  }
  // @@protoc_insertion_point(field_mutable:similia.proto.MultiIndexAddRequest.indexing_ids)
  return indexing_ids_;
}
::similia::proto::IndexingClustersIds* MultiIndexAddRequest::release_indexing_ids() {
  // @@protoc_insertion_point(field_release:similia.proto.MultiIndexAddRequest.indexing_ids)
  
  ::similia::proto::IndexingClustersIds* temp = indexing_ids_;
  indexing_ids_ = NULL;
  return temp;
}
void MultiIndexAddRequest::set_allocated_indexing_ids(::similia::proto::IndexingClustersIds* indexing_ids) {
  delete indexing_ids_;
  indexing_ids_ = indexing_ids;
  if (indexing_ids) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:similia.proto.MultiIndexAddRequest.indexing_ids)
}

// optional .similia.proto.CompressingClustersIds compressing_ids = 3;
bool MultiIndexAddRequest::has_compressing_ids() const {
  return !_is_default_instance_ && compressing_ids_ != NULL;
}
void MultiIndexAddRequest::clear_compressing_ids() {
  if (GetArenaNoVirtual() == NULL && compressing_ids_ != NULL) delete compressing_ids_;
  compressing_ids_ = NULL;
}
const ::similia::proto::CompressingClustersIds& MultiIndexAddRequest::compressing_ids() const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexAddRequest.compressing_ids)
  return compressing_ids_ != NULL ? *compressing_ids_ : *default_instance_->compressing_ids_;
}
::similia::proto::CompressingClustersIds* MultiIndexAddRequest::mutable_compressing_ids() {
  
  if (compressing_ids_ == NULL) {
    compressing_ids_ = new ::similia::proto::CompressingClustersIds;
  }
  // @@protoc_insertion_point(field_mutable:similia.proto.MultiIndexAddRequest.compressing_ids)
  return compressing_ids_;
}
::similia::proto::CompressingClustersIds* MultiIndexAddRequest::release_compressing_ids() {
  // @@protoc_insertion_point(field_release:similia.proto.MultiIndexAddRequest.compressing_ids)
  
  ::similia::proto::CompressingClustersIds* temp = compressing_ids_;
  compressing_ids_ = NULL;
  return temp;
}
void MultiIndexAddRequest::set_allocated_compressing_ids(::similia::proto::CompressingClustersIds* compressing_ids) {
  delete compressing_ids_;
  compressing_ids_ = compressing_ids;
  if (compressing_ids) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:similia.proto.MultiIndexAddRequest.compressing_ids)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiIndexAddResponse::kProcessingTimeMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiIndexAddResponse::MultiIndexAddResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:similia.proto.MultiIndexAddResponse)
}

void MultiIndexAddResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MultiIndexAddResponse::MultiIndexAddResponse(const MultiIndexAddResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:similia.proto.MultiIndexAddResponse)
}

void MultiIndexAddResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  processing_time_ms_ = GOOGLE_LONGLONG(0);
}

MultiIndexAddResponse::~MultiIndexAddResponse() {
  // @@protoc_insertion_point(destructor:similia.proto.MultiIndexAddResponse)
  SharedDtor();
}

void MultiIndexAddResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MultiIndexAddResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiIndexAddResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiIndexAddResponse_descriptor_;
}

const MultiIndexAddResponse& MultiIndexAddResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto();
  return *default_instance_;
}

MultiIndexAddResponse* MultiIndexAddResponse::default_instance_ = NULL;

MultiIndexAddResponse* MultiIndexAddResponse::New(::google::protobuf::Arena* arena) const {
  MultiIndexAddResponse* n = new MultiIndexAddResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiIndexAddResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:similia.proto.MultiIndexAddResponse)
  processing_time_ms_ = GOOGLE_LONGLONG(0);
}

bool MultiIndexAddResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:similia.proto.MultiIndexAddResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 processing_time_ms = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &processing_time_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:similia.proto.MultiIndexAddResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:similia.proto.MultiIndexAddResponse)
  return false;
#undef DO_
}

void MultiIndexAddResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:similia.proto.MultiIndexAddResponse)
  // optional int64 processing_time_ms = 2;
  if (this->processing_time_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->processing_time_ms(), output);
  }

  // @@protoc_insertion_point(serialize_end:similia.proto.MultiIndexAddResponse)
}

::google::protobuf::uint8* MultiIndexAddResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:similia.proto.MultiIndexAddResponse)
  // optional int64 processing_time_ms = 2;
  if (this->processing_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->processing_time_ms(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:similia.proto.MultiIndexAddResponse)
  return target;
}

int MultiIndexAddResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:similia.proto.MultiIndexAddResponse)
  int total_size = 0;

  // optional int64 processing_time_ms = 2;
  if (this->processing_time_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->processing_time_ms());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiIndexAddResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:similia.proto.MultiIndexAddResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MultiIndexAddResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiIndexAddResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:similia.proto.MultiIndexAddResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:similia.proto.MultiIndexAddResponse)
    MergeFrom(*source);
  }
}

void MultiIndexAddResponse::MergeFrom(const MultiIndexAddResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:similia.proto.MultiIndexAddResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.processing_time_ms() != 0) {
    set_processing_time_ms(from.processing_time_ms());
  }
}

void MultiIndexAddResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:similia.proto.MultiIndexAddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiIndexAddResponse::CopyFrom(const MultiIndexAddResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:similia.proto.MultiIndexAddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiIndexAddResponse::IsInitialized() const {

  return true;
}

void MultiIndexAddResponse::Swap(MultiIndexAddResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiIndexAddResponse::InternalSwap(MultiIndexAddResponse* other) {
  std::swap(processing_time_ms_, other->processing_time_ms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiIndexAddResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiIndexAddResponse_descriptor_;
  metadata.reflection = MultiIndexAddResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiIndexAddResponse

// optional int64 processing_time_ms = 2;
void MultiIndexAddResponse::clear_processing_time_ms() {
  processing_time_ms_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MultiIndexAddResponse::processing_time_ms() const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexAddResponse.processing_time_ms)
  return processing_time_ms_;
}
 void MultiIndexAddResponse::set_processing_time_ms(::google::protobuf::int64 value) {
  
  processing_time_ms_ = value;
  // @@protoc_insertion_point(field_set:similia.proto.MultiIndexAddResponse.processing_time_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiIndexGetRequest::kIndexingIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiIndexGetRequest::MultiIndexGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:similia.proto.MultiIndexGetRequest)
}

void MultiIndexGetRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  indexing_ids_ = const_cast< ::similia::proto::IndexingClustersIds*>(&::similia::proto::IndexingClustersIds::default_instance());
}

MultiIndexGetRequest::MultiIndexGetRequest(const MultiIndexGetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:similia.proto.MultiIndexGetRequest)
}

void MultiIndexGetRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  indexing_ids_ = NULL;
}

MultiIndexGetRequest::~MultiIndexGetRequest() {
  // @@protoc_insertion_point(destructor:similia.proto.MultiIndexGetRequest)
  SharedDtor();
}

void MultiIndexGetRequest::SharedDtor() {
  if (this != default_instance_) {
    delete indexing_ids_;
  }
}

void MultiIndexGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiIndexGetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiIndexGetRequest_descriptor_;
}

const MultiIndexGetRequest& MultiIndexGetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto();
  return *default_instance_;
}

MultiIndexGetRequest* MultiIndexGetRequest::default_instance_ = NULL;

MultiIndexGetRequest* MultiIndexGetRequest::New(::google::protobuf::Arena* arena) const {
  MultiIndexGetRequest* n = new MultiIndexGetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiIndexGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:similia.proto.MultiIndexGetRequest)
  if (GetArenaNoVirtual() == NULL && indexing_ids_ != NULL) delete indexing_ids_;
  indexing_ids_ = NULL;
}

bool MultiIndexGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:similia.proto.MultiIndexGetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .similia.proto.IndexingClustersIds indexing_ids = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_indexing_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:similia.proto.MultiIndexGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:similia.proto.MultiIndexGetRequest)
  return false;
#undef DO_
}

void MultiIndexGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:similia.proto.MultiIndexGetRequest)
  // optional .similia.proto.IndexingClustersIds indexing_ids = 1;
  if (this->has_indexing_ids()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->indexing_ids_, output);
  }

  // @@protoc_insertion_point(serialize_end:similia.proto.MultiIndexGetRequest)
}

::google::protobuf::uint8* MultiIndexGetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:similia.proto.MultiIndexGetRequest)
  // optional .similia.proto.IndexingClustersIds indexing_ids = 1;
  if (this->has_indexing_ids()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->indexing_ids_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:similia.proto.MultiIndexGetRequest)
  return target;
}

int MultiIndexGetRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:similia.proto.MultiIndexGetRequest)
  int total_size = 0;

  // optional .similia.proto.IndexingClustersIds indexing_ids = 1;
  if (this->has_indexing_ids()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->indexing_ids_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiIndexGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:similia.proto.MultiIndexGetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MultiIndexGetRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiIndexGetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:similia.proto.MultiIndexGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:similia.proto.MultiIndexGetRequest)
    MergeFrom(*source);
  }
}

void MultiIndexGetRequest::MergeFrom(const MultiIndexGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:similia.proto.MultiIndexGetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_indexing_ids()) {
    mutable_indexing_ids()->::similia::proto::IndexingClustersIds::MergeFrom(from.indexing_ids());
  }
}

void MultiIndexGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:similia.proto.MultiIndexGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiIndexGetRequest::CopyFrom(const MultiIndexGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:similia.proto.MultiIndexGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiIndexGetRequest::IsInitialized() const {

  return true;
}

void MultiIndexGetRequest::Swap(MultiIndexGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiIndexGetRequest::InternalSwap(MultiIndexGetRequest* other) {
  std::swap(indexing_ids_, other->indexing_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiIndexGetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiIndexGetRequest_descriptor_;
  metadata.reflection = MultiIndexGetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiIndexGetRequest

// optional .similia.proto.IndexingClustersIds indexing_ids = 1;
bool MultiIndexGetRequest::has_indexing_ids() const {
  return !_is_default_instance_ && indexing_ids_ != NULL;
}
void MultiIndexGetRequest::clear_indexing_ids() {
  if (GetArenaNoVirtual() == NULL && indexing_ids_ != NULL) delete indexing_ids_;
  indexing_ids_ = NULL;
}
const ::similia::proto::IndexingClustersIds& MultiIndexGetRequest::indexing_ids() const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexGetRequest.indexing_ids)
  return indexing_ids_ != NULL ? *indexing_ids_ : *default_instance_->indexing_ids_;
}
::similia::proto::IndexingClustersIds* MultiIndexGetRequest::mutable_indexing_ids() {
  
  if (indexing_ids_ == NULL) {
    indexing_ids_ = new ::similia::proto::IndexingClustersIds;
  }
  // @@protoc_insertion_point(field_mutable:similia.proto.MultiIndexGetRequest.indexing_ids)
  return indexing_ids_;
}
::similia::proto::IndexingClustersIds* MultiIndexGetRequest::release_indexing_ids() {
  // @@protoc_insertion_point(field_release:similia.proto.MultiIndexGetRequest.indexing_ids)
  
  ::similia::proto::IndexingClustersIds* temp = indexing_ids_;
  indexing_ids_ = NULL;
  return temp;
}
void MultiIndexGetRequest::set_allocated_indexing_ids(::similia::proto::IndexingClustersIds* indexing_ids) {
  delete indexing_ids_;
  indexing_ids_ = indexing_ids;
  if (indexing_ids) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:similia.proto.MultiIndexGetRequest.indexing_ids)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiIndexGetResponse::kProcessingTimeMsFieldNumber;
const int MultiIndexGetResponse::kCompressedElementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiIndexGetResponse::MultiIndexGetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:similia.proto.MultiIndexGetResponse)
}

void MultiIndexGetResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MultiIndexGetResponse::MultiIndexGetResponse(const MultiIndexGetResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:similia.proto.MultiIndexGetResponse)
}

void MultiIndexGetResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  processing_time_ms_ = GOOGLE_LONGLONG(0);
  compressed_elements_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MultiIndexGetResponse::~MultiIndexGetResponse() {
  // @@protoc_insertion_point(destructor:similia.proto.MultiIndexGetResponse)
  SharedDtor();
}

void MultiIndexGetResponse::SharedDtor() {
  compressed_elements_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MultiIndexGetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiIndexGetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiIndexGetResponse_descriptor_;
}

const MultiIndexGetResponse& MultiIndexGetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto();
  return *default_instance_;
}

MultiIndexGetResponse* MultiIndexGetResponse::default_instance_ = NULL;

MultiIndexGetResponse* MultiIndexGetResponse::New(::google::protobuf::Arena* arena) const {
  MultiIndexGetResponse* n = new MultiIndexGetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiIndexGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:similia.proto.MultiIndexGetResponse)
  processing_time_ms_ = GOOGLE_LONGLONG(0);
  compressed_elements_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MultiIndexGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:similia.proto.MultiIndexGetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 processing_time_ms = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &processing_time_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_compressed_elements;
        break;
      }

      // optional bytes compressed_elements = 3;
      case 3: {
        if (tag == 26) {
         parse_compressed_elements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_compressed_elements()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:similia.proto.MultiIndexGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:similia.proto.MultiIndexGetResponse)
  return false;
#undef DO_
}

void MultiIndexGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:similia.proto.MultiIndexGetResponse)
  // optional int64 processing_time_ms = 2;
  if (this->processing_time_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->processing_time_ms(), output);
  }

  // optional bytes compressed_elements = 3;
  if (this->compressed_elements().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->compressed_elements(), output);
  }

  // @@protoc_insertion_point(serialize_end:similia.proto.MultiIndexGetResponse)
}

::google::protobuf::uint8* MultiIndexGetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:similia.proto.MultiIndexGetResponse)
  // optional int64 processing_time_ms = 2;
  if (this->processing_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->processing_time_ms(), target);
  }

  // optional bytes compressed_elements = 3;
  if (this->compressed_elements().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->compressed_elements(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:similia.proto.MultiIndexGetResponse)
  return target;
}

int MultiIndexGetResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:similia.proto.MultiIndexGetResponse)
  int total_size = 0;

  // optional int64 processing_time_ms = 2;
  if (this->processing_time_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->processing_time_ms());
  }

  // optional bytes compressed_elements = 3;
  if (this->compressed_elements().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->compressed_elements());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiIndexGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:similia.proto.MultiIndexGetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MultiIndexGetResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiIndexGetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:similia.proto.MultiIndexGetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:similia.proto.MultiIndexGetResponse)
    MergeFrom(*source);
  }
}

void MultiIndexGetResponse::MergeFrom(const MultiIndexGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:similia.proto.MultiIndexGetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.processing_time_ms() != 0) {
    set_processing_time_ms(from.processing_time_ms());
  }
  if (from.compressed_elements().size() > 0) {

    compressed_elements_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.compressed_elements_);
  }
}

void MultiIndexGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:similia.proto.MultiIndexGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiIndexGetResponse::CopyFrom(const MultiIndexGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:similia.proto.MultiIndexGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiIndexGetResponse::IsInitialized() const {

  return true;
}

void MultiIndexGetResponse::Swap(MultiIndexGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiIndexGetResponse::InternalSwap(MultiIndexGetResponse* other) {
  std::swap(processing_time_ms_, other->processing_time_ms_);
  compressed_elements_.Swap(&other->compressed_elements_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiIndexGetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiIndexGetResponse_descriptor_;
  metadata.reflection = MultiIndexGetResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiIndexGetResponse

// optional int64 processing_time_ms = 2;
void MultiIndexGetResponse::clear_processing_time_ms() {
  processing_time_ms_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MultiIndexGetResponse::processing_time_ms() const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexGetResponse.processing_time_ms)
  return processing_time_ms_;
}
 void MultiIndexGetResponse::set_processing_time_ms(::google::protobuf::int64 value) {
  
  processing_time_ms_ = value;
  // @@protoc_insertion_point(field_set:similia.proto.MultiIndexGetResponse.processing_time_ms)
}

// optional bytes compressed_elements = 3;
void MultiIndexGetResponse::clear_compressed_elements() {
  compressed_elements_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MultiIndexGetResponse::compressed_elements() const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexGetResponse.compressed_elements)
  return compressed_elements_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MultiIndexGetResponse::set_compressed_elements(const ::std::string& value) {
  
  compressed_elements_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:similia.proto.MultiIndexGetResponse.compressed_elements)
}
 void MultiIndexGetResponse::set_compressed_elements(const char* value) {
  
  compressed_elements_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:similia.proto.MultiIndexGetResponse.compressed_elements)
}
 void MultiIndexGetResponse::set_compressed_elements(const void* value, size_t size) {
  
  compressed_elements_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:similia.proto.MultiIndexGetResponse.compressed_elements)
}
 ::std::string* MultiIndexGetResponse::mutable_compressed_elements() {
  
  // @@protoc_insertion_point(field_mutable:similia.proto.MultiIndexGetResponse.compressed_elements)
  return compressed_elements_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MultiIndexGetResponse::release_compressed_elements() {
  // @@protoc_insertion_point(field_release:similia.proto.MultiIndexGetResponse.compressed_elements)
  
  return compressed_elements_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MultiIndexGetResponse::set_allocated_compressed_elements(::std::string* compressed_elements) {
  if (compressed_elements != NULL) {
    
  } else {
    
  }
  compressed_elements_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), compressed_elements);
  // @@protoc_insertion_point(field_set_allocated:similia.proto.MultiIndexGetResponse.compressed_elements)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiIndexMultiGetRequest::kIndexingIdsFieldNumber;
const int MultiIndexMultiGetRequest::kCountLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiIndexMultiGetRequest::MultiIndexMultiGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:similia.proto.MultiIndexMultiGetRequest)
}

void MultiIndexMultiGetRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MultiIndexMultiGetRequest::MultiIndexMultiGetRequest(const MultiIndexMultiGetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:similia.proto.MultiIndexMultiGetRequest)
}

void MultiIndexMultiGetRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  count_limit_ = 0;
}

MultiIndexMultiGetRequest::~MultiIndexMultiGetRequest() {
  // @@protoc_insertion_point(destructor:similia.proto.MultiIndexMultiGetRequest)
  SharedDtor();
}

void MultiIndexMultiGetRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MultiIndexMultiGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiIndexMultiGetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiIndexMultiGetRequest_descriptor_;
}

const MultiIndexMultiGetRequest& MultiIndexMultiGetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto();
  return *default_instance_;
}

MultiIndexMultiGetRequest* MultiIndexMultiGetRequest::default_instance_ = NULL;

MultiIndexMultiGetRequest* MultiIndexMultiGetRequest::New(::google::protobuf::Arena* arena) const {
  MultiIndexMultiGetRequest* n = new MultiIndexMultiGetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiIndexMultiGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:similia.proto.MultiIndexMultiGetRequest)
  count_limit_ = 0;
  indexing_ids_.Clear();
}

bool MultiIndexMultiGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:similia.proto.MultiIndexMultiGetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .similia.proto.IndexingClustersIds indexing_ids = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_indexing_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_indexing_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_indexing_ids;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_count_limit;
        break;
      }

      // optional int32 count_limit = 2;
      case 2: {
        if (tag == 16) {
         parse_count_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_limit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:similia.proto.MultiIndexMultiGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:similia.proto.MultiIndexMultiGetRequest)
  return false;
#undef DO_
}

void MultiIndexMultiGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:similia.proto.MultiIndexMultiGetRequest)
  // repeated .similia.proto.IndexingClustersIds indexing_ids = 1;
  for (unsigned int i = 0, n = this->indexing_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->indexing_ids(i), output);
  }

  // optional int32 count_limit = 2;
  if (this->count_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count_limit(), output);
  }

  // @@protoc_insertion_point(serialize_end:similia.proto.MultiIndexMultiGetRequest)
}

::google::protobuf::uint8* MultiIndexMultiGetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:similia.proto.MultiIndexMultiGetRequest)
  // repeated .similia.proto.IndexingClustersIds indexing_ids = 1;
  for (unsigned int i = 0, n = this->indexing_ids_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->indexing_ids(i), false, target);
  }

  // optional int32 count_limit = 2;
  if (this->count_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count_limit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:similia.proto.MultiIndexMultiGetRequest)
  return target;
}

int MultiIndexMultiGetRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:similia.proto.MultiIndexMultiGetRequest)
  int total_size = 0;

  // optional int32 count_limit = 2;
  if (this->count_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count_limit());
  }

  // repeated .similia.proto.IndexingClustersIds indexing_ids = 1;
  total_size += 1 * this->indexing_ids_size();
  for (int i = 0; i < this->indexing_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->indexing_ids(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiIndexMultiGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:similia.proto.MultiIndexMultiGetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MultiIndexMultiGetRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiIndexMultiGetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:similia.proto.MultiIndexMultiGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:similia.proto.MultiIndexMultiGetRequest)
    MergeFrom(*source);
  }
}

void MultiIndexMultiGetRequest::MergeFrom(const MultiIndexMultiGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:similia.proto.MultiIndexMultiGetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  indexing_ids_.MergeFrom(from.indexing_ids_);
  if (from.count_limit() != 0) {
    set_count_limit(from.count_limit());
  }
}

void MultiIndexMultiGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:similia.proto.MultiIndexMultiGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiIndexMultiGetRequest::CopyFrom(const MultiIndexMultiGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:similia.proto.MultiIndexMultiGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiIndexMultiGetRequest::IsInitialized() const {

  return true;
}

void MultiIndexMultiGetRequest::Swap(MultiIndexMultiGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiIndexMultiGetRequest::InternalSwap(MultiIndexMultiGetRequest* other) {
  indexing_ids_.UnsafeArenaSwap(&other->indexing_ids_);
  std::swap(count_limit_, other->count_limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiIndexMultiGetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiIndexMultiGetRequest_descriptor_;
  metadata.reflection = MultiIndexMultiGetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiIndexMultiGetRequest

// repeated .similia.proto.IndexingClustersIds indexing_ids = 1;
int MultiIndexMultiGetRequest::indexing_ids_size() const {
  return indexing_ids_.size();
}
void MultiIndexMultiGetRequest::clear_indexing_ids() {
  indexing_ids_.Clear();
}
const ::similia::proto::IndexingClustersIds& MultiIndexMultiGetRequest::indexing_ids(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexMultiGetRequest.indexing_ids)
  return indexing_ids_.Get(index);
}
::similia::proto::IndexingClustersIds* MultiIndexMultiGetRequest::mutable_indexing_ids(int index) {
  // @@protoc_insertion_point(field_mutable:similia.proto.MultiIndexMultiGetRequest.indexing_ids)
  return indexing_ids_.Mutable(index);
}
::similia::proto::IndexingClustersIds* MultiIndexMultiGetRequest::add_indexing_ids() {
  // @@protoc_insertion_point(field_add:similia.proto.MultiIndexMultiGetRequest.indexing_ids)
  return indexing_ids_.Add();
}
::google::protobuf::RepeatedPtrField< ::similia::proto::IndexingClustersIds >*
MultiIndexMultiGetRequest::mutable_indexing_ids() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.MultiIndexMultiGetRequest.indexing_ids)
  return &indexing_ids_;
}
const ::google::protobuf::RepeatedPtrField< ::similia::proto::IndexingClustersIds >&
MultiIndexMultiGetRequest::indexing_ids() const {
  // @@protoc_insertion_point(field_list:similia.proto.MultiIndexMultiGetRequest.indexing_ids)
  return indexing_ids_;
}

// optional int32 count_limit = 2;
void MultiIndexMultiGetRequest::clear_count_limit() {
  count_limit_ = 0;
}
 ::google::protobuf::int32 MultiIndexMultiGetRequest::count_limit() const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexMultiGetRequest.count_limit)
  return count_limit_;
}
 void MultiIndexMultiGetRequest::set_count_limit(::google::protobuf::int32 value) {
  
  count_limit_ = value;
  // @@protoc_insertion_point(field_set:similia.proto.MultiIndexMultiGetRequest.count_limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiIndexMultiGetResponse::kProcessingTimeMsFieldNumber;
const int MultiIndexMultiGetResponse::kCompressedElementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiIndexMultiGetResponse::MultiIndexMultiGetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:similia.proto.MultiIndexMultiGetResponse)
}

void MultiIndexMultiGetResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MultiIndexMultiGetResponse::MultiIndexMultiGetResponse(const MultiIndexMultiGetResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:similia.proto.MultiIndexMultiGetResponse)
}

void MultiIndexMultiGetResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  processing_time_ms_ = GOOGLE_LONGLONG(0);
}

MultiIndexMultiGetResponse::~MultiIndexMultiGetResponse() {
  // @@protoc_insertion_point(destructor:similia.proto.MultiIndexMultiGetResponse)
  SharedDtor();
}

void MultiIndexMultiGetResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MultiIndexMultiGetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiIndexMultiGetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiIndexMultiGetResponse_descriptor_;
}

const MultiIndexMultiGetResponse& MultiIndexMultiGetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto();
  return *default_instance_;
}

MultiIndexMultiGetResponse* MultiIndexMultiGetResponse::default_instance_ = NULL;

MultiIndexMultiGetResponse* MultiIndexMultiGetResponse::New(::google::protobuf::Arena* arena) const {
  MultiIndexMultiGetResponse* n = new MultiIndexMultiGetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiIndexMultiGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:similia.proto.MultiIndexMultiGetResponse)
  processing_time_ms_ = GOOGLE_LONGLONG(0);
  compressed_elements_.Clear();
}

bool MultiIndexMultiGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:similia.proto.MultiIndexMultiGetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 processing_time_ms = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &processing_time_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_compressed_elements;
        break;
      }

      // repeated bytes compressed_elements = 3;
      case 3: {
        if (tag == 26) {
         parse_compressed_elements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_compressed_elements()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_compressed_elements;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:similia.proto.MultiIndexMultiGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:similia.proto.MultiIndexMultiGetResponse)
  return false;
#undef DO_
}

void MultiIndexMultiGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:similia.proto.MultiIndexMultiGetResponse)
  // optional int64 processing_time_ms = 2;
  if (this->processing_time_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->processing_time_ms(), output);
  }

  // repeated bytes compressed_elements = 3;
  for (int i = 0; i < this->compressed_elements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->compressed_elements(i), output);
  }

  // @@protoc_insertion_point(serialize_end:similia.proto.MultiIndexMultiGetResponse)
}

::google::protobuf::uint8* MultiIndexMultiGetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:similia.proto.MultiIndexMultiGetResponse)
  // optional int64 processing_time_ms = 2;
  if (this->processing_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->processing_time_ms(), target);
  }

  // repeated bytes compressed_elements = 3;
  for (int i = 0; i < this->compressed_elements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->compressed_elements(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:similia.proto.MultiIndexMultiGetResponse)
  return target;
}

int MultiIndexMultiGetResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:similia.proto.MultiIndexMultiGetResponse)
  int total_size = 0;

  // optional int64 processing_time_ms = 2;
  if (this->processing_time_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->processing_time_ms());
  }

  // repeated bytes compressed_elements = 3;
  total_size += 1 * this->compressed_elements_size();
  for (int i = 0; i < this->compressed_elements_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->compressed_elements(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiIndexMultiGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:similia.proto.MultiIndexMultiGetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MultiIndexMultiGetResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiIndexMultiGetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:similia.proto.MultiIndexMultiGetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:similia.proto.MultiIndexMultiGetResponse)
    MergeFrom(*source);
  }
}

void MultiIndexMultiGetResponse::MergeFrom(const MultiIndexMultiGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:similia.proto.MultiIndexMultiGetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  compressed_elements_.MergeFrom(from.compressed_elements_);
  if (from.processing_time_ms() != 0) {
    set_processing_time_ms(from.processing_time_ms());
  }
}

void MultiIndexMultiGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:similia.proto.MultiIndexMultiGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiIndexMultiGetResponse::CopyFrom(const MultiIndexMultiGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:similia.proto.MultiIndexMultiGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiIndexMultiGetResponse::IsInitialized() const {

  return true;
}

void MultiIndexMultiGetResponse::Swap(MultiIndexMultiGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiIndexMultiGetResponse::InternalSwap(MultiIndexMultiGetResponse* other) {
  std::swap(processing_time_ms_, other->processing_time_ms_);
  compressed_elements_.UnsafeArenaSwap(&other->compressed_elements_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiIndexMultiGetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiIndexMultiGetResponse_descriptor_;
  metadata.reflection = MultiIndexMultiGetResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiIndexMultiGetResponse

// optional int64 processing_time_ms = 2;
void MultiIndexMultiGetResponse::clear_processing_time_ms() {
  processing_time_ms_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MultiIndexMultiGetResponse::processing_time_ms() const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexMultiGetResponse.processing_time_ms)
  return processing_time_ms_;
}
 void MultiIndexMultiGetResponse::set_processing_time_ms(::google::protobuf::int64 value) {
  
  processing_time_ms_ = value;
  // @@protoc_insertion_point(field_set:similia.proto.MultiIndexMultiGetResponse.processing_time_ms)
}

// repeated bytes compressed_elements = 3;
int MultiIndexMultiGetResponse::compressed_elements_size() const {
  return compressed_elements_.size();
}
void MultiIndexMultiGetResponse::clear_compressed_elements() {
  compressed_elements_.Clear();
}
 const ::std::string& MultiIndexMultiGetResponse::compressed_elements(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexMultiGetResponse.compressed_elements)
  return compressed_elements_.Get(index);
}
 ::std::string* MultiIndexMultiGetResponse::mutable_compressed_elements(int index) {
  // @@protoc_insertion_point(field_mutable:similia.proto.MultiIndexMultiGetResponse.compressed_elements)
  return compressed_elements_.Mutable(index);
}
 void MultiIndexMultiGetResponse::set_compressed_elements(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:similia.proto.MultiIndexMultiGetResponse.compressed_elements)
  compressed_elements_.Mutable(index)->assign(value);
}
 void MultiIndexMultiGetResponse::set_compressed_elements(int index, const char* value) {
  compressed_elements_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:similia.proto.MultiIndexMultiGetResponse.compressed_elements)
}
 void MultiIndexMultiGetResponse::set_compressed_elements(int index, const void* value, size_t size) {
  compressed_elements_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:similia.proto.MultiIndexMultiGetResponse.compressed_elements)
}
 ::std::string* MultiIndexMultiGetResponse::add_compressed_elements() {
  // @@protoc_insertion_point(field_add_mutable:similia.proto.MultiIndexMultiGetResponse.compressed_elements)
  return compressed_elements_.Add();
}
 void MultiIndexMultiGetResponse::add_compressed_elements(const ::std::string& value) {
  compressed_elements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:similia.proto.MultiIndexMultiGetResponse.compressed_elements)
}
 void MultiIndexMultiGetResponse::add_compressed_elements(const char* value) {
  compressed_elements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:similia.proto.MultiIndexMultiGetResponse.compressed_elements)
}
 void MultiIndexMultiGetResponse::add_compressed_elements(const void* value, size_t size) {
  compressed_elements_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:similia.proto.MultiIndexMultiGetResponse.compressed_elements)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MultiIndexMultiGetResponse::compressed_elements() const {
  // @@protoc_insertion_point(field_list:similia.proto.MultiIndexMultiGetResponse.compressed_elements)
  return compressed_elements_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MultiIndexMultiGetResponse::mutable_compressed_elements() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.MultiIndexMultiGetResponse.compressed_elements)
  return &compressed_elements_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiIndexMultiCountRequest::kIndexingIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiIndexMultiCountRequest::MultiIndexMultiCountRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:similia.proto.MultiIndexMultiCountRequest)
}

void MultiIndexMultiCountRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MultiIndexMultiCountRequest::MultiIndexMultiCountRequest(const MultiIndexMultiCountRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:similia.proto.MultiIndexMultiCountRequest)
}

void MultiIndexMultiCountRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

MultiIndexMultiCountRequest::~MultiIndexMultiCountRequest() {
  // @@protoc_insertion_point(destructor:similia.proto.MultiIndexMultiCountRequest)
  SharedDtor();
}

void MultiIndexMultiCountRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MultiIndexMultiCountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiIndexMultiCountRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiIndexMultiCountRequest_descriptor_;
}

const MultiIndexMultiCountRequest& MultiIndexMultiCountRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto();
  return *default_instance_;
}

MultiIndexMultiCountRequest* MultiIndexMultiCountRequest::default_instance_ = NULL;

MultiIndexMultiCountRequest* MultiIndexMultiCountRequest::New(::google::protobuf::Arena* arena) const {
  MultiIndexMultiCountRequest* n = new MultiIndexMultiCountRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiIndexMultiCountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:similia.proto.MultiIndexMultiCountRequest)
  indexing_ids_.Clear();
}

bool MultiIndexMultiCountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:similia.proto.MultiIndexMultiCountRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .similia.proto.IndexingClustersIds indexing_ids = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_indexing_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_indexing_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_indexing_ids;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:similia.proto.MultiIndexMultiCountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:similia.proto.MultiIndexMultiCountRequest)
  return false;
#undef DO_
}

void MultiIndexMultiCountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:similia.proto.MultiIndexMultiCountRequest)
  // repeated .similia.proto.IndexingClustersIds indexing_ids = 1;
  for (unsigned int i = 0, n = this->indexing_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->indexing_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:similia.proto.MultiIndexMultiCountRequest)
}

::google::protobuf::uint8* MultiIndexMultiCountRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:similia.proto.MultiIndexMultiCountRequest)
  // repeated .similia.proto.IndexingClustersIds indexing_ids = 1;
  for (unsigned int i = 0, n = this->indexing_ids_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->indexing_ids(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:similia.proto.MultiIndexMultiCountRequest)
  return target;
}

int MultiIndexMultiCountRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:similia.proto.MultiIndexMultiCountRequest)
  int total_size = 0;

  // repeated .similia.proto.IndexingClustersIds indexing_ids = 1;
  total_size += 1 * this->indexing_ids_size();
  for (int i = 0; i < this->indexing_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->indexing_ids(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiIndexMultiCountRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:similia.proto.MultiIndexMultiCountRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MultiIndexMultiCountRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiIndexMultiCountRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:similia.proto.MultiIndexMultiCountRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:similia.proto.MultiIndexMultiCountRequest)
    MergeFrom(*source);
  }
}

void MultiIndexMultiCountRequest::MergeFrom(const MultiIndexMultiCountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:similia.proto.MultiIndexMultiCountRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  indexing_ids_.MergeFrom(from.indexing_ids_);
}

void MultiIndexMultiCountRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:similia.proto.MultiIndexMultiCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiIndexMultiCountRequest::CopyFrom(const MultiIndexMultiCountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:similia.proto.MultiIndexMultiCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiIndexMultiCountRequest::IsInitialized() const {

  return true;
}

void MultiIndexMultiCountRequest::Swap(MultiIndexMultiCountRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiIndexMultiCountRequest::InternalSwap(MultiIndexMultiCountRequest* other) {
  indexing_ids_.UnsafeArenaSwap(&other->indexing_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiIndexMultiCountRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiIndexMultiCountRequest_descriptor_;
  metadata.reflection = MultiIndexMultiCountRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiIndexMultiCountRequest

// repeated .similia.proto.IndexingClustersIds indexing_ids = 1;
int MultiIndexMultiCountRequest::indexing_ids_size() const {
  return indexing_ids_.size();
}
void MultiIndexMultiCountRequest::clear_indexing_ids() {
  indexing_ids_.Clear();
}
const ::similia::proto::IndexingClustersIds& MultiIndexMultiCountRequest::indexing_ids(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexMultiCountRequest.indexing_ids)
  return indexing_ids_.Get(index);
}
::similia::proto::IndexingClustersIds* MultiIndexMultiCountRequest::mutable_indexing_ids(int index) {
  // @@protoc_insertion_point(field_mutable:similia.proto.MultiIndexMultiCountRequest.indexing_ids)
  return indexing_ids_.Mutable(index);
}
::similia::proto::IndexingClustersIds* MultiIndexMultiCountRequest::add_indexing_ids() {
  // @@protoc_insertion_point(field_add:similia.proto.MultiIndexMultiCountRequest.indexing_ids)
  return indexing_ids_.Add();
}
::google::protobuf::RepeatedPtrField< ::similia::proto::IndexingClustersIds >*
MultiIndexMultiCountRequest::mutable_indexing_ids() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.MultiIndexMultiCountRequest.indexing_ids)
  return &indexing_ids_;
}
const ::google::protobuf::RepeatedPtrField< ::similia::proto::IndexingClustersIds >&
MultiIndexMultiCountRequest::indexing_ids() const {
  // @@protoc_insertion_point(field_list:similia.proto.MultiIndexMultiCountRequest.indexing_ids)
  return indexing_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiIndexMultiCountResponse::kProcessingTimeMsFieldNumber;
const int MultiIndexMultiCountResponse::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiIndexMultiCountResponse::MultiIndexMultiCountResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:similia.proto.MultiIndexMultiCountResponse)
}

void MultiIndexMultiCountResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MultiIndexMultiCountResponse::MultiIndexMultiCountResponse(const MultiIndexMultiCountResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:similia.proto.MultiIndexMultiCountResponse)
}

void MultiIndexMultiCountResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  processing_time_ms_ = GOOGLE_LONGLONG(0);
}

MultiIndexMultiCountResponse::~MultiIndexMultiCountResponse() {
  // @@protoc_insertion_point(destructor:similia.proto.MultiIndexMultiCountResponse)
  SharedDtor();
}

void MultiIndexMultiCountResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MultiIndexMultiCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiIndexMultiCountResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiIndexMultiCountResponse_descriptor_;
}

const MultiIndexMultiCountResponse& MultiIndexMultiCountResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto();
  return *default_instance_;
}

MultiIndexMultiCountResponse* MultiIndexMultiCountResponse::default_instance_ = NULL;

MultiIndexMultiCountResponse* MultiIndexMultiCountResponse::New(::google::protobuf::Arena* arena) const {
  MultiIndexMultiCountResponse* n = new MultiIndexMultiCountResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiIndexMultiCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:similia.proto.MultiIndexMultiCountResponse)
  processing_time_ms_ = GOOGLE_LONGLONG(0);
  count_.Clear();
}

bool MultiIndexMultiCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:similia.proto.MultiIndexMultiCountResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 processing_time_ms = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &processing_time_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_count;
        break;
      }

      // repeated int32 count = 3;
      case 3: {
        if (tag == 26) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_count())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_count())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:similia.proto.MultiIndexMultiCountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:similia.proto.MultiIndexMultiCountResponse)
  return false;
#undef DO_
}

void MultiIndexMultiCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:similia.proto.MultiIndexMultiCountResponse)
  // optional int64 processing_time_ms = 2;
  if (this->processing_time_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->processing_time_ms(), output);
  }

  // repeated int32 count = 3;
  if (this->count_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_count_cached_byte_size_);
  }
  for (int i = 0; i < this->count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->count(i), output);
  }

  // @@protoc_insertion_point(serialize_end:similia.proto.MultiIndexMultiCountResponse)
}

::google::protobuf::uint8* MultiIndexMultiCountResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:similia.proto.MultiIndexMultiCountResponse)
  // optional int64 processing_time_ms = 2;
  if (this->processing_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->processing_time_ms(), target);
  }

  // repeated int32 count = 3;
  if (this->count_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _count_cached_byte_size_, target);
  }
  for (int i = 0; i < this->count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->count(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:similia.proto.MultiIndexMultiCountResponse)
  return target;
}

int MultiIndexMultiCountResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:similia.proto.MultiIndexMultiCountResponse)
  int total_size = 0;

  // optional int64 processing_time_ms = 2;
  if (this->processing_time_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->processing_time_ms());
  }

  // repeated int32 count = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->count(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _count_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiIndexMultiCountResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:similia.proto.MultiIndexMultiCountResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MultiIndexMultiCountResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiIndexMultiCountResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:similia.proto.MultiIndexMultiCountResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:similia.proto.MultiIndexMultiCountResponse)
    MergeFrom(*source);
  }
}

void MultiIndexMultiCountResponse::MergeFrom(const MultiIndexMultiCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:similia.proto.MultiIndexMultiCountResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  count_.MergeFrom(from.count_);
  if (from.processing_time_ms() != 0) {
    set_processing_time_ms(from.processing_time_ms());
  }
}

void MultiIndexMultiCountResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:similia.proto.MultiIndexMultiCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiIndexMultiCountResponse::CopyFrom(const MultiIndexMultiCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:similia.proto.MultiIndexMultiCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiIndexMultiCountResponse::IsInitialized() const {

  return true;
}

void MultiIndexMultiCountResponse::Swap(MultiIndexMultiCountResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiIndexMultiCountResponse::InternalSwap(MultiIndexMultiCountResponse* other) {
  std::swap(processing_time_ms_, other->processing_time_ms_);
  count_.UnsafeArenaSwap(&other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiIndexMultiCountResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiIndexMultiCountResponse_descriptor_;
  metadata.reflection = MultiIndexMultiCountResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiIndexMultiCountResponse

// optional int64 processing_time_ms = 2;
void MultiIndexMultiCountResponse::clear_processing_time_ms() {
  processing_time_ms_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MultiIndexMultiCountResponse::processing_time_ms() const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexMultiCountResponse.processing_time_ms)
  return processing_time_ms_;
}
 void MultiIndexMultiCountResponse::set_processing_time_ms(::google::protobuf::int64 value) {
  
  processing_time_ms_ = value;
  // @@protoc_insertion_point(field_set:similia.proto.MultiIndexMultiCountResponse.processing_time_ms)
}

// repeated int32 count = 3;
int MultiIndexMultiCountResponse::count_size() const {
  return count_.size();
}
void MultiIndexMultiCountResponse::clear_count() {
  count_.Clear();
}
 ::google::protobuf::int32 MultiIndexMultiCountResponse::count(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexMultiCountResponse.count)
  return count_.Get(index);
}
 void MultiIndexMultiCountResponse::set_count(int index, ::google::protobuf::int32 value) {
  count_.Set(index, value);
  // @@protoc_insertion_point(field_set:similia.proto.MultiIndexMultiCountResponse.count)
}
 void MultiIndexMultiCountResponse::add_count(::google::protobuf::int32 value) {
  count_.Add(value);
  // @@protoc_insertion_point(field_add:similia.proto.MultiIndexMultiCountResponse.count)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MultiIndexMultiCountResponse::count() const {
  // @@protoc_insertion_point(field_list:similia.proto.MultiIndexMultiCountResponse.count)
  return count_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MultiIndexMultiCountResponse::mutable_count() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.MultiIndexMultiCountResponse.count)
  return &count_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiIndexMultiAddRequest::kMultiIndexAddRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiIndexMultiAddRequest::MultiIndexMultiAddRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:similia.proto.MultiIndexMultiAddRequest)
}

void MultiIndexMultiAddRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MultiIndexMultiAddRequest::MultiIndexMultiAddRequest(const MultiIndexMultiAddRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:similia.proto.MultiIndexMultiAddRequest)
}

void MultiIndexMultiAddRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

MultiIndexMultiAddRequest::~MultiIndexMultiAddRequest() {
  // @@protoc_insertion_point(destructor:similia.proto.MultiIndexMultiAddRequest)
  SharedDtor();
}

void MultiIndexMultiAddRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MultiIndexMultiAddRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiIndexMultiAddRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiIndexMultiAddRequest_descriptor_;
}

const MultiIndexMultiAddRequest& MultiIndexMultiAddRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto();
  return *default_instance_;
}

MultiIndexMultiAddRequest* MultiIndexMultiAddRequest::default_instance_ = NULL;

MultiIndexMultiAddRequest* MultiIndexMultiAddRequest::New(::google::protobuf::Arena* arena) const {
  MultiIndexMultiAddRequest* n = new MultiIndexMultiAddRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiIndexMultiAddRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:similia.proto.MultiIndexMultiAddRequest)
  multi_index_add_request_.Clear();
}

bool MultiIndexMultiAddRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:similia.proto.MultiIndexMultiAddRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .similia.proto.MultiIndexAddRequest multi_index_add_request = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_multi_index_add_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_multi_index_add_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_multi_index_add_request;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:similia.proto.MultiIndexMultiAddRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:similia.proto.MultiIndexMultiAddRequest)
  return false;
#undef DO_
}

void MultiIndexMultiAddRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:similia.proto.MultiIndexMultiAddRequest)
  // repeated .similia.proto.MultiIndexAddRequest multi_index_add_request = 1;
  for (unsigned int i = 0, n = this->multi_index_add_request_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->multi_index_add_request(i), output);
  }

  // @@protoc_insertion_point(serialize_end:similia.proto.MultiIndexMultiAddRequest)
}

::google::protobuf::uint8* MultiIndexMultiAddRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:similia.proto.MultiIndexMultiAddRequest)
  // repeated .similia.proto.MultiIndexAddRequest multi_index_add_request = 1;
  for (unsigned int i = 0, n = this->multi_index_add_request_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->multi_index_add_request(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:similia.proto.MultiIndexMultiAddRequest)
  return target;
}

int MultiIndexMultiAddRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:similia.proto.MultiIndexMultiAddRequest)
  int total_size = 0;

  // repeated .similia.proto.MultiIndexAddRequest multi_index_add_request = 1;
  total_size += 1 * this->multi_index_add_request_size();
  for (int i = 0; i < this->multi_index_add_request_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->multi_index_add_request(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiIndexMultiAddRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:similia.proto.MultiIndexMultiAddRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MultiIndexMultiAddRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiIndexMultiAddRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:similia.proto.MultiIndexMultiAddRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:similia.proto.MultiIndexMultiAddRequest)
    MergeFrom(*source);
  }
}

void MultiIndexMultiAddRequest::MergeFrom(const MultiIndexMultiAddRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:similia.proto.MultiIndexMultiAddRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  multi_index_add_request_.MergeFrom(from.multi_index_add_request_);
}

void MultiIndexMultiAddRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:similia.proto.MultiIndexMultiAddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiIndexMultiAddRequest::CopyFrom(const MultiIndexMultiAddRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:similia.proto.MultiIndexMultiAddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiIndexMultiAddRequest::IsInitialized() const {

  return true;
}

void MultiIndexMultiAddRequest::Swap(MultiIndexMultiAddRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiIndexMultiAddRequest::InternalSwap(MultiIndexMultiAddRequest* other) {
  multi_index_add_request_.UnsafeArenaSwap(&other->multi_index_add_request_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiIndexMultiAddRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiIndexMultiAddRequest_descriptor_;
  metadata.reflection = MultiIndexMultiAddRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiIndexMultiAddRequest

// repeated .similia.proto.MultiIndexAddRequest multi_index_add_request = 1;
int MultiIndexMultiAddRequest::multi_index_add_request_size() const {
  return multi_index_add_request_.size();
}
void MultiIndexMultiAddRequest::clear_multi_index_add_request() {
  multi_index_add_request_.Clear();
}
const ::similia::proto::MultiIndexAddRequest& MultiIndexMultiAddRequest::multi_index_add_request(int index) const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexMultiAddRequest.multi_index_add_request)
  return multi_index_add_request_.Get(index);
}
::similia::proto::MultiIndexAddRequest* MultiIndexMultiAddRequest::mutable_multi_index_add_request(int index) {
  // @@protoc_insertion_point(field_mutable:similia.proto.MultiIndexMultiAddRequest.multi_index_add_request)
  return multi_index_add_request_.Mutable(index);
}
::similia::proto::MultiIndexAddRequest* MultiIndexMultiAddRequest::add_multi_index_add_request() {
  // @@protoc_insertion_point(field_add:similia.proto.MultiIndexMultiAddRequest.multi_index_add_request)
  return multi_index_add_request_.Add();
}
::google::protobuf::RepeatedPtrField< ::similia::proto::MultiIndexAddRequest >*
MultiIndexMultiAddRequest::mutable_multi_index_add_request() {
  // @@protoc_insertion_point(field_mutable_list:similia.proto.MultiIndexMultiAddRequest.multi_index_add_request)
  return &multi_index_add_request_;
}
const ::google::protobuf::RepeatedPtrField< ::similia::proto::MultiIndexAddRequest >&
MultiIndexMultiAddRequest::multi_index_add_request() const {
  // @@protoc_insertion_point(field_list:similia.proto.MultiIndexMultiAddRequest.multi_index_add_request)
  return multi_index_add_request_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiIndexMultiAddResponse::kProcessingTimeMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiIndexMultiAddResponse::MultiIndexMultiAddResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:similia.proto.MultiIndexMultiAddResponse)
}

void MultiIndexMultiAddResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MultiIndexMultiAddResponse::MultiIndexMultiAddResponse(const MultiIndexMultiAddResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:similia.proto.MultiIndexMultiAddResponse)
}

void MultiIndexMultiAddResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  processing_time_ms_ = GOOGLE_LONGLONG(0);
}

MultiIndexMultiAddResponse::~MultiIndexMultiAddResponse() {
  // @@protoc_insertion_point(destructor:similia.proto.MultiIndexMultiAddResponse)
  SharedDtor();
}

void MultiIndexMultiAddResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MultiIndexMultiAddResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiIndexMultiAddResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiIndexMultiAddResponse_descriptor_;
}

const MultiIndexMultiAddResponse& MultiIndexMultiAddResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto();
  return *default_instance_;
}

MultiIndexMultiAddResponse* MultiIndexMultiAddResponse::default_instance_ = NULL;

MultiIndexMultiAddResponse* MultiIndexMultiAddResponse::New(::google::protobuf::Arena* arena) const {
  MultiIndexMultiAddResponse* n = new MultiIndexMultiAddResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiIndexMultiAddResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:similia.proto.MultiIndexMultiAddResponse)
  processing_time_ms_ = GOOGLE_LONGLONG(0);
}

bool MultiIndexMultiAddResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:similia.proto.MultiIndexMultiAddResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 processing_time_ms = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &processing_time_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:similia.proto.MultiIndexMultiAddResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:similia.proto.MultiIndexMultiAddResponse)
  return false;
#undef DO_
}

void MultiIndexMultiAddResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:similia.proto.MultiIndexMultiAddResponse)
  // optional int64 processing_time_ms = 2;
  if (this->processing_time_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->processing_time_ms(), output);
  }

  // @@protoc_insertion_point(serialize_end:similia.proto.MultiIndexMultiAddResponse)
}

::google::protobuf::uint8* MultiIndexMultiAddResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:similia.proto.MultiIndexMultiAddResponse)
  // optional int64 processing_time_ms = 2;
  if (this->processing_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->processing_time_ms(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:similia.proto.MultiIndexMultiAddResponse)
  return target;
}

int MultiIndexMultiAddResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:similia.proto.MultiIndexMultiAddResponse)
  int total_size = 0;

  // optional int64 processing_time_ms = 2;
  if (this->processing_time_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->processing_time_ms());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiIndexMultiAddResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:similia.proto.MultiIndexMultiAddResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MultiIndexMultiAddResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiIndexMultiAddResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:similia.proto.MultiIndexMultiAddResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:similia.proto.MultiIndexMultiAddResponse)
    MergeFrom(*source);
  }
}

void MultiIndexMultiAddResponse::MergeFrom(const MultiIndexMultiAddResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:similia.proto.MultiIndexMultiAddResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.processing_time_ms() != 0) {
    set_processing_time_ms(from.processing_time_ms());
  }
}

void MultiIndexMultiAddResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:similia.proto.MultiIndexMultiAddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiIndexMultiAddResponse::CopyFrom(const MultiIndexMultiAddResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:similia.proto.MultiIndexMultiAddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiIndexMultiAddResponse::IsInitialized() const {

  return true;
}

void MultiIndexMultiAddResponse::Swap(MultiIndexMultiAddResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiIndexMultiAddResponse::InternalSwap(MultiIndexMultiAddResponse* other) {
  std::swap(processing_time_ms_, other->processing_time_ms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiIndexMultiAddResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiIndexMultiAddResponse_descriptor_;
  metadata.reflection = MultiIndexMultiAddResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiIndexMultiAddResponse

// optional int64 processing_time_ms = 2;
void MultiIndexMultiAddResponse::clear_processing_time_ms() {
  processing_time_ms_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MultiIndexMultiAddResponse::processing_time_ms() const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexMultiAddResponse.processing_time_ms)
  return processing_time_ms_;
}
 void MultiIndexMultiAddResponse::set_processing_time_ms(::google::protobuf::int64 value) {
  
  processing_time_ms_ = value;
  // @@protoc_insertion_point(field_set:similia.proto.MultiIndexMultiAddResponse.processing_time_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiIndexDeleteRequest::kIdFieldNumber;
const int MultiIndexDeleteRequest::kIndexingIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiIndexDeleteRequest::MultiIndexDeleteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:similia.proto.MultiIndexDeleteRequest)
}

void MultiIndexDeleteRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  indexing_ids_ = const_cast< ::similia::proto::IndexingClustersIds*>(&::similia::proto::IndexingClustersIds::default_instance());
}

MultiIndexDeleteRequest::MultiIndexDeleteRequest(const MultiIndexDeleteRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:similia.proto.MultiIndexDeleteRequest)
}

void MultiIndexDeleteRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  indexing_ids_ = NULL;
}

MultiIndexDeleteRequest::~MultiIndexDeleteRequest() {
  // @@protoc_insertion_point(destructor:similia.proto.MultiIndexDeleteRequest)
  SharedDtor();
}

void MultiIndexDeleteRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete indexing_ids_;
  }
}

void MultiIndexDeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiIndexDeleteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiIndexDeleteRequest_descriptor_;
}

const MultiIndexDeleteRequest& MultiIndexDeleteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto();
  return *default_instance_;
}

MultiIndexDeleteRequest* MultiIndexDeleteRequest::default_instance_ = NULL;

MultiIndexDeleteRequest* MultiIndexDeleteRequest::New(::google::protobuf::Arena* arena) const {
  MultiIndexDeleteRequest* n = new MultiIndexDeleteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiIndexDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:similia.proto.MultiIndexDeleteRequest)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && indexing_ids_ != NULL) delete indexing_ids_;
  indexing_ids_ = NULL;
}

bool MultiIndexDeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:similia.proto.MultiIndexDeleteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "similia.proto.MultiIndexDeleteRequest.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_indexing_ids;
        break;
      }

      // optional .similia.proto.IndexingClustersIds indexing_ids = 2;
      case 2: {
        if (tag == 18) {
         parse_indexing_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_indexing_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:similia.proto.MultiIndexDeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:similia.proto.MultiIndexDeleteRequest)
  return false;
#undef DO_
}

void MultiIndexDeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:similia.proto.MultiIndexDeleteRequest)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "similia.proto.MultiIndexDeleteRequest.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional .similia.proto.IndexingClustersIds indexing_ids = 2;
  if (this->has_indexing_ids()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->indexing_ids_, output);
  }

  // @@protoc_insertion_point(serialize_end:similia.proto.MultiIndexDeleteRequest)
}

::google::protobuf::uint8* MultiIndexDeleteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:similia.proto.MultiIndexDeleteRequest)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "similia.proto.MultiIndexDeleteRequest.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .similia.proto.IndexingClustersIds indexing_ids = 2;
  if (this->has_indexing_ids()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->indexing_ids_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:similia.proto.MultiIndexDeleteRequest)
  return target;
}

int MultiIndexDeleteRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:similia.proto.MultiIndexDeleteRequest)
  int total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional .similia.proto.IndexingClustersIds indexing_ids = 2;
  if (this->has_indexing_ids()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->indexing_ids_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiIndexDeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:similia.proto.MultiIndexDeleteRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MultiIndexDeleteRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiIndexDeleteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:similia.proto.MultiIndexDeleteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:similia.proto.MultiIndexDeleteRequest)
    MergeFrom(*source);
  }
}

void MultiIndexDeleteRequest::MergeFrom(const MultiIndexDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:similia.proto.MultiIndexDeleteRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_indexing_ids()) {
    mutable_indexing_ids()->::similia::proto::IndexingClustersIds::MergeFrom(from.indexing_ids());
  }
}

void MultiIndexDeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:similia.proto.MultiIndexDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiIndexDeleteRequest::CopyFrom(const MultiIndexDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:similia.proto.MultiIndexDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiIndexDeleteRequest::IsInitialized() const {

  return true;
}

void MultiIndexDeleteRequest::Swap(MultiIndexDeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiIndexDeleteRequest::InternalSwap(MultiIndexDeleteRequest* other) {
  id_.Swap(&other->id_);
  std::swap(indexing_ids_, other->indexing_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiIndexDeleteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiIndexDeleteRequest_descriptor_;
  metadata.reflection = MultiIndexDeleteRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiIndexDeleteRequest

// optional string id = 1;
void MultiIndexDeleteRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MultiIndexDeleteRequest::id() const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexDeleteRequest.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MultiIndexDeleteRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:similia.proto.MultiIndexDeleteRequest.id)
}
 void MultiIndexDeleteRequest::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:similia.proto.MultiIndexDeleteRequest.id)
}
 void MultiIndexDeleteRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:similia.proto.MultiIndexDeleteRequest.id)
}
 ::std::string* MultiIndexDeleteRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:similia.proto.MultiIndexDeleteRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MultiIndexDeleteRequest::release_id() {
  // @@protoc_insertion_point(field_release:similia.proto.MultiIndexDeleteRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MultiIndexDeleteRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:similia.proto.MultiIndexDeleteRequest.id)
}

// optional .similia.proto.IndexingClustersIds indexing_ids = 2;
bool MultiIndexDeleteRequest::has_indexing_ids() const {
  return !_is_default_instance_ && indexing_ids_ != NULL;
}
void MultiIndexDeleteRequest::clear_indexing_ids() {
  if (GetArenaNoVirtual() == NULL && indexing_ids_ != NULL) delete indexing_ids_;
  indexing_ids_ = NULL;
}
const ::similia::proto::IndexingClustersIds& MultiIndexDeleteRequest::indexing_ids() const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexDeleteRequest.indexing_ids)
  return indexing_ids_ != NULL ? *indexing_ids_ : *default_instance_->indexing_ids_;
}
::similia::proto::IndexingClustersIds* MultiIndexDeleteRequest::mutable_indexing_ids() {
  
  if (indexing_ids_ == NULL) {
    indexing_ids_ = new ::similia::proto::IndexingClustersIds;
  }
  // @@protoc_insertion_point(field_mutable:similia.proto.MultiIndexDeleteRequest.indexing_ids)
  return indexing_ids_;
}
::similia::proto::IndexingClustersIds* MultiIndexDeleteRequest::release_indexing_ids() {
  // @@protoc_insertion_point(field_release:similia.proto.MultiIndexDeleteRequest.indexing_ids)
  
  ::similia::proto::IndexingClustersIds* temp = indexing_ids_;
  indexing_ids_ = NULL;
  return temp;
}
void MultiIndexDeleteRequest::set_allocated_indexing_ids(::similia::proto::IndexingClustersIds* indexing_ids) {
  delete indexing_ids_;
  indexing_ids_ = indexing_ids;
  if (indexing_ids) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:similia.proto.MultiIndexDeleteRequest.indexing_ids)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiIndexDeleteResponse::kProcessingTimeMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiIndexDeleteResponse::MultiIndexDeleteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:similia.proto.MultiIndexDeleteResponse)
}

void MultiIndexDeleteResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MultiIndexDeleteResponse::MultiIndexDeleteResponse(const MultiIndexDeleteResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:similia.proto.MultiIndexDeleteResponse)
}

void MultiIndexDeleteResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  processing_time_ms_ = GOOGLE_LONGLONG(0);
}

MultiIndexDeleteResponse::~MultiIndexDeleteResponse() {
  // @@protoc_insertion_point(destructor:similia.proto.MultiIndexDeleteResponse)
  SharedDtor();
}

void MultiIndexDeleteResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MultiIndexDeleteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiIndexDeleteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiIndexDeleteResponse_descriptor_;
}

const MultiIndexDeleteResponse& MultiIndexDeleteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto();
  return *default_instance_;
}

MultiIndexDeleteResponse* MultiIndexDeleteResponse::default_instance_ = NULL;

MultiIndexDeleteResponse* MultiIndexDeleteResponse::New(::google::protobuf::Arena* arena) const {
  MultiIndexDeleteResponse* n = new MultiIndexDeleteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiIndexDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:similia.proto.MultiIndexDeleteResponse)
  processing_time_ms_ = GOOGLE_LONGLONG(0);
}

bool MultiIndexDeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:similia.proto.MultiIndexDeleteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 processing_time_ms = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &processing_time_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:similia.proto.MultiIndexDeleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:similia.proto.MultiIndexDeleteResponse)
  return false;
#undef DO_
}

void MultiIndexDeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:similia.proto.MultiIndexDeleteResponse)
  // optional int64 processing_time_ms = 2;
  if (this->processing_time_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->processing_time_ms(), output);
  }

  // @@protoc_insertion_point(serialize_end:similia.proto.MultiIndexDeleteResponse)
}

::google::protobuf::uint8* MultiIndexDeleteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:similia.proto.MultiIndexDeleteResponse)
  // optional int64 processing_time_ms = 2;
  if (this->processing_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->processing_time_ms(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:similia.proto.MultiIndexDeleteResponse)
  return target;
}

int MultiIndexDeleteResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:similia.proto.MultiIndexDeleteResponse)
  int total_size = 0;

  // optional int64 processing_time_ms = 2;
  if (this->processing_time_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->processing_time_ms());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiIndexDeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:similia.proto.MultiIndexDeleteResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MultiIndexDeleteResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiIndexDeleteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:similia.proto.MultiIndexDeleteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:similia.proto.MultiIndexDeleteResponse)
    MergeFrom(*source);
  }
}

void MultiIndexDeleteResponse::MergeFrom(const MultiIndexDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:similia.proto.MultiIndexDeleteResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.processing_time_ms() != 0) {
    set_processing_time_ms(from.processing_time_ms());
  }
}

void MultiIndexDeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:similia.proto.MultiIndexDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiIndexDeleteResponse::CopyFrom(const MultiIndexDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:similia.proto.MultiIndexDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiIndexDeleteResponse::IsInitialized() const {

  return true;
}

void MultiIndexDeleteResponse::Swap(MultiIndexDeleteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiIndexDeleteResponse::InternalSwap(MultiIndexDeleteResponse* other) {
  std::swap(processing_time_ms_, other->processing_time_ms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiIndexDeleteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiIndexDeleteResponse_descriptor_;
  metadata.reflection = MultiIndexDeleteResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiIndexDeleteResponse

// optional int64 processing_time_ms = 2;
void MultiIndexDeleteResponse::clear_processing_time_ms() {
  processing_time_ms_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MultiIndexDeleteResponse::processing_time_ms() const {
  // @@protoc_insertion_point(field_get:similia.proto.MultiIndexDeleteResponse.processing_time_ms)
  return processing_time_ms_;
}
 void MultiIndexDeleteResponse::set_processing_time_ms(::google::protobuf::int64 value) {
  
  processing_time_ms_ = value;
  // @@protoc_insertion_point(field_set:similia.proto.MultiIndexDeleteResponse.processing_time_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuantizationRequest::kFeaturesFieldNumber;
const int QuantizationRequest::kImageIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuantizationRequest::QuantizationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:similia.proto.QuantizationRequest)
}

void QuantizationRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  features_ = const_cast< ::similia::proto::Features*>(&::similia::proto::Features::default_instance());
}

QuantizationRequest::QuantizationRequest(const QuantizationRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:similia.proto.QuantizationRequest)
}

void QuantizationRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  features_ = NULL;
  image_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

QuantizationRequest::~QuantizationRequest() {
  // @@protoc_insertion_point(destructor:similia.proto.QuantizationRequest)
  SharedDtor();
}

void QuantizationRequest::SharedDtor() {
  image_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete features_;
  }
}

void QuantizationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuantizationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuantizationRequest_descriptor_;
}

const QuantizationRequest& QuantizationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto();
  return *default_instance_;
}

QuantizationRequest* QuantizationRequest::default_instance_ = NULL;

QuantizationRequest* QuantizationRequest::New(::google::protobuf::Arena* arena) const {
  QuantizationRequest* n = new QuantizationRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuantizationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:similia.proto.QuantizationRequest)
  if (GetArenaNoVirtual() == NULL && features_ != NULL) delete features_;
  features_ = NULL;
  image_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool QuantizationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:similia.proto.QuantizationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .similia.proto.Features features = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_features()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_image_id;
        break;
      }

      // optional string image_id = 2;
      case 2: {
        if (tag == 18) {
         parse_image_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image_id().data(), this->image_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "similia.proto.QuantizationRequest.image_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:similia.proto.QuantizationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:similia.proto.QuantizationRequest)
  return false;
#undef DO_
}

void QuantizationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:similia.proto.QuantizationRequest)
  // optional .similia.proto.Features features = 1;
  if (this->has_features()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->features_, output);
  }

  // optional string image_id = 2;
  if (this->image_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_id().data(), this->image_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "similia.proto.QuantizationRequest.image_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->image_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:similia.proto.QuantizationRequest)
}

::google::protobuf::uint8* QuantizationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:similia.proto.QuantizationRequest)
  // optional .similia.proto.Features features = 1;
  if (this->has_features()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->features_, false, target);
  }

  // optional string image_id = 2;
  if (this->image_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_id().data(), this->image_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "similia.proto.QuantizationRequest.image_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->image_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:similia.proto.QuantizationRequest)
  return target;
}

int QuantizationRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:similia.proto.QuantizationRequest)
  int total_size = 0;

  // optional .similia.proto.Features features = 1;
  if (this->has_features()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->features_);
  }

  // optional string image_id = 2;
  if (this->image_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuantizationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:similia.proto.QuantizationRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QuantizationRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QuantizationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:similia.proto.QuantizationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:similia.proto.QuantizationRequest)
    MergeFrom(*source);
  }
}

void QuantizationRequest::MergeFrom(const QuantizationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:similia.proto.QuantizationRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_features()) {
    mutable_features()->::similia::proto::Features::MergeFrom(from.features());
  }
  if (from.image_id().size() > 0) {

    image_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_id_);
  }
}

void QuantizationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:similia.proto.QuantizationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuantizationRequest::CopyFrom(const QuantizationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:similia.proto.QuantizationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuantizationRequest::IsInitialized() const {

  return true;
}

void QuantizationRequest::Swap(QuantizationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuantizationRequest::InternalSwap(QuantizationRequest* other) {
  std::swap(features_, other->features_);
  image_id_.Swap(&other->image_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuantizationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuantizationRequest_descriptor_;
  metadata.reflection = QuantizationRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuantizationRequest

// optional .similia.proto.Features features = 1;
bool QuantizationRequest::has_features() const {
  return !_is_default_instance_ && features_ != NULL;
}
void QuantizationRequest::clear_features() {
  if (GetArenaNoVirtual() == NULL && features_ != NULL) delete features_;
  features_ = NULL;
}
const ::similia::proto::Features& QuantizationRequest::features() const {
  // @@protoc_insertion_point(field_get:similia.proto.QuantizationRequest.features)
  return features_ != NULL ? *features_ : *default_instance_->features_;
}
::similia::proto::Features* QuantizationRequest::mutable_features() {
  
  if (features_ == NULL) {
    features_ = new ::similia::proto::Features;
  }
  // @@protoc_insertion_point(field_mutable:similia.proto.QuantizationRequest.features)
  return features_;
}
::similia::proto::Features* QuantizationRequest::release_features() {
  // @@protoc_insertion_point(field_release:similia.proto.QuantizationRequest.features)
  
  ::similia::proto::Features* temp = features_;
  features_ = NULL;
  return temp;
}
void QuantizationRequest::set_allocated_features(::similia::proto::Features* features) {
  delete features_;
  features_ = features;
  if (features) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:similia.proto.QuantizationRequest.features)
}

// optional string image_id = 2;
void QuantizationRequest::clear_image_id() {
  image_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& QuantizationRequest::image_id() const {
  // @@protoc_insertion_point(field_get:similia.proto.QuantizationRequest.image_id)
  return image_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QuantizationRequest::set_image_id(const ::std::string& value) {
  
  image_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:similia.proto.QuantizationRequest.image_id)
}
 void QuantizationRequest::set_image_id(const char* value) {
  
  image_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:similia.proto.QuantizationRequest.image_id)
}
 void QuantizationRequest::set_image_id(const char* value, size_t size) {
  
  image_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:similia.proto.QuantizationRequest.image_id)
}
 ::std::string* QuantizationRequest::mutable_image_id() {
  
  // @@protoc_insertion_point(field_mutable:similia.proto.QuantizationRequest.image_id)
  return image_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QuantizationRequest::release_image_id() {
  // @@protoc_insertion_point(field_release:similia.proto.QuantizationRequest.image_id)
  
  return image_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QuantizationRequest::set_allocated_image_id(::std::string* image_id) {
  if (image_id != NULL) {
    
  } else {
    
  }
  image_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_id);
  // @@protoc_insertion_point(field_set_allocated:similia.proto.QuantizationRequest.image_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuantizationResponse::kProcessingTimeMsFieldNumber;
const int QuantizationResponse::kCompressingIdsFieldNumber;
const int QuantizationResponse::kIndexingIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuantizationResponse::QuantizationResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:similia.proto.QuantizationResponse)
}

void QuantizationResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  compressing_ids_ = const_cast< ::similia::proto::CompressingClustersIds*>(&::similia::proto::CompressingClustersIds::default_instance());
  indexing_ids_ = const_cast< ::similia::proto::IndexingClustersIds*>(&::similia::proto::IndexingClustersIds::default_instance());
}

QuantizationResponse::QuantizationResponse(const QuantizationResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:similia.proto.QuantizationResponse)
}

void QuantizationResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  processing_time_ms_ = GOOGLE_LONGLONG(0);
  compressing_ids_ = NULL;
  indexing_ids_ = NULL;
}

QuantizationResponse::~QuantizationResponse() {
  // @@protoc_insertion_point(destructor:similia.proto.QuantizationResponse)
  SharedDtor();
}

void QuantizationResponse::SharedDtor() {
  if (this != default_instance_) {
    delete compressing_ids_;
    delete indexing_ids_;
  }
}

void QuantizationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuantizationResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuantizationResponse_descriptor_;
}

const QuantizationResponse& QuantizationResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_similia_2fproto_2fsimilia_2eproto();
  return *default_instance_;
}

QuantizationResponse* QuantizationResponse::default_instance_ = NULL;

QuantizationResponse* QuantizationResponse::New(::google::protobuf::Arena* arena) const {
  QuantizationResponse* n = new QuantizationResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuantizationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:similia.proto.QuantizationResponse)
  processing_time_ms_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && compressing_ids_ != NULL) delete compressing_ids_;
  compressing_ids_ = NULL;
  if (GetArenaNoVirtual() == NULL && indexing_ids_ != NULL) delete indexing_ids_;
  indexing_ids_ = NULL;
}

bool QuantizationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:similia.proto.QuantizationResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 processing_time_ms = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &processing_time_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_compressing_ids;
        break;
      }

      // optional .similia.proto.CompressingClustersIds compressing_ids = 3;
      case 3: {
        if (tag == 26) {
         parse_compressing_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compressing_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_indexing_ids;
        break;
      }

      // optional .similia.proto.IndexingClustersIds indexing_ids = 4;
      case 4: {
        if (tag == 34) {
         parse_indexing_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_indexing_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:similia.proto.QuantizationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:similia.proto.QuantizationResponse)
  return false;
#undef DO_
}

void QuantizationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:similia.proto.QuantizationResponse)
  // optional int64 processing_time_ms = 2;
  if (this->processing_time_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->processing_time_ms(), output);
  }

  // optional .similia.proto.CompressingClustersIds compressing_ids = 3;
  if (this->has_compressing_ids()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->compressing_ids_, output);
  }

  // optional .similia.proto.IndexingClustersIds indexing_ids = 4;
  if (this->has_indexing_ids()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->indexing_ids_, output);
  }

  // @@protoc_insertion_point(serialize_end:similia.proto.QuantizationResponse)
}

::google::protobuf::uint8* QuantizationResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:similia.proto.QuantizationResponse)
  // optional int64 processing_time_ms = 2;
  if (this->processing_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->processing_time_ms(), target);
  }

  // optional .similia.proto.CompressingClustersIds compressing_ids = 3;
  if (this->has_compressing_ids()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->compressing_ids_, false, target);
  }

  // optional .similia.proto.IndexingClustersIds indexing_ids = 4;
  if (this->has_indexing_ids()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->indexing_ids_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:similia.proto.QuantizationResponse)
  return target;
}

int QuantizationResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:similia.proto.QuantizationResponse)
  int total_size = 0;

  // optional int64 processing_time_ms = 2;
  if (this->processing_time_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->processing_time_ms());
  }

  // optional .similia.proto.CompressingClustersIds compressing_ids = 3;
  if (this->has_compressing_ids()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->compressing_ids_);
  }

  // optional .similia.proto.IndexingClustersIds indexing_ids = 4;
  if (this->has_indexing_ids()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->indexing_ids_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuantizationResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:similia.proto.QuantizationResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QuantizationResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QuantizationResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:similia.proto.QuantizationResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:similia.proto.QuantizationResponse)
    MergeFrom(*source);
  }
}

void QuantizationResponse::MergeFrom(const QuantizationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:similia.proto.QuantizationResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.processing_time_ms() != 0) {
    set_processing_time_ms(from.processing_time_ms());
  }
  if (from.has_compressing_ids()) {
    mutable_compressing_ids()->::similia::proto::CompressingClustersIds::MergeFrom(from.compressing_ids());
  }
  if (from.has_indexing_ids()) {
    mutable_indexing_ids()->::similia::proto::IndexingClustersIds::MergeFrom(from.indexing_ids());
  }
}

void QuantizationResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:similia.proto.QuantizationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuantizationResponse::CopyFrom(const QuantizationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:similia.proto.QuantizationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuantizationResponse::IsInitialized() const {

  return true;
}

void QuantizationResponse::Swap(QuantizationResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuantizationResponse::InternalSwap(QuantizationResponse* other) {
  std::swap(processing_time_ms_, other->processing_time_ms_);
  std::swap(compressing_ids_, other->compressing_ids_);
  std::swap(indexing_ids_, other->indexing_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuantizationResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuantizationResponse_descriptor_;
  metadata.reflection = QuantizationResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuantizationResponse

// optional int64 processing_time_ms = 2;
void QuantizationResponse::clear_processing_time_ms() {
  processing_time_ms_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 QuantizationResponse::processing_time_ms() const {
  // @@protoc_insertion_point(field_get:similia.proto.QuantizationResponse.processing_time_ms)
  return processing_time_ms_;
}
 void QuantizationResponse::set_processing_time_ms(::google::protobuf::int64 value) {
  
  processing_time_ms_ = value;
  // @@protoc_insertion_point(field_set:similia.proto.QuantizationResponse.processing_time_ms)
}

// optional .similia.proto.CompressingClustersIds compressing_ids = 3;
bool QuantizationResponse::has_compressing_ids() const {
  return !_is_default_instance_ && compressing_ids_ != NULL;
}
void QuantizationResponse::clear_compressing_ids() {
  if (GetArenaNoVirtual() == NULL && compressing_ids_ != NULL) delete compressing_ids_;
  compressing_ids_ = NULL;
}
const ::similia::proto::CompressingClustersIds& QuantizationResponse::compressing_ids() const {
  // @@protoc_insertion_point(field_get:similia.proto.QuantizationResponse.compressing_ids)
  return compressing_ids_ != NULL ? *compressing_ids_ : *default_instance_->compressing_ids_;
}
::similia::proto::CompressingClustersIds* QuantizationResponse::mutable_compressing_ids() {
  
  if (compressing_ids_ == NULL) {
    compressing_ids_ = new ::similia::proto::CompressingClustersIds;
  }
  // @@protoc_insertion_point(field_mutable:similia.proto.QuantizationResponse.compressing_ids)
  return compressing_ids_;
}
::similia::proto::CompressingClustersIds* QuantizationResponse::release_compressing_ids() {
  // @@protoc_insertion_point(field_release:similia.proto.QuantizationResponse.compressing_ids)
  
  ::similia::proto::CompressingClustersIds* temp = compressing_ids_;
  compressing_ids_ = NULL;
  return temp;
}
void QuantizationResponse::set_allocated_compressing_ids(::similia::proto::CompressingClustersIds* compressing_ids) {
  delete compressing_ids_;
  compressing_ids_ = compressing_ids;
  if (compressing_ids) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:similia.proto.QuantizationResponse.compressing_ids)
}

// optional .similia.proto.IndexingClustersIds indexing_ids = 4;
bool QuantizationResponse::has_indexing_ids() const {
  return !_is_default_instance_ && indexing_ids_ != NULL;
}
void QuantizationResponse::clear_indexing_ids() {
  if (GetArenaNoVirtual() == NULL && indexing_ids_ != NULL) delete indexing_ids_;
  indexing_ids_ = NULL;
}
const ::similia::proto::IndexingClustersIds& QuantizationResponse::indexing_ids() const {
  // @@protoc_insertion_point(field_get:similia.proto.QuantizationResponse.indexing_ids)
  return indexing_ids_ != NULL ? *indexing_ids_ : *default_instance_->indexing_ids_;
}
::similia::proto::IndexingClustersIds* QuantizationResponse::mutable_indexing_ids() {
  
  if (indexing_ids_ == NULL) {
    indexing_ids_ = new ::similia::proto::IndexingClustersIds;
  }
  // @@protoc_insertion_point(field_mutable:similia.proto.QuantizationResponse.indexing_ids)
  return indexing_ids_;
}
::similia::proto::IndexingClustersIds* QuantizationResponse::release_indexing_ids() {
  // @@protoc_insertion_point(field_release:similia.proto.QuantizationResponse.indexing_ids)
  
  ::similia::proto::IndexingClustersIds* temp = indexing_ids_;
  indexing_ids_ = NULL;
  return temp;
}
void QuantizationResponse::set_allocated_indexing_ids(::similia::proto::IndexingClustersIds* indexing_ids) {
  delete indexing_ids_;
  indexing_ids_ = indexing_ids;
  if (indexing_ids) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:similia.proto.QuantizationResponse.indexing_ids)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace similia

// @@protoc_insertion_point(global_scope)
