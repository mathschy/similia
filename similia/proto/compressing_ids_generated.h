// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_COMPRESSINGIDS_SIMILIA_FBS_H_
#define FLATBUFFERS_GENERATED_COMPRESSINGIDS_SIMILIA_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace similia {
namespace fbs {

struct CompressingIds;

/// The compressing ids are integer between 0 and 255 (encoded as ubyte)
struct CompressingIds FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4
  };
  const flatbuffers::Vector<uint8_t> *id() const { return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_ID); }
  flatbuffers::Vector<uint8_t> *mutable_id() { return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_ID); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ID) &&
           verifier.Verify(id()) &&
           verifier.EndTable();
  }
};

struct CompressingIdsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> id) { fbb_.AddOffset(CompressingIds::VT_ID, id); }
  CompressingIdsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  CompressingIdsBuilder &operator=(const CompressingIdsBuilder &);
  flatbuffers::Offset<CompressingIds> Finish() {
    auto o = flatbuffers::Offset<CompressingIds>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<CompressingIds> CreateCompressingIds(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<uint8_t>> id = 0) {
  CompressingIdsBuilder builder_(_fbb);
  builder_.add_id(id);
  return builder_.Finish();
}

inline const similia::fbs::CompressingIds *GetCompressingIds(const void *buf) { return flatbuffers::GetRoot<similia::fbs::CompressingIds>(buf); }

inline CompressingIds *GetMutableCompressingIds(void *buf) { return flatbuffers::GetMutableRoot<CompressingIds>(buf); }

inline bool VerifyCompressingIdsBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<similia::fbs::CompressingIds>(); }

inline void FinishCompressingIdsBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<similia::fbs::CompressingIds> root) { fbb.Finish(root); }

}  // namespace fbs
}  // namespace similia

#endif  // FLATBUFFERS_GENERATED_COMPRESSINGIDS_SIMILIA_FBS_H_
