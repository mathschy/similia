// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_COMPRESSEDELEMENTS_SIMILIA_FBS_H_
#define FLATBUFFERS_GENERATED_COMPRESSEDELEMENTS_SIMILIA_FBS_H_

#include "flatbuffers/flatbuffers.h"

#include "compressing_ids_generated.h"

namespace similia {
namespace fbs {

struct SerializedCompressingIds;

struct CompressedElements;

struct SerializedCompressingIds FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_COMPRESSING_IDS = 4
  };
  const flatbuffers::Vector<uint8_t> *compressing_ids() const { return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_COMPRESSING_IDS); }
  flatbuffers::Vector<uint8_t> *mutable_compressing_ids() { return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_COMPRESSING_IDS); }
  const similia::fbs::CompressingIds *compressing_ids_nested_root() const { return flatbuffers::GetRoot<similia::fbs::CompressingIds>(compressing_ids()->Data()); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_COMPRESSING_IDS) &&
           verifier.Verify(compressing_ids()) &&
           verifier.EndTable();
  }
};

struct SerializedCompressingIdsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_compressing_ids(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> compressing_ids) { fbb_.AddOffset(SerializedCompressingIds::VT_COMPRESSING_IDS, compressing_ids); }
  SerializedCompressingIdsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SerializedCompressingIdsBuilder &operator=(const SerializedCompressingIdsBuilder &);
  flatbuffers::Offset<SerializedCompressingIds> Finish() {
    auto o = flatbuffers::Offset<SerializedCompressingIds>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<SerializedCompressingIds> CreateSerializedCompressingIds(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<uint8_t>> compressing_ids = 0) {
  SerializedCompressingIdsBuilder builder_(_fbb);
  builder_.add_compressing_ids(compressing_ids);
  return builder_.Finish();
}

struct CompressedElements FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_COMPRESSING_IDS = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *id() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_ID); }
  flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *mutable_id() { return GetPointer<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_ID); }
  const flatbuffers::Vector<flatbuffers::Offset<SerializedCompressingIds>> *compressing_ids() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SerializedCompressingIds>> *>(VT_COMPRESSING_IDS); }
  flatbuffers::Vector<flatbuffers::Offset<SerializedCompressingIds>> *mutable_compressing_ids() { return GetPointer<flatbuffers::Vector<flatbuffers::Offset<SerializedCompressingIds>> *>(VT_COMPRESSING_IDS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ID) &&
           verifier.Verify(id()) &&
           verifier.VerifyVectorOfStrings(id()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_COMPRESSING_IDS) &&
           verifier.Verify(compressing_ids()) &&
           verifier.VerifyVectorOfTables(compressing_ids()) &&
           verifier.EndTable();
  }
};

struct CompressedElementsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> id) { fbb_.AddOffset(CompressedElements::VT_ID, id); }
  void add_compressing_ids(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SerializedCompressingIds>>> compressing_ids) { fbb_.AddOffset(CompressedElements::VT_COMPRESSING_IDS, compressing_ids); }
  CompressedElementsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  CompressedElementsBuilder &operator=(const CompressedElementsBuilder &);
  flatbuffers::Offset<CompressedElements> Finish() {
    auto o = flatbuffers::Offset<CompressedElements>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<CompressedElements> CreateCompressedElements(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> id = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SerializedCompressingIds>>> compressing_ids = 0) {
  CompressedElementsBuilder builder_(_fbb);
  builder_.add_compressing_ids(compressing_ids);
  builder_.add_id(id);
  return builder_.Finish();
}

inline const similia::fbs::CompressedElements *GetCompressedElements(const void *buf) { return flatbuffers::GetRoot<similia::fbs::CompressedElements>(buf); }

inline CompressedElements *GetMutableCompressedElements(void *buf) { return flatbuffers::GetMutableRoot<CompressedElements>(buf); }

inline bool VerifyCompressedElementsBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<similia::fbs::CompressedElements>(); }

inline void FinishCompressedElementsBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<similia::fbs::CompressedElements> root) { fbb.Finish(root); }

}  // namespace fbs
}  // namespace similia

#endif  // FLATBUFFERS_GENERATED_COMPRESSEDELEMENTS_SIMILIA_FBS_H_
